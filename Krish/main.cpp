#include <Arduino.h>
#include <U8g2lib.h>

//Constants
  const uint32_t interval = 100; //Display update interval

//Pin definitions
  //Row select and enable
  const int RA0_PIN = D3;
  const int RA1_PIN = D6;
  const int RA2_PIN = D12;
  const int REN_PIN = A5;

  //Matrix input and output
  const int C0_PIN = A2;
  const int C1_PIN = D9;
  const int C2_PIN = A6;
  const int C3_PIN = D1;
  const int OUT_PIN = D11;

  //Audio analogue out
  const int OUTL_PIN = A4;
  const int OUTR_PIN = A3;

  //Joystick analogue in
  const int JOYY_PIN = A0;
  const int JOYX_PIN = A1;

  //Output multiplexer bits
  const int DEN_BIT = 3;
  const int DRST_BIT = 4;
  const int HKOW_BIT = 5;
  const int HKOE_BIT = 6;

  //Wave Selector code
  volatile int increase = 1;
  volatile int wave_select = 3;

  //Phase step sizes
  const uint32_t stepSizes [12] = {51076057, 54113197, 57330935, 60740010, 64351799, 68178356, 72232452, 76527617, 81078186, 85899346, 91007187, 96418756};
  const uint32_t sineTable [1024] = {2147483647, 2160660358, 2173836574, 2187011798, 2200185533, 2213357285, 2226526556, 2239692851, 2252855675, 2266014531, 2279168925, 2292318361, 2305462344, 2318600379, 2331731972, 2344856628, 2357973852, 2371083153, 2384184034, 2397276004, 2410358570, 2423431238, 2436493517, 2449544915, 2462584941, 2475613103, 2488628912, 2501631876, 2514621507, 2527597315, 2540558813, 2553505511, 2566436923, 2579352561, 2592251940, 2605134574, 2617999977, 2630847665, 2643677156, 2656487964, 2669279609, 2682051609, 2694803483, 2707534750, 2720244932, 2732933549, 2745600125, 2758244182, 2770865244, 2783462836, 2796036484, 2808585714, 2821110054, 2833609033, 2846082179, 2858529024, 2870949098, 2883341933, 2895707065, 2908044026, 2920352352, 2932631580, 2944881248, 2957100895, 2969290059, 2981448284, 2993575110, 3005670081, 3017732741, 3029762638, 3041759317, 3053722327, 3065651218, 3077545540, 3089404846, 3101228689, 3113016624, 3124768208, 3136482997, 3148160551, 3159800430, 3171402196, 3182965412, 3194489643, 3205974454, 3217419414, 3228824091, 3240188057, 3251510883, 3262792142, 3274031411, 3285228267, 3296382286, 3307493051, 3318560141, 3329583142, 3340561637, 3351495213, 3362383459, 3373225964, 3384022321, 3394772123, 3405474966, 3416130446, 3426738161, 3437297714, 3447808706, 3458270741, 3468683426, 3479046369, 3489359179, 3499621468, 3509832850, 3519992940, 3530101356, 3540157718, 3550161645, 3560112763, 3570010696, 3579855072, 3589645520, 3599381671, 3609063159, 3618689620, 3628260690, 3637776010, 3647235222, 3656637968, 3665983896, 3675272653, 3684503889, 3693677258, 3702792414, 3711849012, 3720846714, 3729785179, 3738664071, 3747483057, 3756241803, 3764939981, 3773577262, 3782153321, 3790667837, 3799120487, 3807510954, 3815838922, 3824104077, 3832306109, 3840444708, 3848519568, 3856530385, 3864476857, 3872358686, 3880175573, 3887927226, 3895613353, 3903233663, 3910787870, 3918275690, 3925696840, 3933051042, 3940338018, 3947557494, 3954709199, 3961792862, 3968808218, 3975755001, 3982632952, 3989441810, 3996181319, 4002851226, 4009451280, 4015981231, 4022440835, 4028829847, 4035148028, 4041395140, 4047570946, 4053675216, 4059707718, 4065668226, 4071556516, 4077372366, 4083115556, 4088785871, 4094383096, 4099907023, 4105357441, 4110734147, 4116036937, 4121265613, 4126419976, 4131499834, 4136504995, 4141435270, 4146290475, 4151070425, 4155774941, 4160403846, 4164956966, 4169434129, 4173835167, 4178159914, 4182408207, 4186579887, 4190674795, 4194692779, 4198633686, 4202497369, 4206283681, 4209992481, 4213623629, 4217176987, 4220652423, 4224049805, 4227369006, 4230609900, 4233772365, 4236856283, 4239861538, 4242788015, 4245635606, 4248404202, 4251093699, 4253703997, 4256234997, 4258686604, 4261058725, 4263351271, 4265564156, 4267697297, 4269750612, 4271724026, 4273617463, 4275430852, 4277164125, 4278817217, 4280390065, 4281882611, 4283294798, 4284626573, 4285877885, 4287048688, 4288138938, 4289148594, 4290077616, 4290925972, 4291693628, 4292380555, 4292986729, 4293512125, 4293956725, 4294320512, 4294603471, 4294805592, 4294926868, 4294967294, 4294926868, 4294805592, 4294603471, 4294320512, 4293956725, 4293512125, 4292986729, 4292380555, 4291693628, 4290925972, 4290077616, 4289148594, 4288138938, 4287048688, 4285877885, 4284626573, 4283294798, 4281882611, 4280390065, 4278817217, 4277164125, 4275430852, 4273617463, 4271724026, 4269750612, 4267697297, 4265564156, 4263351271, 4261058725, 4258686604, 4256234997, 4253703997, 4251093699, 4248404202, 4245635606, 4242788015, 4239861538, 4236856283, 4233772365, 4230609900, 4227369006, 4224049805, 4220652423, 4217176987, 4213623629, 4209992481, 4206283681, 4202497369, 4198633686, 4194692779, 4190674795, 4186579887, 4182408207, 4178159914, 4173835167, 4169434129, 4164956966, 4160403846, 4155774941, 4151070425, 4146290475, 4141435270, 4136504995, 4131499834, 4126419976, 4121265613, 4116036937, 4110734147, 4105357441, 4099907023, 4094383096, 4088785871, 4083115556, 4077372366, 4071556516, 4065668226, 4059707718, 4053675216, 4047570946, 4041395140, 4035148028, 4028829847, 4022440835, 4015981231, 4009451280, 4002851226, 3996181319, 3989441810, 3982632952, 3975755001, 3968808218, 3961792862, 3954709199, 3947557494, 3940338018, 3933051042, 3925696840, 3918275690, 3910787870, 3903233663, 3895613353, 3887927226, 3880175573, 3872358686, 3864476857, 3856530385, 3848519568, 3840444708, 3832306109, 3824104077, 3815838922, 3807510954, 3799120487, 3790667837, 3782153321, 3773577262, 3764939981, 3756241803, 3747483057, 3738664071, 3729785179, 3720846714, 3711849012, 3702792414, 3693677258, 3684503889, 3675272653, 3665983896, 3656637968, 3647235222, 3637776010, 3628260690, 3618689620, 3609063159, 3599381671, 3589645520, 3579855072, 3570010696, 3560112763, 3550161645, 3540157718, 3530101356, 3519992940, 3509832850, 3499621468, 3489359179, 3479046369, 3468683426, 3458270741, 3447808706, 3437297714, 3426738161, 3416130446, 3405474966, 3394772123, 3384022321, 3373225964, 3362383459, 3351495213, 3340561637, 3329583142, 3318560141, 3307493051, 3296382286, 3285228267, 3274031411, 3262792142, 3251510883, 3240188057, 3228824091, 3217419414, 3205974454, 3194489643, 3182965412, 3171402196, 3159800430, 3148160551, 3136482997, 3124768208, 3113016624, 3101228689, 3089404846, 3077545540, 3065651218, 3053722327, 3041759317, 3029762638, 3017732741, 3005670081, 2993575110, 2981448284, 2969290059, 2957100895, 2944881248, 2932631580, 2920352352, 2908044026, 2895707065, 2883341933, 2870949098, 2858529024, 2846082179, 2833609033, 2821110054, 2808585714, 2796036484, 2783462836, 2770865244, 2758244182, 2745600125, 2732933549, 2720244932, 2707534750, 2694803483, 2682051609, 2669279609, 2656487964, 2643677156, 2630847665, 2617999977, 2605134574, 2592251940, 2579352561, 2566436923, 2553505511, 2540558813, 2527597315, 2514621507, 2501631876, 2488628912, 2475613103, 2462584941, 2449544915, 2436493517, 2423431238, 2410358570, 2397276004, 2384184034, 2371083153, 2357973852, 2344856628, 2331731972, 2318600379, 2305462344, 2292318361, 2279168925, 2266014531, 2252855675, 2239692851, 2226526556, 2213357285, 2200185533, 2187011798, 2173836574, 2160660358, 2147483647, 2134306936, 2121130720, 2107955496, 2094781761, 2081610009, 2068440738, 2055274443, 2042111619, 2028952763, 2015798369, 2002648933, 1989504950, 1976366915, 1963235322, 1950110666, 1936993442, 1923884141, 1910783260, 1897691290, 1884608724, 1871536056, 1858473777, 1845422379, 1832382353, 1819354191, 1806338382, 1793335418, 1780345787, 1767369979, 1754408481, 1741461783, 1728530371, 1715614733, 1702715354, 1689832720, 1676967317, 1664119629, 1651290138, 1638479330, 1625687685, 1612915685, 1600163811, 1587432544, 1574722362, 1562033745, 1549367169, 1536723112, 1524102050, 1511504458, 1498930810, 1486381580, 1473857240, 1461358261, 1448885115, 1436438270, 1424018196, 1411625361, 1399260229, 1386923268, 1374614942, 1362335714, 1350086046, 1337866399, 1325677235, 1313519010, 1301392184, 1289297213, 1277234553, 1265204656, 1253207977, 1241244967, 1229316076, 1217421754, 1205562448, 1193738605, 1181950670, 1170199086, 1158484297, 1146806743, 1135166864, 1123565098, 1112001882, 1100477651, 1088992840, 1077547880, 1066143203, 1054779237, 1043456411, 1032175152, 1020935883, 1009739027, 998585008, 987474243, 976407153, 965384152, 954405657, 943472081, 932583835, 921741330, 910944973, 900195171, 889492328, 878836848, 868229133, 857669580, 847158588, 836696553, 826283868, 815920925, 805608115, 795345826, 785134444, 774974354, 764865938, 754809576, 744805649, 734854531, 724956598, 715112222, 705321774, 695585623, 685904135, 676277674, 666706604, 657191284, 647732072, 638329326, 628983398, 619694641, 610463405, 601290036, 592174880, 583118282, 574120580, 565182115, 556303223, 547484237, 538725491, 530027313, 521390032, 512813973, 504299457, 495846807, 487456340, 479128372, 470863217, 462661185, 454522586, 446447726, 438436909, 430490437, 422608608, 414791721, 407040068, 399353941, 391733631, 384179424, 376691604, 369270454, 361916252, 354629276, 347409800, 340258095, 333174432, 326159076, 319212293, 312334342, 305525484, 298785975, 292116068, 285516014, 278986063, 272526459, 266137447, 259819266, 253572154, 247396348, 241292078, 235259576, 229299068, 223410778, 217594928, 211851738, 206181423, 200584198, 195060271, 189609853, 184233147, 178930357, 173701681, 168547318, 163467460, 158462299, 153532024, 148676819, 143896869, 139192353, 134563448, 130010328, 125533165, 121132127, 116807380, 112559087, 108387407, 104292499, 100274515, 96333608, 92469925, 88683613, 84974813, 81343665, 77790307, 74314871, 70917489, 67598288, 64357394, 61194929, 58111011, 55105756, 52179279, 49331688, 46563092, 43873595, 41263297, 38732297, 36280690, 33908569, 31616023, 29403138, 27269997, 25216682, 23243268, 21349831, 19536442, 17803169, 16150077, 14577229, 13084683, 11672496, 10340721, 9089409, 7918606, 6828356, 5818700, 4889678, 4041322, 3273666, 2586739, 1980565, 1455169, 1010569, 646782, 363823, 161702, 40426, 0, 40426, 161702, 363823, 646782, 1010569, 1455169, 1980565, 2586739, 3273666, 4041322, 4889678, 5818700, 6828356, 7918606, 9089409, 10340721, 11672496, 13084683, 14577229, 16150077, 17803169, 19536442, 21349831, 23243268, 25216682, 27269997, 29403138, 31616023, 33908569, 36280690, 38732297, 41263297, 43873595, 46563092, 49331688, 52179279, 55105756, 58111011, 61194929, 64357394, 67598288, 70917489, 74314871, 77790307, 81343665, 84974813, 88683613, 92469925, 96333608, 100274515, 104292499, 108387407, 112559087, 116807380, 121132127, 125533165, 130010328, 134563448, 139192353, 143896869, 148676819, 153532024, 158462299, 163467460, 168547318, 173701681, 178930357, 184233147, 189609853, 195060271, 200584198, 206181423, 211851738, 217594928, 223410778, 229299068, 235259576, 241292078, 247396348, 253572154, 259819266, 266137447, 272526459, 278986063, 285516014, 292116068, 298785975, 305525484, 312334342, 319212293, 326159076, 333174432, 340258095, 347409800, 354629276, 361916252, 369270454, 376691604, 384179424, 391733631, 399353941, 407040068, 414791721, 422608608, 430490437, 438436909, 446447726, 454522586, 462661185, 470863217, 479128372, 487456340, 495846807, 504299457, 512813973, 521390032, 530027313, 538725491, 547484237, 556303223, 565182115, 574120580, 583118282, 592174880, 601290036, 610463405, 619694641, 628983398, 638329326, 647732072, 657191284, 666706604, 676277674, 685904135, 695585623, 705321774, 715112222, 724956598, 734854531, 744805649, 754809576, 764865938, 774974354, 785134444, 795345826, 805608115, 815920925, 826283868, 836696553, 847158588, 857669580, 868229133, 878836848, 889492328, 900195171, 910944973, 921741330, 932583835, 943472081, 954405657, 965384152, 976407153, 987474243, 998585008, 1009739027, 1020935883, 1032175152, 1043456411, 1054779237, 1066143203, 1077547880, 1088992840, 1100477651, 1112001882, 1123565098, 1135166864, 1146806743, 1158484297, 1170199086, 1181950670, 1193738605, 1205562448, 1217421754, 1229316076, 1241244967, 1253207977, 1265204656, 1277234553, 1289297213, 1301392184, 1313519010, 1325677235, 1337866399, 1350086046, 1362335714, 1374614942, 1386923268, 1399260229, 1411625361, 1424018196, 1436438270, 1448885115, 1461358261, 1473857240, 1486381580, 1498930810, 1511504458, 1524102050, 1536723112, 1549367169, 1562033745, 1574722362, 1587432544, 1600163811, 1612915685, 1625687685, 1638479330, 1651290138, 1664119629, 1676967317, 1689832720, 1702715354, 1715614733, 1728530371, 1741461783, 1754408481, 1767369979, 1780345787, 1793335418, 1806338382, 1819354191, 1832382353, 1845422379, 1858473777, 1871536056, 1884608724, 1897691290, 1910783260, 1923884141, 1936993442, 1950110666, 1963235322, 1976366915, 1989504950, 2002648933, 2015798369, 2028952763, 2042111619, 2055274443, 2068440738, 2081610009, 2094781761, 2107955496, 2121130720, 2134306936};
  volatile uint32_t currentStepSize;


  //ADSR
  volatile uint8_t A = 2;
  volatile uint8_t D = 1;
  volatile uint8_t S = 1;
  volatile uint8_t R = 1;
  volatile uint8_t S_amp = 204;

//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}

void setRow(uint8_t rowIdx){
    digitalWrite(REN_PIN,LOW);
    digitalWrite(RA0_PIN, rowIdx & 0x01);
    digitalWrite(RA1_PIN, rowIdx & 0x02);
    digitalWrite(RA2_PIN, rowIdx & 0x04);
    digitalWrite(REN_PIN,HIGH);
}

uint8_t readCols(){
    // digitalWrite(RA0_PIN, LOW);
    // digitalWrite(RA1_PIN, LOW);
    // digitalWrite(RA2_PIN, LOW);
    // digitalWrite(REN_PIN,HIGH);
    uint8_t c0 = digitalRead(C0_PIN);
    uint8_t c1 = digitalRead(C1_PIN);
    uint8_t c2 = digitalRead(C2_PIN);
    uint8_t c3 = digitalRead(C3_PIN);
    return c3 << 3 | c2 << 2 | c1 << 1 | c0;
}


// uint32_t ADSR(uint32_t t){
    
//     static uint32_t scale = 0;
    
//     if (t == 0)
//         scale = 0;
        
//     else if (t < ((A*9 * 22000) >> 8)) //Attack envelope
//         scale += 84*(256/A);
        
//     else if (t == ((A*9 * 22000) >> 8)) //Attack peak
//         scale = 16777215;
        
//     else if (t < (((A*9 + D*76)*22000) >> 8)) //Decay envelope
//         scale -= (16777216 - (S_amp << 16))/(22000*76) * (256/D);
        
//     else if (t < (((A*9 + D*76 + S*46)*22000) >> 8)) //Sustain envelope
//         scale = S_amp << 16;
        
//     else if (t < (((A*9 + D*76 + S*46 + R*60)*22000) >> 8)) //Release envelope
//         scale -= (S_amp << 16)/(22000*60) * (256/R);
        
//     else
//         scale = 0;
    
//     return scale;

// }

uint32_t ADSR(uint32_t t){
    
    static uint32_t scale = 0;
    Serial.printf("%d\n", t);
    if (t == 0){
        scale = 0;
        Serial.printf("%d\n", t);
    }  
    else if (t < ((A*9 * 22000) >> 8)) {//Attack envelope
        scale += 84*(256/A); 
        // Serial.printf("%d\n", (A*9 * 22000) >> 8);y
        // Serial.printf("%d\n", t);

    }else if (t == ((A*9 * 22000) >> 8)) //Attack peak
        scale = 16777216;
    else if (t < (((A*9 + D*76)*22000) >> 8)){ //Decay envelope
        scale -= (256/D);
        // Serial.printf("D");
    }else if (t < (((A*9 + D*76 + S*46)*22000) >> 8)){ //Sustain envelope
        scale = 15099494;
        // Serial.printf("S");
    
    }else if (t < (((A*9 + D*76 + S*46 + R*60)*22000) >> 8)){ //Release envelope
        scale -= 11*(256/R);
        // Serial.printf("R");
        
    }else
        scale = 0;
        
    
    return scale;

}



void sampleISR() {

  static uint32_t phaseAcc = 0;
  static uint32_t time = 0;
  
  if (wave_select == 0) { //Sawtooth
    
    phaseAcc += currentStepSize;
    int32_t scaled_phaseAcc = ((phaseAcc >> 24)*ADSR(time));
    time += 1;
    int32_t Vout = (scaled_phaseAcc >> 24) >> 4;


    analogWrite(OUTR_PIN, Vout);
  }
  else if (wave_select == 1){ //Triangle
    if (increase == 1) {
      if ((phaseAcc + 2*currentStepSize) >= phaseAcc){
        phaseAcc += 2*currentStepSize;
      }
      else{
        phaseAcc -= 1;
        increase = -1;
      }
    }
    else {
      if ((phaseAcc - 2*currentStepSize) <= phaseAcc){
        phaseAcc -= 2*currentStepSize;
      }
      else{
        phaseAcc += 1;
        increase = 1;
      }
    }
    int32_t Vout = (phaseAcc >> 24) - 128;
    analogWrite(OUTR_PIN, Vout + 128);

  }
  else if (wave_select == 2) { //Square
    if (increase == 1) {
      if ((phaseAcc + 2*currentStepSize) >= phaseAcc){
        phaseAcc += 2*currentStepSize;
      }
      else{
        phaseAcc -= 1;
        increase = -1;
      }

    }
    else {
      if ((phaseAcc - 2*currentStepSize) <= phaseAcc){
        phaseAcc -= 2*currentStepSize;
      }
      else{
        phaseAcc += 1;
        increase = 1;
      }
      
    } 

    int32_t Vout = (phaseAcc == 0) ? 0 : (increase == 1) ? 127 : (increase == 1) ? -128 : 0;


    analogWrite(OUTR_PIN, Vout + 128);
    
  }
  else {
    phaseAcc += currentStepSize;
    int32_t scaled_phaseAcc = ((sineTable[phaseAcc >> 22]  >> 24)*ADSR(time));
    time += 1;
    int32_t Vout = (scaled_phaseAcc >> 24) >> 4;

    analogWrite(OUTR_PIN, Vout + 128);
  }

}


void setup() {
  // put your setup code here, to run once:
  //Hardware Timer
  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);

  sampleTimer->setOverflow(22000, HERTZ_FORMAT);
  sampleTimer->attachInterrupt(sampleISR);
  sampleTimer->resume();

  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply


  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");
}

void loop() {
  // put your main code here, to run repeatedly:
  static uint32_t next = millis();
  static uint32_t count = 0;
  uint8_t keyArray[7];

  while (millis() < next);  //Wait for next interval

  next += interval;

  
  //Update display
  u8g2.clearBuffer();         // clear the internal memory
  u8g2.setCursor(2,20);
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  uint32_t localCurrentStepSize = 0;
  uint32_t increase = 0;
  for (uint8_t i = 0; i < 3; i++){
    setRow(i);
    delayMicroseconds(3);
    uint8_t keys = readCols();  
    keyArray[i] = keys;    
    u8g2.print(keyArray[i],HEX);

    uint8_t onehot = keys ^ 0xF;
    for(int j = 0; j<4; j++){
        uint8_t idx = 4*i + j;
        if (onehot & (1<<j)){
            localCurrentStepSize = stepSizes[idx];
        }
    }

  }
  __atomic_store_n(&currentStepSize, localCurrentStepSize, __ATOMIC_RELAXED);

  
  u8g2.sendBuffer();          // transfer internal memory to the display

  //Toggle LED
  digitalToggle(LED_BUILTIN);
  
}