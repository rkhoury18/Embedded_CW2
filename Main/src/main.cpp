#include <Arduino.h>
#include <U8g2lib.h>
#include <iostream>
#include <STM32FreeRTOS.h>
#include <ES_CAN.h>
#include "knobs.h"

// #define sender 0
// #define reciever 0

//#define DISABLE_THREADS
//#define TEST_SCAN_KEYS
//#define TEST_DISPLAY_UPDATE
//#define TEST_DECODE
//#define TEST_CAN_TX
//#define TEST_CAN_RX_ISR
//#define TEST_CAN_TX_ISR
//#define TEST_ISRTASK
//#define TEST_SAMPLEISR
//#define TEST_SEND_SOUND
#define SAMPLE_BUFFER_SIZE 128
//Variable neede for Double Buffer 
uint8_t sampleBuffer0[SAMPLE_BUFFER_SIZE];
uint8_t sampleBuffer1[SAMPLE_BUFFER_SIZE];
volatile bool writeBuffer1 = false;
SemaphoreHandle_t sampleBufferMutex;

//Wave Selector code 

//Constants
  const uint32_t interval = 100; //Display update interval
  const uint32_t stepSizes[12] = {50953930, 54077542, 57396381, 60715219, 64229283, 68133799, 72233540, 76528508, 81018701, 85899345, 90975216, 96441538};
  const char notes[12] = {'C','C','D','D','E','F','F','G','G','A','A','B'};
  const char sharps[12] = {' ','#',' ','#',' ',' ','#',' ','#',' ','#',' '};
  const uint32_t sineTable [1024] = {2147483647, 2160660358, 2173836574, 2187011798, 2200185533, 2213357285, 2226526556, 2239692851, 2252855675, 2266014531, 2279168925, 2292318361, 2305462344, 2318600379, 2331731972, 2344856628, 2357973852, 2371083153, 2384184034, 2397276004, 2410358570, 2423431238, 2436493517, 2449544915, 2462584941, 2475613103, 2488628912, 2501631876, 2514621507, 2527597315, 2540558813, 2553505511, 2566436923, 2579352561, 2592251940, 2605134574, 2617999977, 2630847665, 2643677156, 2656487964, 2669279609, 2682051609, 2694803483, 2707534750, 2720244932, 2732933549, 2745600125, 2758244182, 2770865244, 2783462836, 2796036484, 2808585714, 2821110054, 2833609033, 2846082179, 2858529024, 2870949098, 2883341933, 2895707065, 2908044026, 2920352352, 2932631580, 2944881248, 2957100895, 2969290059, 2981448284, 2993575110, 3005670081, 3017732741, 3029762638, 3041759317, 3053722327, 3065651218, 3077545540, 3089404846, 3101228689, 3113016624, 3124768208, 3136482997, 3148160551, 3159800430, 3171402196, 3182965412, 3194489643, 3205974454, 3217419414, 3228824091, 3240188057, 3251510883, 3262792142, 3274031411, 3285228267, 3296382286, 3307493051, 3318560141, 3329583142, 3340561637, 3351495213, 3362383459, 3373225964, 3384022321, 3394772123, 3405474966, 3416130446, 3426738161, 3437297714, 3447808706, 3458270741, 3468683426, 3479046369, 3489359179, 3499621468, 3509832850, 3519992940, 3530101356, 3540157718, 3550161645, 3560112763, 3570010696, 3579855072, 3589645520, 3599381671, 3609063159, 3618689620, 3628260690, 3637776010, 3647235222, 3656637968, 3665983896, 3675272653, 3684503889, 3693677258, 3702792414, 3711849012, 3720846714, 3729785179, 3738664071, 3747483057, 3756241803, 3764939981, 3773577262, 3782153321, 3790667837, 3799120487, 3807510954, 3815838922, 3824104077, 3832306109, 3840444708, 3848519568, 3856530385, 3864476857, 3872358686, 3880175573, 3887927226, 3895613353, 3903233663, 3910787870, 3918275690, 3925696840, 3933051042, 3940338018, 3947557494, 3954709199, 3961792862, 3968808218, 3975755001, 3982632952, 3989441810, 3996181319, 4002851226, 4009451280, 4015981231, 4022440835, 4028829847, 4035148028, 4041395140, 4047570946, 4053675216, 4059707718, 4065668226, 4071556516, 4077372366, 4083115556, 4088785871, 4094383096, 4099907023, 4105357441, 4110734147, 4116036937, 4121265613, 4126419976, 4131499834, 4136504995, 4141435270, 4146290475, 4151070425, 4155774941, 4160403846, 4164956966, 4169434129, 4173835167, 4178159914, 4182408207, 4186579887, 4190674795, 4194692779, 4198633686, 4202497369, 4206283681, 4209992481, 4213623629, 4217176987, 4220652423, 4224049805, 4227369006, 4230609900, 4233772365, 4236856283, 4239861538, 4242788015, 4245635606, 4248404202, 4251093699, 4253703997, 4256234997, 4258686604, 4261058725, 4263351271, 4265564156, 4267697297, 4269750612, 4271724026, 4273617463, 4275430852, 4277164125, 4278817217, 4280390065, 4281882611, 4283294798, 4284626573, 4285877885, 4287048688, 4288138938, 4289148594, 4290077616, 4290925972, 4291693628, 4292380555, 4292986729, 4293512125, 4293956725, 4294320512, 4294603471, 4294805592, 4294926868, 4294967294, 4294926868, 4294805592, 4294603471, 4294320512, 4293956725, 4293512125, 4292986729, 4292380555, 4291693628, 4290925972, 4290077616, 4289148594, 4288138938, 4287048688, 4285877885, 4284626573, 4283294798, 4281882611, 4280390065, 4278817217, 4277164125, 4275430852, 4273617463, 4271724026, 4269750612, 4267697297, 4265564156, 4263351271, 4261058725, 4258686604, 4256234997, 4253703997, 4251093699, 4248404202, 4245635606, 4242788015, 4239861538, 4236856283, 4233772365, 4230609900, 4227369006, 4224049805, 4220652423, 4217176987, 4213623629, 4209992481, 4206283681, 4202497369, 4198633686, 4194692779, 4190674795, 4186579887, 4182408207, 4178159914, 4173835167, 4169434129, 4164956966, 4160403846, 4155774941, 4151070425, 4146290475, 4141435270, 4136504995, 4131499834, 4126419976, 4121265613, 4116036937, 4110734147, 4105357441, 4099907023, 4094383096, 4088785871, 4083115556, 4077372366, 4071556516, 4065668226, 4059707718, 4053675216, 4047570946, 4041395140, 4035148028, 4028829847, 4022440835, 4015981231, 4009451280, 4002851226, 3996181319, 3989441810, 3982632952, 3975755001, 3968808218, 3961792862, 3954709199, 3947557494, 3940338018, 3933051042, 3925696840, 3918275690, 3910787870, 3903233663, 3895613353, 3887927226, 3880175573, 3872358686, 3864476857, 3856530385, 3848519568, 3840444708, 3832306109, 3824104077, 3815838922, 3807510954, 3799120487, 3790667837, 3782153321, 3773577262, 3764939981, 3756241803, 3747483057, 3738664071, 3729785179, 3720846714, 3711849012, 3702792414, 3693677258, 3684503889, 3675272653, 3665983896, 3656637968, 3647235222, 3637776010, 3628260690, 3618689620, 3609063159, 3599381671, 3589645520, 3579855072, 3570010696, 3560112763, 3550161645, 3540157718, 3530101356, 3519992940, 3509832850, 3499621468, 3489359179, 3479046369, 3468683426, 3458270741, 3447808706, 3437297714, 3426738161, 3416130446, 3405474966, 3394772123, 3384022321, 3373225964, 3362383459, 3351495213, 3340561637, 3329583142, 3318560141, 3307493051, 3296382286, 3285228267, 3274031411, 3262792142, 3251510883, 3240188057, 3228824091, 3217419414, 3205974454, 3194489643, 3182965412, 3171402196, 3159800430, 3148160551, 3136482997, 3124768208, 3113016624, 3101228689, 3089404846, 3077545540, 3065651218, 3053722327, 3041759317, 3029762638, 3017732741, 3005670081, 2993575110, 2981448284, 2969290059, 2957100895, 2944881248, 2932631580, 2920352352, 2908044026, 2895707065, 2883341933, 2870949098, 2858529024, 2846082179, 2833609033, 2821110054, 2808585714, 2796036484, 2783462836, 2770865244, 2758244182, 2745600125, 2732933549, 2720244932, 2707534750, 2694803483, 2682051609, 2669279609, 2656487964, 2643677156, 2630847665, 2617999977, 2605134574, 2592251940, 2579352561, 2566436923, 2553505511, 2540558813, 2527597315, 2514621507, 2501631876, 2488628912, 2475613103, 2462584941, 2449544915, 2436493517, 2423431238, 2410358570, 2397276004, 2384184034, 2371083153, 2357973852, 2344856628, 2331731972, 2318600379, 2305462344, 2292318361, 2279168925, 2266014531, 2252855675, 2239692851, 2226526556, 2213357285, 2200185533, 2187011798, 2173836574, 2160660358, 2147483647, 2134306936, 2121130720, 2107955496, 2094781761, 2081610009, 2068440738, 2055274443, 2042111619, 2028952763, 2015798369, 2002648933, 1989504950, 1976366915, 1963235322, 1950110666, 1936993442, 1923884141, 1910783260, 1897691290, 1884608724, 1871536056, 1858473777, 1845422379, 1832382353, 1819354191, 1806338382, 1793335418, 1780345787, 1767369979, 1754408481, 1741461783, 1728530371, 1715614733, 1702715354, 1689832720, 1676967317, 1664119629, 1651290138, 1638479330, 1625687685, 1612915685, 1600163811, 1587432544, 1574722362, 1562033745, 1549367169, 1536723112, 1524102050, 1511504458, 1498930810, 1486381580, 1473857240, 1461358261, 1448885115, 1436438270, 1424018196, 1411625361, 1399260229, 1386923268, 1374614942, 1362335714, 1350086046, 1337866399, 1325677235, 1313519010, 1301392184, 1289297213, 1277234553, 1265204656, 1253207977, 1241244967, 1229316076, 1217421754, 1205562448, 1193738605, 1181950670, 1170199086, 1158484297, 1146806743, 1135166864, 1123565098, 1112001882, 1100477651, 1088992840, 1077547880, 1066143203, 1054779237, 1043456411, 1032175152, 1020935883, 1009739027, 998585008, 987474243, 976407153, 965384152, 954405657, 943472081, 932583835, 921741330, 910944973, 900195171, 889492328, 878836848, 868229133, 857669580, 847158588, 836696553, 826283868, 815920925, 805608115, 795345826, 785134444, 774974354, 764865938, 754809576, 744805649, 734854531, 724956598, 715112222, 705321774, 695585623, 685904135, 676277674, 666706604, 657191284, 647732072, 638329326, 628983398, 619694641, 610463405, 601290036, 592174880, 583118282, 574120580, 565182115, 556303223, 547484237, 538725491, 530027313, 521390032, 512813973, 504299457, 495846807, 487456340, 479128372, 470863217, 462661185, 454522586, 446447726, 438436909, 430490437, 422608608, 414791721, 407040068, 399353941, 391733631, 384179424, 376691604, 369270454, 361916252, 354629276, 347409800, 340258095, 333174432, 326159076, 319212293, 312334342, 305525484, 298785975, 292116068, 285516014, 278986063, 272526459, 266137447, 259819266, 253572154, 247396348, 241292078, 235259576, 229299068, 223410778, 217594928, 211851738, 206181423, 200584198, 195060271, 189609853, 184233147, 178930357, 173701681, 168547318, 163467460, 158462299, 153532024, 148676819, 143896869, 139192353, 134563448, 130010328, 125533165, 121132127, 116807380, 112559087, 108387407, 104292499, 100274515, 96333608, 92469925, 88683613, 84974813, 81343665, 77790307, 74314871, 70917489, 67598288, 64357394, 61194929, 58111011, 55105756, 52179279, 49331688, 46563092, 43873595, 41263297, 38732297, 36280690, 33908569, 31616023, 29403138, 27269997, 25216682, 23243268, 21349831, 19536442, 17803169, 16150077, 14577229, 13084683, 11672496, 10340721, 9089409, 7918606, 6828356, 5818700, 4889678, 4041322, 3273666, 2586739, 1980565, 1455169, 1010569, 646782, 363823, 161702, 40426, 0, 40426, 161702, 363823, 646782, 1010569, 1455169, 1980565, 2586739, 3273666, 4041322, 4889678, 5818700, 6828356, 7918606, 9089409, 10340721, 11672496, 13084683, 14577229, 16150077, 17803169, 19536442, 21349831, 23243268, 25216682, 27269997, 29403138, 31616023, 33908569, 36280690, 38732297, 41263297, 43873595, 46563092, 49331688, 52179279, 55105756, 58111011, 61194929, 64357394, 67598288, 70917489, 74314871, 77790307, 81343665, 84974813, 88683613, 92469925, 96333608, 100274515, 104292499, 108387407, 112559087, 116807380, 121132127, 125533165, 130010328, 134563448, 139192353, 143896869, 148676819, 153532024, 158462299, 163467460, 168547318, 173701681, 178930357, 184233147, 189609853, 195060271, 200584198, 206181423, 211851738, 217594928, 223410778, 229299068, 235259576, 241292078, 247396348, 253572154, 259819266, 266137447, 272526459, 278986063, 285516014, 292116068, 298785975, 305525484, 312334342, 319212293, 326159076, 333174432, 340258095, 347409800, 354629276, 361916252, 369270454, 376691604, 384179424, 391733631, 399353941, 407040068, 414791721, 422608608, 430490437, 438436909, 446447726, 454522586, 462661185, 470863217, 479128372, 487456340, 495846807, 504299457, 512813973, 521390032, 530027313, 538725491, 547484237, 556303223, 565182115, 574120580, 583118282, 592174880, 601290036, 610463405, 619694641, 628983398, 638329326, 647732072, 657191284, 666706604, 676277674, 685904135, 695585623, 705321774, 715112222, 724956598, 734854531, 744805649, 754809576, 764865938, 774974354, 785134444, 795345826, 805608115, 815920925, 826283868, 836696553, 847158588, 857669580, 868229133, 878836848, 889492328, 900195171, 910944973, 921741330, 932583835, 943472081, 954405657, 965384152, 976407153, 987474243, 998585008, 1009739027, 1020935883, 1032175152, 1043456411, 1054779237, 1066143203, 1077547880, 1088992840, 1100477651, 1112001882, 1123565098, 1135166864, 1146806743, 1158484297, 1170199086, 1181950670, 1193738605, 1205562448, 1217421754, 1229316076, 1241244967, 1253207977, 1265204656, 1277234553, 1289297213, 1301392184, 1313519010, 1325677235, 1337866399, 1350086046, 1362335714, 1374614942, 1386923268, 1399260229, 1411625361, 1424018196, 1436438270, 1448885115, 1461358261, 1473857240, 1486381580, 1498930810, 1511504458, 1524102050, 1536723112, 1549367169, 1562033745, 1574722362, 1587432544, 1600163811, 1612915685, 1625687685, 1638479330, 1651290138, 1664119629, 1676967317, 1689832720, 1702715354, 1715614733, 1728530371, 1741461783, 1754408481, 1767369979, 1780345787, 1793335418, 1806338382, 1819354191, 1832382353, 1845422379, 1858473777, 1871536056, 1884608724, 1897691290, 1910783260, 1923884141, 1936993442, 1950110666, 1963235322, 1976366915, 1989504950, 2002648933, 2015798369, 2028952763, 2042111619, 2055274443, 2068440738, 2081610009, 2094781761, 2107955496, 2121130720, 2134306936};
  const uint32_t LFOTable[4096] = {16777214, 16777204, 16777175, 16777125, 16777056, 16776967, 16776859, 16776730, 16776582, 16776415, 16776227, 16776020, 16775793, 16775546, 16775280, 16774993, 16774688, 16774362, 16774016, 16773651, 16773266, 16772862, 16772438, 16771994, 16771530, 16771046, 16770543, 16770020, 16769477, 16768915, 16768333, 16767731, 16767110, 16766468, 16765807, 16765127, 16764426, 16763706, 16762966, 16762207, 16761428, 16760629, 16759810, 16758972, 16758114, 16757236, 16756339, 16755421, 16754485, 16753528, 16752552, 16751556, 16750541, 16749506, 16748451, 16747376, 16746282, 16745168, 16744035, 16742881, 16741709, 16740516, 16739304, 16738072, 16736821, 16735549, 16734259, 16732948, 16731618, 16730269, 16728899, 16727510, 16726102, 16724674, 16723226, 16721759, 16720272, 16718765, 16717239, 16715693, 16714128, 16712543, 16710938, 16709314, 16707670, 16706007, 16704324, 16702622, 16700900, 16699158, 16697397, 16695616, 16693816, 16691996, 16690157, 16688298, 16686420, 16684522, 16682605, 16680668, 16678711, 16676735, 16674740, 16672725, 16670691, 16668637, 16666563, 16664470, 16662358, 16660226, 16658075, 16655904, 16653714, 16651504, 16649275, 16647027, 16644759, 16642471, 16640164, 16637838, 16635493, 16633128, 16630743, 16628339, 16625916, 16623473, 16621011, 16618530, 16616029, 16613509, 16610970, 16608411, 16605833, 16603235, 16600619, 16597982, 16595327, 16592652, 16589958, 16587245, 16584512, 16581760, 16578989, 16576198, 16573389, 16570560, 16567711, 16564844, 16561957, 16559051, 16556126, 16553182, 16550218, 16547235, 16544233, 16541212, 16538171, 16535112, 16532033, 16528935, 16525818, 16522682, 16519526, 16516352, 16513158, 16509945, 16506714, 16503463, 16500193, 16496903, 16493595, 16490268, 16486922, 16483556, 16480172, 16476768, 16473346, 16469904, 16466444, 16462964, 16459465, 16455948, 16452411, 16448856, 16445281, 16441688, 16438075, 16434444, 16430794, 16427124, 16423436, 16419729, 16416003, 16412259, 16408495, 16404712, 16400911, 16397091, 16393251, 16389394, 16385517, 16381621, 16377707, 16373773, 16369821, 16365851, 16361861, 16357853, 16353826, 16349780, 16345715, 16341632, 16337530, 16333409, 16329270, 16325112, 16320935, 16316740, 16312526, 16308293, 16304042, 16299772, 16295483, 16291176, 16286850, 16282506, 16278143, 16273761, 16269361, 16264943, 16260505, 16256050, 16251576, 16247083, 16242572, 16238042, 16233494, 16228927, 16224342, 16219739, 16215117, 16210477, 16205818, 16201141, 16196445, 16191731, 16186999, 16182249, 16177480, 16172692, 16167887, 16163063, 16158221, 16153360, 16148482, 16143585, 16138669, 16133736, 16128784, 16123814, 16118826, 16113820, 16108795, 16103753, 16098692, 16093613, 16088516, 16083401, 16078267, 16073116, 16067947, 16062759, 16057553, 16052330, 16047088, 16041828, 16036551, 16031255, 16025941, 16020610, 16015260, 16009892, 16004507, 15999103, 15993682, 15988243, 15982786, 15977311, 15971818, 15966307, 15960779, 15955232, 15949668, 15944086, 15938487, 15932869, 15927234, 15921581, 15915910, 15910222, 15904516, 15898792, 15893051, 15887291, 15881515, 15875720, 15869908, 15864079, 15858231, 15852367, 15846484, 15840584, 15834667, 15828732, 15822780, 15816810, 15810822, 15804817, 15798795, 15792755, 15786698, 15780623, 15774531, 15768422, 15762295, 15756151, 15749990, 15743811, 15737615, 15731401, 15725171, 15718923, 15712658, 15706375, 15700076, 15693759, 15687425, 15681074, 15674705, 15668320, 15661917, 15655497, 15649061, 15642607, 15636136, 15629648, 15623143, 15616621, 15610081, 15603525, 15596952, 15590362, 15583755, 15577131, 15570490, 15563833, 15557158, 15550467, 15543758, 15537033, 15530291, 15523532, 15516757, 15509964, 15503155, 15496329, 15489487, 15482628, 15475752, 15468859, 15461950, 15455024, 15448081, 15441122, 15434146, 15427154, 15420145, 15413119, 15406077, 15399019, 15391944, 15384852, 15377744, 15370620, 15363479, 15356322, 15349148, 15341958, 15334751, 15327529, 15320290, 15313034, 15305763, 15298475, 15291170, 15283850, 15276513, 15269160, 15261791, 15254406, 15247005, 15239587, 15232153, 15224704, 15217238, 15209756, 15202258, 15194744, 15187214, 15179668, 15172106, 15164528, 15156934, 15149324, 15141698, 15134057, 15126399, 15118726, 15111037, 15103332, 15095611, 15087874, 15080122, 15072354, 15064570, 15056770, 15048955, 15041124, 15033278, 15025416, 15017538, 15009644, 15001735, 14993811, 14985871, 14977915, 14969944, 14961957, 14953955, 14945938, 14937905, 14929856, 14921793, 14913714, 14905619, 14897509, 14889384, 14881244, 14873088, 14864917, 14856731, 14848529, 14840313, 14832081, 14823834, 14815572, 14807294, 14799002, 14790695, 14782372, 14774035, 14765682, 14757315, 14748932, 14740534, 14732122, 14723695, 14715252, 14706795, 14698323, 14689836, 14681334, 14672818, 14664286, 14655740, 14647180, 14638604, 14630014, 14621409, 14612789, 14604155, 14595506, 14586842, 14578164, 14569472, 14560764, 14552043, 14543306, 14534556, 14525791, 14517011, 14508217, 14499408, 14490586, 14481748, 14472897, 14464031, 14455151, 14446257, 14437348, 14428425, 14419488, 14410537, 14401571, 14392592, 14383598, 14374590, 14365568, 14356532, 14347482, 14338418, 14329340, 14320248, 14311142, 14302022, 14292888, 14283740, 14274579, 14265403, 14256214, 14247011, 14237794, 14228563, 14219319, 14210061, 14200789, 14191504, 14182204, 14172892, 14163565, 14154225, 14144872, 14135505, 14126124, 14116730, 14107322, 14097901, 14088467, 14079019, 14069558, 14060083, 14050595, 14041094, 14031579, 14022051, 14012510, 14002956, 13993388, 13983807, 13974213, 13964606, 13954986, 13945353, 13935706, 13926047, 13916374, 13906689, 13896990, 13887279, 13877555, 13867817, 13858067, 13848304, 13838528, 13828739, 13818938, 13809124, 13799297, 13789457, 13779604, 13769739, 13759861, 13749971, 13740068, 13730152, 13720224, 13710283, 13700330, 13690364, 13680385, 13670395, 13660392, 13650376, 13640348, 13630308, 13620255, 13610190, 13600113, 13590023, 13579922, 13569808, 13559681, 13549543, 13539393, 13529230, 13519055, 13508868, 13498670, 13488459, 13478236, 13468001, 13457754, 13447496, 13437225, 13426943, 13416648, 13406342, 13396024, 13385694, 13375353, 13365000, 13354635, 13344258, 13333870, 13323470, 13313058, 13302635, 13292200, 13281754, 13271296, 13260827, 13250346, 13239854, 13229351, 13218836, 13208309, 13197772, 13187223, 13176662, 13166091, 13155508, 13144914, 13134309, 13123692, 13113065, 13102426, 13091777, 13081116, 13070444, 13059761, 13049067, 13038363, 13027647, 13016920, 13006183, 12995434, 12984675, 12973905, 12963124, 12952332, 12941530, 12930717, 12919893, 12909059, 12898214, 12887358, 12876492, 12865615, 12854728, 12843830, 12832921, 12822003, 12811073, 12800134, 12789184, 12778223, 12767253, 12756272, 12745280, 12734279, 12723267, 12712245, 12701213, 12690171, 12679118, 12668056, 12656983, 12645900, 12634808, 12623705, 12612593, 12601470, 12590338, 12579195, 12568043, 12556881, 12545709, 12534528, 12523336, 12512135, 12500924, 12489704, 12478474, 12467234, 12455985, 12444726, 12433457, 12422179, 12410892, 12399595, 12388288, 12376973, 12365647, 12354313, 12342969, 12331616, 12320253, 12308882, 12297501, 12286111, 12274711, 12263303, 12251885, 12240459, 12229023, 12217578, 12206124, 12194662, 12183190, 12171709, 12160220, 12148721, 12137214, 12125698, 12114173, 12102639, 12091097, 12079546, 12067986, 12056418, 12044841, 12033255, 12021661, 12010058, 11998447, 11986827, 11975199, 11963562, 11951917, 11940263, 11928601, 11916931, 11905253, 11893566, 11881871, 11870168, 11858456, 11846737, 11835009, 11823273, 11811529, 11799777, 11788017, 11776249, 11764473, 11752689, 11740897, 11729098, 11717290, 11705475, 11693651, 11681820, 11669982, 11658135, 11646281, 11634419, 11622550, 11610673, 11598788, 11586896, 11574996, 11563089, 11551174, 11539252, 11527322, 11515385, 11503441, 11491489, 11479530, 11467564, 11455591, 11443610, 11431622, 11419627, 11407625, 11395616, 11383599, 11371576, 11359546, 11347508, 11335464, 11323413, 11311354, 11299289, 11287217, 11275139, 11263053, 11250961, 11238862, 11226756, 11214644, 11202525, 11190399, 11178267, 11166128, 11153982, 11141830, 11129672, 11117507, 11105336, 11093158, 11080974, 11068784, 11056587, 11044384, 11032175, 11019960, 11007738, 10995511, 10983277, 10971037, 10958791, 10946538, 10934280, 10922016, 10909746, 10897470, 10885188, 10872900, 10860607, 10848307, 10836002, 10823691, 10811374, 10799052, 10786724, 10774390, 10762051, 10749706, 10737355, 10724999, 10712638, 10700271, 10687898, 10675520, 10663137, 10650749, 10638355, 10625956, 10613551, 10601141, 10588726, 10576306, 10563881, 10551451, 10539015, 10526575, 10514129, 10501679, 10489223, 10476763, 10464297, 10451827, 10439352, 10426872, 10414388, 10401898, 10389404, 10376905, 10364401, 10351893, 10339380, 10326863, 10314341, 10301814, 10289283, 10276747, 10264207, 10251663, 10239114, 10226561, 10214004, 10201442, 10188876, 10176306, 10163731, 10151153, 10138570, 10125983, 10113392, 10100797, 10088198, 10075595, 10062988, 10050377, 10037762, 10025143, 10012520, 9999894, 9987264, 9974630, 9961992, 9949351, 9936705, 9924057, 9911404, 9898748, 9886089, 9873426, 9860759, 9848089, 9835416, 9822739, 9810059, 9797375, 9784688, 9771998, 9759305, 9746608, 9733909, 9721206, 9708499, 9695790, 9683078, 9670363, 9657644, 9644923, 9632199, 9619471, 9606741, 9594008, 9581272, 9568534, 9555792, 9543048, 9530301, 9517552, 9504799, 9492045, 9479287, 9466527, 9453765, 9441000, 9428232, 9415462, 9402690, 9389915, 9377138, 9364358, 9351577, 9338793, 9326006, 9313218, 9300427, 9287634, 9274839, 9262042, 9249243, 9236442, 9223639, 9210834, 9198027, 9185218, 9172408, 9159595, 9146781, 9133965, 9121147, 9108327, 9095506, 9082683, 9069858, 9057032, 9044204, 9031374, 9018544, 9005711, 8992877, 8980042, 8967206, 8954368, 8941528, 8928688, 8915846, 8903003, 8890158, 8877313, 8864466, 8851618, 8838769, 8825919, 8813068, 8800216, 8787363, 8774510, 8761655, 8748799, 8735943, 8723085, 8710227, 8697368, 8684509, 8671648, 8658787, 8645926, 8633064, 8620201, 8607338, 8594474, 8581609, 8568745, 8555879, 8543014, 8530148, 8517282, 8504415, 8491548, 8478681, 8465814, 8452946, 8440079, 8427211, 8414343, 8401475, 8388607, 8375739, 8362871, 8350003, 8337135, 8324268, 8311400, 8298533, 8285666, 8272799, 8259932, 8247066, 8234200, 8221335, 8208469, 8195605, 8182740, 8169876, 8157013, 8144150, 8131288, 8118427, 8105566, 8092705, 8079846, 8066987, 8054129, 8041271, 8028415, 8015559, 8002704, 7989851, 7976998, 7964146, 7951295, 7938445, 7925596, 7912748, 7899901, 7887056, 7874211, 7861368, 7848526, 7835686, 7822846, 7810008, 7797172, 7784337, 7771503, 7758670, 7745840, 7733010, 7720182, 7707356, 7694531, 7681708, 7668887, 7656067, 7643249, 7630433, 7617619, 7604806, 7591996, 7579187, 7566380, 7553575, 7540772, 7527971, 7515172, 7502375, 7489580, 7476787, 7463996, 7451208, 7438421, 7425637, 7412856, 7400076, 7387299, 7374524, 7361752, 7348982, 7336214, 7323449, 7310687, 7297927, 7285169, 7272415, 7259662, 7246913, 7234166, 7221422, 7208680, 7195942, 7183206, 7170473, 7157743, 7145015, 7132291, 7119570, 7106851, 7094136, 7081424, 7068715, 7056008, 7043305, 7030606, 7017909, 7005216, 6992526, 6979839, 6967155, 6954475, 6941798, 6929125, 6916455, 6903788, 6891125, 6878466, 6865810, 6853157, 6840509, 6827863, 6815222, 6802584, 6789950, 6777320, 6764694, 6752071, 6739452, 6726837, 6714226, 6701619, 6689016, 6676417, 6663822, 6651231, 6638644, 6626061, 6613483, 6600908, 6588338, 6575772, 6563210, 6550653, 6538100, 6525551, 6513007, 6500467, 6487931, 6475400, 6462873, 6450351, 6437834, 6425321, 6412813, 6400309, 6387810, 6375316, 6362826, 6350342, 6337862, 6325387, 6312917, 6300451, 6287991, 6275535, 6263085, 6250639, 6238199, 6225763, 6213333, 6200908, 6188488, 6176073, 6163663, 6151258, 6138859, 6126465, 6114077, 6101694, 6089316, 6076943, 6064576, 6052215, 6039859, 6027508, 6015163, 6002824, 5990490, 5978162, 5965840, 5953523, 5941212, 5928907, 5916607, 5904314, 5892026, 5879744, 5867468, 5855198, 5842934, 5830676, 5818423, 5806177, 5793937, 5781703, 5769476, 5757254, 5745039, 5732830, 5720627, 5708430, 5696240, 5684056, 5671878, 5659707, 5647542, 5635384, 5623232, 5611086, 5598947, 5586815, 5574689, 5562570, 5550458, 5538352, 5526253, 5514161, 5502075, 5489997, 5477925, 5465860, 5453801, 5441750, 5429706, 5417668, 5405638, 5393615, 5381598, 5369589, 5357587, 5345592, 5333604, 5321623, 5309650, 5297684, 5285725, 5273773, 5261829, 5249892, 5237962, 5226040, 5214125, 5202218, 5190318, 5178426, 5166541, 5154664, 5142795, 5130933, 5119079, 5107232, 5095394, 5083563, 5071739, 5059924, 5048116, 5036317, 5024525, 5012741, 5000965, 4989197, 4977437, 4965685, 4953941, 4942205, 4930477, 4918758, 4907046, 4895343, 4883648, 4871961, 4860283, 4848613, 4836951, 4825297, 4813652, 4802015, 4790387, 4778767, 4767156, 4755553, 4743959, 4732373, 4720796, 4709228, 4697668, 4686117, 4674575, 4663041, 4651516, 4640000, 4628493, 4616994, 4605505, 4594024, 4582552, 4571090, 4559636, 4548191, 4536755, 4525329, 4513911, 4502503, 4491103, 4479713, 4468332, 4456961, 4445598, 4434245, 4422901, 4411567, 4400241, 4388926, 4377619, 4366322, 4355035, 4343757, 4332488, 4321229, 4309980, 4298740, 4287510, 4276290, 4265079, 4253878, 4242686, 4231505, 4220333, 4209171, 4198019, 4186876, 4175744, 4164621, 4153509, 4142406, 4131314, 4120231, 4109158, 4098096, 4087043, 4076001, 4064969, 4053947, 4042935, 4031934, 4020942, 4009961, 3998991, 3988030, 3977080, 3966141, 3955211, 3944293, 3933384, 3922486, 3911599, 3900722, 3889856, 3879000, 3868155, 3857321, 3846497, 3835684, 3824882, 3814090, 3803309, 3792539, 3781780, 3771031, 3760294, 3749567, 3738851, 3728147, 3717453, 3706770, 3696098, 3685437, 3674788, 3664149, 3653522, 3642905, 3632300, 3621706, 3611123, 3600552, 3589991, 3579442, 3568905, 3558378, 3547863, 3537360, 3526868, 3516387, 3505918, 3495460, 3485014, 3474579, 3464156, 3453744, 3443344, 3432956, 3422579, 3412214, 3401861, 3391520, 3381190, 3370872, 3360566, 3350271, 3339989, 3329718, 3319460, 3309213, 3298978, 3288755, 3278544, 3268346, 3258159, 3247984, 3237821, 3227671, 3217533, 3207406, 3197292, 3187191, 3177101, 3167024, 3156959, 3146906, 3136866, 3126838, 3116822, 3106819, 3096829, 3086850, 3076884, 3066931, 3056990, 3047062, 3037146, 3027243, 3017353, 3007475, 2997610, 2987757, 2977917, 2968090, 2958276, 2948475, 2938686, 2928910, 2919147, 2909397, 2899659, 2889935, 2880224, 2870525, 2860840, 2851167, 2841508, 2831861, 2822228, 2812608, 2803001, 2793407, 2783826, 2774258, 2764704, 2755163, 2745635, 2736120, 2726619, 2717131, 2707656, 2698195, 2688747, 2679313, 2669892, 2660484, 2651090, 2641709, 2632342, 2622989, 2613649, 2604322, 2595010, 2585710, 2576425, 2567153, 2557895, 2548651, 2539420, 2530203, 2521000, 2511811, 2502635, 2493474, 2484326, 2475192, 2466072, 2456966, 2447874, 2438796, 2429732, 2420682, 2411646, 2402624, 2393616, 2384622, 2375643, 2366677, 2357726, 2348789, 2339866, 2330957, 2322063, 2313183, 2304317, 2295466, 2286628, 2277806, 2268997, 2260203, 2251423, 2242658, 2233908, 2225171, 2216450, 2207742, 2199050, 2190372, 2181708, 2173059, 2164425, 2155805, 2147200, 2138610, 2130034, 2121474, 2112928, 2104396, 2095880, 2087378, 2078891, 2070419, 2061962, 2053519, 2045092, 2036680, 2028282, 2019899, 2011532, 2003179, 1994842, 1986519, 1978212, 1969920, 1961642, 1953380, 1945133, 1936901, 1928685, 1920483, 1912297, 1904126, 1895970, 1887830, 1879705, 1871595, 1863500, 1855421, 1847358, 1839309, 1831276, 1823259, 1815257, 1807270, 1799299, 1791343, 1783403, 1775479, 1767570, 1759676, 1751798, 1743936, 1736090, 1728259, 1720444, 1712644, 1704860, 1697092, 1689340, 1681603, 1673882, 1666177, 1658488, 1650815, 1643157, 1635516, 1627890, 1620280, 1612686, 1605108, 1597546, 1590000, 1582470, 1574956, 1567458, 1559976, 1552510, 1545061, 1537627, 1530209, 1522808, 1515423, 1508054, 1500701, 1493364, 1486044, 1478739, 1471451, 1464180, 1456924, 1449685, 1442463, 1435256, 1428066, 1420892, 1413735, 1406594, 1399470, 1392362, 1385270, 1378195, 1371137, 1364095, 1357069, 1350060, 1343068, 1336092, 1329133, 1322190, 1315264, 1308355, 1301462, 1294586, 1287727, 1280885, 1274059, 1267250, 1260457, 1253682, 1246923, 1240181, 1233456, 1226747, 1220056, 1213381, 1206724, 1200083, 1193459, 1186852, 1180262, 1173689, 1167133, 1160593, 1154071, 1147566, 1141078, 1134607, 1128153, 1121717, 1115297, 1108894, 1102509, 1096140, 1089789, 1083455, 1077138, 1070839, 1064556, 1058291, 1052043, 1045813, 1039599, 1033403, 1027224, 1021063, 1014919, 1008792, 1002683, 996591, 990516, 984459, 978419, 972397, 966392, 960404, 954434, 948482, 942547, 936630, 930730, 924847, 918983, 913135, 907306, 901494, 895699, 889923, 884163, 878422, 872698, 866992, 861304, 855633, 849980, 844345, 838727, 833128, 827546, 821982, 816435, 810907, 805396, 799903, 794428, 788971, 783532, 778111, 772707, 767322, 761954, 756604, 751273, 745959, 740663, 735386, 730126, 724884, 719661, 714455, 709267, 704098, 698947, 693813, 688698, 683601, 678522, 673461, 668419, 663394, 658388, 653400, 648430, 643478, 638545, 633629, 628732, 623854, 618993, 614151, 609327, 604522, 599734, 594965, 590215, 585483, 580769, 576073, 571396, 566737, 562097, 557475, 552872, 548287, 543720, 539172, 534642, 530131, 525638, 521164, 516709, 512271, 507853, 503453, 499071, 494708, 490364, 486038, 481731, 477442, 473172, 468921, 464688, 460474, 456279, 452102, 447944, 443805, 439684, 435582, 431499, 427434, 423388, 419361, 415353, 411363, 407393, 403441, 399507, 395593, 391697, 387820, 383963, 380123, 376303, 372502, 368719, 364955, 361211, 357485, 353778, 350090, 346420, 342770, 339139, 335526, 331933, 328358, 324803, 321266, 317749, 314250, 310770, 307310, 303868, 300446, 297042, 293658, 290292, 286946, 283619, 280311, 277021, 273751, 270500, 267269, 264056, 260862, 257688, 254532, 251396, 248279, 245181, 242102, 239043, 236002, 232981, 229979, 226996, 224032, 221088, 218163, 215257, 212370, 209503, 206654, 203825, 201016, 198225, 195454, 192702, 189969, 187256, 184562, 181887, 179232, 176595, 173979, 171381, 168803, 166244, 163705, 161185, 158684, 156203, 153741, 151298, 148875, 146471, 144086, 141721, 139376, 137050, 134743, 132455, 130187, 127939, 125710, 123500, 121310, 119139, 116988, 114856, 112744, 110651, 108577, 106523, 104489, 102474, 100479, 98503, 96546, 94609, 92692, 90794, 88916, 87057, 85218, 83398, 81598, 79817, 78056, 76314, 74592, 72890, 71207, 69544, 67900, 66276, 64671, 63086, 61521, 59975, 58449, 56942, 55455, 53988, 52540, 51112, 49704, 48315, 46945, 45596, 44266, 42955, 41665, 40393, 39142, 37910, 36698, 35505, 34333, 33179, 32046, 30932, 29838, 28763, 27708, 26673, 25658, 24662, 23686, 22729, 21793, 20875, 19978, 19100, 18242, 17404, 16585, 15786, 15007, 14248, 13508, 12788, 12087, 11407, 10746, 10104, 9483, 8881, 8299, 7737, 7194, 6671, 6168, 5684, 5220, 4776, 4352, 3948, 3563, 3198, 2852, 2526, 2221, 1934, 1668, 1421, 1194, 987, 799, 632, 484, 355, 247, 158, 89, 39, 10, 0, 10, 39, 89, 158, 247, 355, 484, 632, 799, 987, 1194, 1421, 1668, 1934, 2221, 2526, 2852, 3198, 3563, 3948, 4352, 4776, 5220, 5684, 6168, 6671, 7194, 7737, 8299, 8881, 9483, 10104, 10746, 11407, 12087, 12788, 13508, 14248, 15007, 15786, 16585, 17404, 18242, 19100, 19978, 20875, 21793, 22729, 23686, 24662, 25658, 26673, 27708, 28763, 29838, 30932, 32046, 33179, 34333, 35505, 36698, 37910, 39142, 40393, 41665, 42955, 44266, 45596, 46945, 48315, 49704, 51112, 52540, 53988, 55455, 56942, 58449, 59975, 61521, 63086, 64671, 66276, 67900, 69544, 71207, 72890, 74592, 76314, 78056, 79817, 81598, 83398, 85218, 87057, 88916, 90794, 92692, 94609, 96546, 98503, 100479, 102474, 104489, 106523, 108577, 110651, 112744, 114856, 116988, 119139, 121310, 123500, 125710, 127939, 130187, 132455, 134743, 137050, 139376, 141721, 144086, 146471, 148875, 151298, 153741, 156203, 158684, 161185, 163705, 166244, 168803, 171381, 173979, 176595, 179232, 181887, 184562, 187256, 189969, 192702, 195454, 198225, 201016, 203825, 206654, 209503, 212370, 215257, 218163, 221088, 224032, 226996, 229979, 232981, 236002, 239043, 242102, 245181, 248279, 251396, 254532, 257688, 260862, 264056, 267269, 270500, 273751, 277021, 280311, 283619, 286946, 290292, 293658, 297042, 300446, 303868, 307310, 310770, 314250, 317749, 321266, 324803, 328358, 331933, 335526, 339139, 342770, 346420, 350090, 353778, 357485, 361211, 364955, 368719, 372502, 376303, 380123, 383963, 387820, 391697, 395593, 399507, 403441, 407393, 411363, 415353, 419361, 423388, 427434, 431499, 435582, 439684, 443805, 447944, 452102, 456279, 460474, 464688, 468921, 473172, 477442, 481731, 486038, 490364, 494708, 499071, 503453, 507853, 512271, 516709, 521164, 525638, 530131, 534642, 539172, 543720, 548287, 552872, 557475, 562097, 566737, 571396, 576073, 580769, 585483, 590215, 594965, 599734, 604522, 609327, 614151, 618993, 623854, 628732, 633629, 638545, 643478, 648430, 653400, 658388, 663394, 668419, 673461, 678522, 683601, 688698, 693813, 698947, 704098, 709267, 714455, 719661, 724884, 730126, 735386, 740663, 745959, 751273, 756604, 761954, 767322, 772707, 778111, 783532, 788971, 794428, 799903, 805396, 810907, 816435, 821982, 827546, 833128, 838727, 844345, 849980, 855633, 861304, 866992, 872698, 878422, 884163, 889923, 895699, 901494, 907306, 913135, 918983, 924847, 930730, 936630, 942547, 948482, 954434, 960404, 966392, 972397, 978419, 984459, 990516, 996591, 1002683, 1008792, 1014919, 1021063, 1027224, 1033403, 1039599, 1045813, 1052043, 1058291, 1064556, 1070839, 1077138, 1083455, 1089789, 1096140, 1102509, 1108894, 1115297, 1121717, 1128153, 1134607, 1141078, 1147566, 1154071, 1160593, 1167133, 1173689, 1180262, 1186852, 1193459, 1200083, 1206724, 1213381, 1220056, 1226747, 1233456, 1240181, 1246923, 1253682, 1260457, 1267250, 1274059, 1280885, 1287727, 1294586, 1301462, 1308355, 1315264, 1322190, 1329133, 1336092, 1343068, 1350060, 1357069, 1364095, 1371137, 1378195, 1385270, 1392362, 1399470, 1406594, 1413735, 1420892, 1428066, 1435256, 1442463, 1449685, 1456924, 1464180, 1471451, 1478739, 1486044, 1493364, 1500701, 1508054, 1515423, 1522808, 1530209, 1537627, 1545061, 1552510, 1559976, 1567458, 1574956, 1582470, 1590000, 1597546, 1605108, 1612686, 1620280, 1627890, 1635516, 1643157, 1650815, 1658488, 1666177, 1673882, 1681603, 1689340, 1697092, 1704860, 1712644, 1720444, 1728259, 1736090, 1743936, 1751798, 1759676, 1767570, 1775479, 1783403, 1791343, 1799299, 1807270, 1815257, 1823259, 1831276, 1839309, 1847358, 1855421, 1863500, 1871595, 1879705, 1887830, 1895970, 1904126, 1912297, 1920483, 1928685, 1936901, 1945133, 1953380, 1961642, 1969920, 1978212, 1986519, 1994842, 2003179, 2011532, 2019899, 2028282, 2036680, 2045092, 2053519, 2061962, 2070419, 2078891, 2087378, 2095880, 2104396, 2112928, 2121474, 2130034, 2138610, 2147200, 2155805, 2164425, 2173059, 2181708, 2190372, 2199050, 2207742, 2216450, 2225171, 2233908, 2242658, 2251423, 2260203, 2268997, 2277806, 2286628, 2295466, 2304317, 2313183, 2322063, 2330957, 2339866, 2348789, 2357726, 2366677, 2375643, 2384622, 2393616, 2402624, 2411646, 2420682, 2429732, 2438796, 2447874, 2456966, 2466072, 2475192, 2484326, 2493474, 2502635, 2511811, 2521000, 2530203, 2539420, 2548651, 2557895, 2567153, 2576425, 2585710, 2595010, 2604322, 2613649, 2622989, 2632342, 2641709, 2651090, 2660484, 2669892, 2679313, 2688747, 2698195, 2707656, 2717131, 2726619, 2736120, 2745635, 2755163, 2764704, 2774258, 2783826, 2793407, 2803001, 2812608, 2822228, 2831861, 2841508, 2851167, 2860840, 2870525, 2880224, 2889935, 2899659, 2909397, 2919147, 2928910, 2938686, 2948475, 2958276, 2968090, 2977917, 2987757, 2997610, 3007475, 3017353, 3027243, 3037146, 3047062, 3056990, 3066931, 3076884, 3086850, 3096829, 3106819, 3116822, 3126838, 3136866, 3146906, 3156959, 3167024, 3177101, 3187191, 3197292, 3207406, 3217533, 3227671, 3237821, 3247984, 3258159, 3268346, 3278544, 3288755, 3298978, 3309213, 3319460, 3329718, 3339989, 3350271, 3360566, 3370872, 3381190, 3391520, 3401861, 3412214, 3422579, 3432956, 3443344, 3453744, 3464156, 3474579, 3485014, 3495460, 3505918, 3516387, 3526868, 3537360, 3547863, 3558378, 3568905, 3579442, 3589991, 3600552, 3611123, 3621706, 3632300, 3642905, 3653522, 3664149, 3674788, 3685437, 3696098, 3706770, 3717453, 3728147, 3738851, 3749567, 3760294, 3771031, 3781780, 3792539, 3803309, 3814090, 3824882, 3835684, 3846497, 3857321, 3868155, 3879000, 3889856, 3900722, 3911599, 3922486, 3933384, 3944293, 3955211, 3966141, 3977080, 3988030, 3998991, 4009961, 4020942, 4031934, 4042935, 4053947, 4064969, 4076001, 4087043, 4098096, 4109158, 4120231, 4131314, 4142406, 4153509, 4164621, 4175744, 4186876, 4198019, 4209171, 4220333, 4231505, 4242686, 4253878, 4265079, 4276290, 4287510, 4298740, 4309980, 4321229, 4332488, 4343757, 4355035, 4366322, 4377619, 4388926, 4400241, 4411567, 4422901, 4434245, 4445598, 4456961, 4468332, 4479713, 4491103, 4502503, 4513911, 4525329, 4536755, 4548191, 4559636, 4571090, 4582552, 4594024, 4605505, 4616994, 4628493, 4640000, 4651516, 4663041, 4674575, 4686117, 4697668, 4709228, 4720796, 4732373, 4743959, 4755553, 4767156, 4778767, 4790387, 4802015, 4813652, 4825297, 4836951, 4848613, 4860283, 4871961, 4883648, 4895343, 4907046, 4918758, 4930477, 4942205, 4953941, 4965685, 4977437, 4989197, 5000965, 5012741, 5024525, 5036317, 5048116, 5059924, 5071739, 5083563, 5095394, 5107232, 5119079, 5130933, 5142795, 5154664, 5166541, 5178426, 5190318, 5202218, 5214125, 5226040, 5237962, 5249892, 5261829, 5273773, 5285725, 5297684, 5309650, 5321623, 5333604, 5345592, 5357587, 5369589, 5381598, 5393615, 5405638, 5417668, 5429706, 5441750, 5453801, 5465860, 5477925, 5489997, 5502075, 5514161, 5526253, 5538352, 5550458, 5562570, 5574689, 5586815, 5598947, 5611086, 5623232, 5635384, 5647542, 5659707, 5671878, 5684056, 5696240, 5708430, 5720627, 5732830, 5745039, 5757254, 5769476, 5781703, 5793937, 5806177, 5818423, 5830676, 5842934, 5855198, 5867468, 5879744, 5892026, 5904314, 5916607, 5928907, 5941212, 5953523, 5965840, 5978162, 5990490, 6002824, 6015163, 6027508, 6039859, 6052215, 6064576, 6076943, 6089316, 6101694, 6114077, 6126465, 6138859, 6151258, 6163663, 6176073, 6188488, 6200908, 6213333, 6225763, 6238199, 6250639, 6263085, 6275535, 6287991, 6300451, 6312917, 6325387, 6337862, 6350342, 6362826, 6375316, 6387810, 6400309, 6412813, 6425321, 6437834, 6450351, 6462873, 6475400, 6487931, 6500467, 6513007, 6525551, 6538100, 6550653, 6563210, 6575772, 6588338, 6600908, 6613483, 6626061, 6638644, 6651231, 6663822, 6676417, 6689016, 6701619, 6714226, 6726837, 6739452, 6752071, 6764694, 6777320, 6789950, 6802584, 6815222, 6827863, 6840509, 6853157, 6865810, 6878466, 6891125, 6903788, 6916455, 6929125, 6941798, 6954475, 6967155, 6979839, 6992526, 7005216, 7017909, 7030606, 7043305, 7056008, 7068715, 7081424, 7094136, 7106851, 7119570, 7132291, 7145015, 7157743, 7170473, 7183206, 7195942, 7208680, 7221422, 7234166, 7246913, 7259662, 7272415, 7285169, 7297927, 7310687, 7323449, 7336214, 7348982, 7361752, 7374524, 7387299, 7400076, 7412856, 7425637, 7438421, 7451208, 7463996, 7476787, 7489580, 7502375, 7515172, 7527971, 7540772, 7553575, 7566380, 7579187, 7591996, 7604806, 7617619, 7630433, 7643249, 7656067, 7668887, 7681708, 7694531, 7707356, 7720182, 7733010, 7745840, 7758670, 7771503, 7784337, 7797172, 7810008, 7822846, 7835686, 7848526, 7861368, 7874211, 7887056, 7899901, 7912748, 7925596, 7938445, 7951295, 7964146, 7976998, 7989851, 8002704, 8015559, 8028415, 8041271, 8054129, 8066987, 8079846, 8092705, 8105566, 8118427, 8131288, 8144150, 8157013, 8169876, 8182740, 8195605, 8208469, 8221335, 8234200, 8247066, 8259932, 8272799, 8285666, 8298533, 8311400, 8324268, 8337135, 8350003, 8362871, 8375739, 8388607, 8401475, 8414343, 8427211, 8440079, 8452946, 8465814, 8478681, 8491548, 8504415, 8517282, 8530148, 8543014, 8555879, 8568745, 8581609, 8594474, 8607338, 8620201, 8633064, 8645926, 8658787, 8671648, 8684509, 8697368, 8710227, 8723085, 8735943, 8748799, 8761655, 8774510, 8787363, 8800216, 8813068, 8825919, 8838769, 8851618, 8864466, 8877313, 8890158, 8903003, 8915846, 8928688, 8941528, 8954368, 8967206, 8980042, 8992877, 9005711, 9018544, 9031374, 9044204, 9057032, 9069858, 9082683, 9095506, 9108327, 9121147, 9133965, 9146781, 9159595, 9172408, 9185218, 9198027, 9210834, 9223639, 9236442, 9249243, 9262042, 9274839, 9287634, 9300427, 9313218, 9326006, 9338793, 9351577, 9364358, 9377138, 9389915, 9402690, 9415462, 9428232, 9441000, 9453765, 9466527, 9479287, 9492045, 9504799, 9517552, 9530301, 9543048, 9555792, 9568534, 9581272, 9594008, 9606741, 9619471, 9632199, 9644923, 9657644, 9670363, 9683078, 9695790, 9708499, 9721206, 9733909, 9746608, 9759305, 9771998, 9784688, 9797375, 9810059, 9822739, 9835416, 9848089, 9860759, 9873426, 9886089, 9898748, 9911404, 9924057, 9936705, 9949351, 9961992, 9974630, 9987264, 9999894, 10012520, 10025143, 10037762, 10050377, 10062988, 10075595, 10088198, 10100797, 10113392, 10125983, 10138570, 10151153, 10163731, 10176306, 10188876, 10201442, 10214004, 10226561, 10239114, 10251663, 10264207, 10276747, 10289283, 10301814, 10314341, 10326863, 10339380, 10351893, 10364401, 10376905, 10389404, 10401898, 10414388, 10426872, 10439352, 10451827, 10464297, 10476763, 10489223, 10501679, 10514129, 10526575, 10539015, 10551451, 10563881, 10576306, 10588726, 10601141, 10613551, 10625956, 10638355, 10650749, 10663137, 10675520, 10687898, 10700271, 10712638, 10724999, 10737355, 10749706, 10762051, 10774390, 10786724, 10799052, 10811374, 10823691, 10836002, 10848307, 10860607, 10872900, 10885188, 10897470, 10909746, 10922016, 10934280, 10946538, 10958791, 10971037, 10983277, 10995511, 11007738, 11019960, 11032175, 11044384, 11056587, 11068784, 11080974, 11093158, 11105336, 11117507, 11129672, 11141830, 11153982, 11166128, 11178267, 11190399, 11202525, 11214644, 11226756, 11238862, 11250961, 11263053, 11275139, 11287217, 11299289, 11311354, 11323413, 11335464, 11347508, 11359546, 11371576, 11383599, 11395616, 11407625, 11419627, 11431622, 11443610, 11455591, 11467564, 11479530, 11491489, 11503441, 11515385, 11527322, 11539252, 11551174, 11563089, 11574996, 11586896, 11598788, 11610673, 11622550, 11634419, 11646281, 11658135, 11669982, 11681820, 11693651, 11705475, 11717290, 11729098, 11740897, 11752689, 11764473, 11776249, 11788017, 11799777, 11811529, 11823273, 11835009, 11846737, 11858456, 11870168, 11881871, 11893566, 11905253, 11916931, 11928601, 11940263, 11951917, 11963562, 11975199, 11986827, 11998447, 12010058, 12021661, 12033255, 12044841, 12056418, 12067986, 12079546, 12091097, 12102639, 12114173, 12125698, 12137214, 12148721, 12160220, 12171709, 12183190, 12194662, 12206124, 12217578, 12229023, 12240459, 12251885, 12263303, 12274711, 12286111, 12297501, 12308882, 12320253, 12331616, 12342969, 12354313, 12365647, 12376973, 12388288, 12399595, 12410892, 12422179, 12433457, 12444726, 12455985, 12467234, 12478474, 12489704, 12500924, 12512135, 12523336, 12534528, 12545709, 12556881, 12568043, 12579195, 12590338, 12601470, 12612593, 12623705, 12634808, 12645900, 12656983, 12668056, 12679118, 12690171, 12701213, 12712245, 12723267, 12734279, 12745280, 12756272, 12767253, 12778223, 12789184, 12800134, 12811073, 12822003, 12832921, 12843830, 12854728, 12865615, 12876492, 12887358, 12898214, 12909059, 12919893, 12930717, 12941530, 12952332, 12963124, 12973905, 12984675, 12995434, 13006183, 13016920, 13027647, 13038363, 13049067, 13059761, 13070444, 13081116, 13091777, 13102426, 13113065, 13123692, 13134309, 13144914, 13155508, 13166091, 13176662, 13187223, 13197772, 13208309, 13218836, 13229351, 13239854, 13250346, 13260827, 13271296, 13281754, 13292200, 13302635, 13313058, 13323470, 13333870, 13344258, 13354635, 13365000, 13375353, 13385694, 13396024, 13406342, 13416648, 13426943, 13437225, 13447496, 13457754, 13468001, 13478236, 13488459, 13498670, 13508868, 13519055, 13529230, 13539393, 13549543, 13559681, 13569808, 13579922, 13590023, 13600113, 13610190, 13620255, 13630308, 13640348, 13650376, 13660392, 13670395, 13680385, 13690364, 13700330, 13710283, 13720224, 13730152, 13740068, 13749971, 13759861, 13769739, 13779604, 13789457, 13799297, 13809124, 13818938, 13828739, 13838528, 13848304, 13858067, 13867817, 13877555, 13887279, 13896990, 13906689, 13916374, 13926047, 13935706, 13945353, 13954986, 13964606, 13974213, 13983807, 13993388, 14002956, 14012510, 14022051, 14031579, 14041094, 14050595, 14060083, 14069558, 14079019, 14088467, 14097901, 14107322, 14116730, 14126124, 14135505, 14144872, 14154225, 14163565, 14172892, 14182204, 14191504, 14200789, 14210061, 14219319, 14228563, 14237794, 14247011, 14256214, 14265403, 14274579, 14283740, 14292888, 14302022, 14311142, 14320248, 14329340, 14338418, 14347482, 14356532, 14365568, 14374590, 14383598, 14392592, 14401571, 14410537, 14419488, 14428425, 14437348, 14446257, 14455151, 14464031, 14472897, 14481748, 14490586, 14499408, 14508217, 14517011, 14525791, 14534556, 14543306, 14552043, 14560764, 14569472, 14578164, 14586842, 14595506, 14604155, 14612789, 14621409, 14630014, 14638604, 14647180, 14655740, 14664286, 14672818, 14681334, 14689836, 14698323, 14706795, 14715252, 14723695, 14732122, 14740534, 14748932, 14757315, 14765682, 14774035, 14782372, 14790695, 14799002, 14807294, 14815572, 14823834, 14832081, 14840313, 14848529, 14856731, 14864917, 14873088, 14881244, 14889384, 14897509, 14905619, 14913714, 14921793, 14929856, 14937905, 14945938, 14953955, 14961957, 14969944, 14977915, 14985871, 14993811, 15001735, 15009644, 15017538, 15025416, 15033278, 15041124, 15048955, 15056770, 15064570, 15072354, 15080122, 15087874, 15095611, 15103332, 15111037, 15118726, 15126399, 15134057, 15141698, 15149324, 15156934, 15164528, 15172106, 15179668, 15187214, 15194744, 15202258, 15209756, 15217238, 15224704, 15232153, 15239587, 15247005, 15254406, 15261791, 15269160, 15276513, 15283850, 15291170, 15298475, 15305763, 15313034, 15320290, 15327529, 15334751, 15341958, 15349148, 15356322, 15363479, 15370620, 15377744, 15384852, 15391944, 15399019, 15406077, 15413119, 15420145, 15427154, 15434146, 15441122, 15448081, 15455024, 15461950, 15468859, 15475752, 15482628, 15489487, 15496329, 15503155, 15509964, 15516757, 15523532, 15530291, 15537033, 15543758, 15550467, 15557158, 15563833, 15570490, 15577131, 15583755, 15590362, 15596952, 15603525, 15610081, 15616621, 15623143, 15629648, 15636136, 15642607,15649061, 15655497, 15661917, 15668320, 15674705, 15681074, 15687425, 15693759, 15700076, 15706375, 15712658, 15718923, 15725171, 15731401, 15737615, 15743811, 15749990, 15756151, 15762295, 15768422, 15774531, 15780623, 15786698, 15792755, 15798795, 15804817, 15810822, 15816810, 15822780, 15828732, 15834667, 15840584, 15846484, 15852367, 15858231, 15864079, 15869908, 15875720, 15881515, 15887291, 15893051, 15898792, 15904516, 15910222, 15915910, 15921581, 15927234, 15932869, 15938487, 15944086, 15949668, 15955232, 15960779, 15966307, 15971818, 15977311, 15982786, 15988243, 15993682, 15999103, 16004507, 16009892, 16015260, 16020610, 16025941, 16031255, 16036551, 16041828, 16047088, 16052330, 16057553, 16062759, 16067947, 16073116, 16078267, 16083401, 16088516, 16093613, 16098692, 16103753, 16108795, 16113820, 16118826, 16123814, 16128784, 16133736, 16138669, 16143585, 16148482, 16153360, 16158221, 16163063, 16167887, 16172692, 16177480, 16182249, 16186999, 16191731, 16196445, 16201141, 16205818, 16210477, 16215117, 16219739, 16224342, 16228927, 16233494, 16238042, 16242572, 16247083, 16251576, 16256050, 16260505, 16264943, 16269361, 16273761, 16278143, 16282506, 16286850, 16291176, 16295483, 16299772, 16304042, 16308293, 16312526, 16316740, 16320935, 16325112, 16329270, 16333409, 16337530, 16341632, 16345715, 16349780, 16353826, 16357853, 16361861, 16365851, 16369821, 16373773, 16377707, 16381621, 16385517, 16389394, 16393251, 16397091, 16400911, 16404712, 16408495, 16412259, 16416003, 16419729, 16423436, 16427124, 16430794, 16434444, 16438075, 16441688, 16445281, 16448856, 16452411, 16455948, 16459465, 16462964, 16466444, 16469904, 16473346, 16476768, 16480172, 16483556, 16486922, 16490268, 16493595, 16496903, 16500193, 16503463, 16506714, 16509945, 16513158, 16516352, 16519526, 16522682, 16525818, 16528935, 16532033, 16535112, 16538171, 16541212, 16544233, 16547235, 16550218, 16553182, 16556126, 16559051, 16561957, 16564844, 16567711, 16570560, 16573389, 16576198, 16578989, 16581760, 16584512, 16587245, 16589958, 16592652, 16595327, 16597982, 16600619, 16603235, 16605833, 16608411, 16610970, 16613509, 16616029, 16618530, 16621011, 16623473, 16625916, 16628339, 16630743, 16633128, 16635493, 16637838, 16640164, 16642471, 16644759, 16647027, 16649275, 16651504, 16653714, 16655904, 16658075, 16660226, 16662358, 16664470, 16666563, 16668637, 16670691, 16672725, 16674740, 16676735, 16678711, 16680668, 16682605, 16684522, 16686420, 16688298, 16690157, 16691996, 16693816, 16695616, 16697397, 16699158, 16700900, 16702622, 16704324, 16706007, 16707670, 16709314, 16710938, 16712543, 16714128, 16715693, 16717239, 16718765, 16720272, 16721759, 16723226, 16724674, 16726102, 16727510, 16728899, 16730269, 16731618, 16732948, 16734259, 16735549, 16736821, 16738072, 16739304, 16740516, 16741709, 16742881, 16744035, 16745168, 16746282, 16747376, 16748451, 16749506, 16750541, 16751556, 16752552, 16753528, 16754485, 16755421, 16756339, 16757236, 16758114, 16758972, 16759810, 16760629, 16761428, 16762207, 16762966, 16763706, 16764426, 16765127, 16765807, 16766468, 16767110, 16767731, 16768333, 16768915, 16769477, 16770020, 16770543, 16771046, 16771530, 16771994, 16772438, 16772862, 16773266, 16773651, 16774016, 16774362, 16774688, 16774993, 16775280, 16775546, 16775793, 16776020, 16776227, 16776415, 16776582, 16776730, 16776859, 16776967, 16777056, 16777125, 16777175, 16777204};
//global variables  

  //Current note being printed
  volatile char currentnote;
  volatile char currentsharp;

  volatile uint8_t maxOct = 8;


  volatile uint32_t pressedKeysMin = 0; // 12 bits for first pos 12 bits for second pos, 00000000
  volatile uint32_t pressedKeysMaj = 0; // 12 bits for third pos, 0000
  SemaphoreHandle_t pressedKeysArrayMutex;

  //Keyboard connection values
  volatile uint8_t west_detect;
  volatile uint8_t east_detect;
  
  //Needed to know the position of the keytboard in the chain
  volatile uint8_t pos = 0;

  // Role of keyboard  in chain
  volatile bool receiver = false;
  volatile bool sender = false;
  volatile bool singleton = true;

  //Needed for communication between keyboards
  uint8_t RX_Message[8]={0};
  SemaphoreHandle_t CAN_TX_Semaphore;
  QueueHandle_t msgInQ;
  QueueHandle_t msgOutQ;
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;

  //Sender variables
  volatile uint8_t octave_s;
  volatile uint8_t volume_s;
  volatile uint8_t wave_s;
  volatile int32_t vout_s = 0;
  volatile uint32_t maj_s = 0;
  volatile uint32_t min_s = 0;
  volatile uint8_t vibrato_s = 1; // Ints from [0, 20]
  volatile uint8_t tremolo_s = 1; // Ints from [0, 20]


  //Receiver variables
  volatile uint8_t volume_r = 4;
  volatile uint8_t octave_r = 4;
  volatile uint8_t wave_r = 0;
  volatile int32_t vout_r = 0;
  volatile uint8_t vibrato_r = 1; // Ints from [0, 20]
  volatile uint8_t tremolo_r = 1; // Ints from [0, 20]


  volatile uint8_t keyArray[7];
  SemaphoreHandle_t keyArrayMutex;

//Pin definitions
  //Row select and enable
  const int RA0_PIN = D3;
  const int RA1_PIN = D6;
  const int RA2_PIN = D12;
  const int REN_PIN = A5;

  //Matrix input and output
  const int C0_PIN = A2;
  const int C1_PIN = D9;
  const int C2_PIN = A6;
  const int C3_PIN = D1;
  const int OUT_PIN = D11;

  //Audio analogue out
  const int OUTL_PIN = A4;
  const int OUTR_PIN = A3;

  //Joystick analogue in
  const int JOYY_PIN = A0;
  const int JOYX_PIN = A1;

  //Output multiplexer bits
  const int DEN_BIT = 3;
  const int DRST_BIT = 4;
  const int HKOW_BIT = 5;
  const int HKOE_BIT = 6;


//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

uint8_t readCols(){
  uint8_t c0 = digitalRead(C0_PIN);
  uint8_t c1 = digitalRead(C1_PIN);
  uint8_t c2 = digitalRead(C2_PIN);
  uint8_t c3 = digitalRead(C3_PIN);
  uint8_t result = c0 | (c1 << 1) | (c2 << 2) | (c3 << 3);
  return result;
}

void setRow(uint8_t rowIdx){
  digitalWrite(REN_PIN,LOW);
  digitalWrite(RA0_PIN, rowIdx & 0x01);
  digitalWrite(RA1_PIN, rowIdx & 0x02);
  digitalWrite(RA2_PIN, rowIdx & 0x04);
  digitalWrite(REN_PIN,HIGH);
}

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}

//LFO
//LFO
volatile uint32_t t_vib_s[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
volatile uint32_t t_vib_r[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
volatile uint32_t t_trem_s[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
volatile uint32_t t_trem_r[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

uint32_t LFOVibrato(uint8_t i) {
  if (receiver){
    uint32_t time = 0;
    uint32_t time = t_vib_r[i]++;
    uint32_t index = ((time * 4096 * vibrato_r) / 22000) % 4096;
    return LFOTable[index];
  }
  if (sender) {
    static uint32_t scale_vib[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    uint32_t index = ((t_vib_s[i] * 4096 * vibrato_s) / 22000) % 4096;
    scale_vib[i] = LFOTable[index];

    t_vib_s++;
    return scale_vib[i];
  } 
}

uint32_t LFOTremolo(uint8_t i) {
  if (receiver){
    uint32_t time = 0;
    uint32_t time = t_trem_r[i]++;
    uint32_t index = ((time * 4096 * tremolo_r) / 22000) % 4096;
    return LFOTable[index];
  }
  if (sender) {
    static uint32_t scale_trem[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    uint32_t index = ((t_trem_s[i] * 4096 * tremolo_s) / 22000) % 4096;
    scale_trem[i] = LFOTable[index];

    t_trem_s++;
    return scale_trem[i];
  } 
}


void auto_detect(bool west, bool east){
  if(!west){ //most west module
    pos = 0;
    receiver = true;
    sender = false;
    if(east){ // >=2 modules
      singleton = false;
      uint8_t TX_Message[8] = {'H',pos,octave_r,volume_r,wave_r,0,0,0}; //Handshake, position, 0, 0, 0, 0, 0, 0
      xQueueSend(msgOutQ, TX_Message, 0);
    }
    else{
      maxOct=8;
      singleton = true;
    }
  }
  else{
    sender = true; //either east or middle 2/3 modules
    receiver = false;
    singleton = false;
  }
}

void sampleISR() {
  #ifdef TEST_SAMPLEISR
  static uint32_t readCtr = 0;
    if (readCtr == SAMPLE_BUFFER_SIZE) {
      readCtr = 0;
      writeBuffer1 = !writeBuffer1;
      xSemaphoreGiveFromISR(sampleBufferMutex, NULL);
      }
	
    if (writeBuffer1)
      analogWrite(OUTR_PIN, sampleBuffer0[readCtr++]);
    else
      analogWrite(OUTR_PIN, sampleBuffer1[readCtr++]);
  #else
    static uint32_t readCtr = 0;
    if (readCtr == SAMPLE_BUFFER_SIZE) {
      readCtr = 0;
      writeBuffer1 = !writeBuffer1;
      xSemaphoreGiveFromISR(sampleBufferMutex, NULL);
      }
	
    if (writeBuffer1)
      analogWrite(OUTR_PIN, sampleBuffer0[readCtr++]);
    else
      analogWrite(OUTR_PIN, sampleBuffer1[readCtr++]);
  #endif

}

void ISRTask(void *pvParameters) {
  #ifndef TEST_ISRTASK
  uint64_t pressedKeysArray = 0;
  uint8_t baseoct;
  uint8_t vol;
  uint8_t wave;
  while (1) {
    xSemaphoreTake(sampleBufferMutex, portMAX_DELAY);
      for (uint32_t writeCtr = 0; writeCtr < SAMPLE_BUFFER_SIZE; writeCtr++) {
        if(receiver){
          pressedKeysArray = ((((uint64_t)pressedKeysMaj) << 24) | pressedKeysMin);
          baseoct = octave_r - 4;
          vol = volume_r;
          wave = wave_r;
        }
        else if(sender){
          pressedKeysArray = ((uint64_t)min_s) << 24 | maj_s;
          baseoct = octave_s - pos - 4;
          vol = volume_s;
          wave = wave_s;
        }
          static uint32_t phaseAcc[36] = {0};
          static int increase[36] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
          int32_t polyphony_vout = 0;
          switch (wave){
              case 0 :  //Sawtooth
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  uint64_t real_step = (((uint64_t)step * (uint64_t)LFOVibrato(i)) >> 24);
                  
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    int32_t tmp_Vout = ((phaseAcc >> 24));
                    int32_t Vout = ((LFOTremolo(i) * tmp_Vout) >> 24) - 128;
                    polyphony_vout += Vout;
                  }
                }
                break;
              case 1 : //Triangle
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  uint64_t real_step = (((uint64_t)step * (uint64_t)LFOVibrato(i)) >> 24);

                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    if (phaseAcc[i] < 2147483648) {
                        int32_t tmp_Vout = ((phaseAcc[i] << 1) >> 24) - 128;
                        int32_t Vout = ((LFOTremolo(i) * tmp_Vout) >> 24) - 128;
                        polyphony_vout += Vout;
                    } else {
                        uint64_t tmp = (-(phaseAcc[i] << 1)) + (8589934591);
                        int32_t tmp_Vout = ((tmp >> 24) - 128) << 32;
                        int32_t Vout = ((LFOTremolo(i) * tmp_Vout) >> 24) - 128;
                        polyphony_vout += Vout;
                    }
                  }
                }
                break;
              case 2 : //Square
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  uint64_t real_step = (((uint64_t)step * (uint64_t)LFOVibrato(i)) >> 24);

                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    if (phaseAcc[i] < 2147483648) {
                        int32_t tmp_vout = 255;
                        int32_t Vout = ((LFOTremolo(i) * tmp_vout) >> 24) - 128;
                        polyphony_vout += Vout;
                    } else {
                        int32_t tmp_vout = 0;
                        int32_t Vout = ((LFOTremolo(i) * tmp_vout) >> 24) - 128;
                        polyphony_vout += Vout;
                    }
                  }
                }
                break;
              case 3 : //Sine
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  uint64_t real_step = (((uint64_t)step * (uint64_t)LFOVibrato(i)) >> 24);

                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    int32_t tmp_vout = (sineTable[phaseAcc[i] >> 22] >> 24);
                    int32_t Vout = ((LFOTremolo(i) * tmp_vout) >> 24) - 128;
                    polyphony_vout += Vout;
                  }
                }
                break;
          }
          polyphony_vout = polyphony_vout >> (8 - vol);
          polyphony_vout = max(-128, min(127, (int)polyphony_vout));
            uint32_t lol = polyphony_vout;//Calculate one sample
            if (writeBuffer1)
              sampleBuffer1[writeCtr] = lol + 128;
            else
              sampleBuffer0[writeCtr] = lol + 128;
            
            vout_r = polyphony_vout;
      }
  }
  #else
      uint64_t pressedKeysArray = 0;
      uint8_t baseoct;
      uint8_t vol;
      uint8_t wave;
      xSemaphoreTake(sampleBufferMutex, portMAX_DELAY);
      for (uint32_t writeCtr = 0; writeCtr < SAMPLE_BUFFER_SIZE; writeCtr++) {
        if(receiver){
          pressedKeysArray = ((((uint64_t)pressedKeysMaj) << 24) | pressedKeysMin);
          baseoct = octave_r - 4;
          vol = volume_r;
          wave = wave_r;
        }
        else if(sender){
          pressedKeysArray = ((uint64_t)min_s) << 24 | maj_s;
          baseoct = octave_s - pos - 4;
          vol = volume_s;
          wave = wave_s;
        }
          static uint32_t phaseAcc[36] = {0};
          static int increase[36] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
          int32_t polyphony_vout = 0;
          switch (wave){
              case 0 :  //Sawtooth
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += step;
                    int32_t Vout = ((phaseAcc[i] >> 24) - 128);
                    polyphony_vout += Vout;
                  }
                }
                break;
              case 1 : //Triangle
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += step;
                    if (phaseAcc[i] < 2147483648) {
                        int32_t Vout = ((2147483648 << 1) >> 24) - 128;
                        polyphony_vout += Vout;
                    } else {
                        uint64_t tmp = (-(2147483648 << 1)) + (8589934591);
                        int32_t Vout = ((tmp >> 24) - 128) << 32;
                        polyphony_vout += Vout;
                    }
                  }
                }
                break;
              case 2 : //Square
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += step;
                    if (phaseAcc[i] < 2147483648) {
                        int32_t Vout = 127;
                        polyphony_vout += Vout;
                    } else {
                        int32_t Vout = -128;
                        polyphony_vout += Vout;
                    }
                  }
                }
                break;
              case 3 : //Sine
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += step;
                    int32_t Vout = (sineTable[phaseAcc[i] >> 22] >> 24) - 128;
                    polyphony_vout += Vout;
                  }
                }
                break;
          }
          polyphony_vout = polyphony_vout >> (8 - vol);
          polyphony_vout = max(-128, min(127, (int)polyphony_vout));
            uint32_t lol = polyphony_vout;//Calculate one sample
            if (writeBuffer1)
              sampleBuffer1[writeCtr] = lol + 128;
            else
              sampleBuffer0[writeCtr] = lol + 128;
            
            vout_r = polyphony_vout;
      }
    #endif
}

void recieverTask(){
  uint32_t localpressedKeysMin = pressedKeysMin;
  uint16_t localpressedKeysMaj = pressedKeysMaj;
  if (RX_Message[0] == 'R'){
    if(RX_Message[3] == 1){
      localpressedKeysMin &= ~(1 << (12+RX_Message[2]));
    }
    else if(RX_Message[3] == 2){
      localpressedKeysMaj &= ~(1 << RX_Message[2]);
    }
  }
  //If key is pressed set to correct step size
  else if (RX_Message[0] == 'P'){
    if(RX_Message[3] == 1){
      localpressedKeysMin |= (1 << (12+RX_Message[2]));
    }
    else if(RX_Message[3] == 2){
      localpressedKeysMaj |= (1 << RX_Message[2]);
      Serial.println ("Maj: "+String(localpressedKeysMaj));
    }
  }
  else if (RX_Message[0]='M'){
    Serial.println ("Received maxOct: "+String(RX_Message[1]));
    uint8_t localmaxOct = 8-RX_Message[1];
    __atomic_store_n(&maxOct, localmaxOct,__ATOMIC_RELAXED);

  }
  // Serial.printf("keys recieved %hu\n", localpressedKeysArrayMaj);
  //Write step size to the pressedKeys array to play it
  __atomic_store_n(&pressedKeysMin, localpressedKeysMin,__ATOMIC_RELAXED);
  __atomic_store_n(&pressedKeysMaj, localpressedKeysMaj,__ATOMIC_RELAXED);
}

void senderTask(){
//Message received is handshake 
  if (RX_Message[0] == 'H'){
    pos = RX_Message[1] + 1;
    octave_s = RX_Message[2] + 1;
    volume_s = RX_Message[3];

    xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
      for (uint8_t i=5; i<7; i++) {
        setRow(i);
        digitalWrite(OUTR_PIN,1);         //Enable selected row
        digitalWrite(REN_PIN,1);          //Enable selected row
        delayMicroseconds(3);             //Wait for column inputs to stabilise
        keyArray[i] = readCols();         //Read column inputs
        digitalWrite(REN_PIN,0);          //Disable selected row
      }
      uint8_t west_detect = ((keyArray[5]&0x08)>>3)^0x01;
      uint8_t east_detect = ((keyArray[6]&0x08)>>3)^0x01;
    xSemaphoreGive(keyArrayMutex);

    //Send to other keyboards connected to get their position
    if(east_detect){
      uint8_t TX_Message[8] = {'H',pos, octave_s, volume_r, 0, 0, 0, 0};
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
    else{
      Serial.println("Here");
      uint8_t TX_Message[8] = {'M',pos, 0, 0, 0, 0, 0, 0};
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
  }
  //Info from the knobs
  else if (RX_Message[0] == 'K'){
    octave_s = RX_Message[2] + pos;
    volume_s = RX_Message[3];
    wave_s = RX_Message[4];
  }
  //Voltage message to know what notes to play
  else if (RX_Message[0] == 'V'){
    uint32_t localmaj = RX_Message[3]<<16 | RX_Message[2]<<8 | RX_Message[1];
    uint16_t localmin = RX_Message[5]<<8 | RX_Message[4];
    __atomic_store_n(&maj_s, localmaj, __ATOMIC_RELAXED);
    __atomic_store_n(&min_s, localmin, __ATOMIC_RELAXED);
  }
}


void decodeTask(void * pvParameters){
  #ifndef TEST_DECODE
  while(1){
  xQueueReceive(msgInQ, RX_Message, portMAX_DELAY);
    if(receiver){
      recieverTask();
    }
    else if(sender){
      senderTask();
    }
  }
  #else
  xQueueReceive(msgInQ, RX_Message, portMAX_DELAY);
    if(receiver){
      recieverTask();
    }
    else if(sender){
      senderTask();
    }
    #endif
  } 



void CAN_RX_ISR (void) {
  #ifndef TEST_CAN_RX_ISR
	uint8_t RX_Message_ISR[8];
	uint32_t ID;
	CAN_RX(ID, RX_Message_ISR);
	xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
  #else
    uint8_t RX_Message_ISR[8];
	  uint32_t ID;
    CAN_RX(ID, RX_Message_ISR);
    xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
  #endif
}

void CAN_TX_ISR (void) {
  #ifndef TEST_CAN_TX_ISR
	xSemaphoreGiveFromISR(CAN_TX_Semaphore, NULL);
  #else
    xSemaphoreGiveFromISR(CAN_TX_Semaphore, NULL);
  #endif

}

void CAN_TX_Task (void * pvParameters) {
  #ifndef TEST_CAN_TX
	uint8_t msgOut[8];
	while (1) {
    xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
    xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
    CAN_TX(0x123, msgOut);
	}
  #else
    xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
    xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
    CAN_TX(0x123, msgOut);
  #endif
}


void sendSoundTask (void * pvParameters) {
  #ifndef TEST_SEND_SOUND
  const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
  uint64_t localPressedKeys;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  volatile uint64_t prevPressed = 0;
  while(1){
    localPressedKeys = ((uint64_t)pressedKeysMaj) << 24 | pressedKeysMin;
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
    if(receiver && !singleton && localPressedKeys != prevPressed){
      uint8_t TX_Message[8] = {'V', (pressedKeysMin & 0xFF), (pressedKeysMin>>8 & 0xFF), (pressedKeysMin>>16 & 0xFF), (pressedKeysMaj & 0xFF), (pressedKeysMaj>>8 & 0xFF), 0, 0};
      // Serial.println("Sending:"+String(pressedKeysMaj));
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      // Serial.printf("Sending: %d\n", TX_Message[4]<<24 | TX_Message[3]<<16 | TX_Message[2]<<8 | TX_Message[1]);
    }
    else {
    }
    prevPressed = localPressedKeys;
  }
  #else
    uint64_t localPressedKeys;
    localPressedKeys = ((uint64_t)pressedKeysMaj) << 24 | pressedKeysMin;
    if(receiver && !singleton && localPressedKeys != prevPressed){
      uint8_t TX_Message[8] = {'V', (pressedKeysMin & 0xFF), (pressedKeysMin>>8 & 0xFF), (pressedKeysMin>>16 & 0xFF), (pressedKeysMaj & 0xFF), (pressedKeysMaj>>8 & 0xFF), 0, 0};
      // Serial.println("Sending:"+String(pressedKeysMaj));
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      // Serial.printf("Sending: %d\n", TX_Message[4]<<24 | TX_Message[3]<<16 | TX_Message[2]<<8 | TX_Message[1]);
    }
    else {
    }
    prevPressed = localPressedKeys;
  #endif
}

void scanKeysTask(void * pvParameters) {
   #ifndef TEST_SCAN_KEYS
    const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    // Classes initialisations and variables needed for task
    Knob Knob3(0,4);
    Knob Knob2(0,4);
    Knob Knob1 (0,0);
    uint16_t prevPressedKeys = 0;
    uint16_t pressedKeys = 0;
    uint8_t TX_Message[8] = {0};
    uint32_t reset[36] = {0};
    uint8_t prevOctave=4 ;
    uint8_t prevVolume=4;
    uint8_t prevWave = 0;
    bool start = true;
    uint8_t prevMaxOct = 0;

    while(1){
        vTaskDelayUntil( &xLastWakeTime, xFrequency );
        uint32_t localstepsize = 0;
        char localnote = currentnote;
        char localsharp = currentsharp;
        uint8_t localvolume_r = volume_r;
        uint8_t localoctave_r= octave_r;
        uint8_t localwave_r = wave_r;
        uint32_t localpressedKeysMin = pressedKeysMin;
        uint32_t localpressedKeysMaj = pressedKeysMaj;
        uint8_t localkeyArray[7] = {0};
        //Get keys info
        for (uint8_t i = 0; i < 7; i++){
          setRow(i);
          delayMicroseconds(3);
          uint8_t val = readCols();
          localkeyArray[i] = val;
        }

        xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
          memcpy((void*)keyArray, localkeyArray, sizeof(localkeyArray));
        xSemaphoreGive(keyArrayMutex);

       //Initializing our local variables
        pressedKeys = localkeyArray[0] | (localkeyArray[1]<<4) | (localkeyArray[2]<<8);
        uint8_t localwest_detect = ((localkeyArray[5]&0x08)>>3)^0x01;
        uint8_t localeast_detect = ((localkeyArray[6]&0x08)>>3)^0x01;

        //If the keyboards didn't get power at the same time run autodetect again to make sure we get a correct outcome
        if (start){
          auto_detect(localwest_detect, localeast_detect);
          start = false;
        }

        //If a keyboard is connected or disconnected run autodetect again
        if (localwest_detect != west_detect){ //west detect has changed
            if(receiver){
                localpressedKeysMin = 0;
                __atomic_store_n(&pressedKeysMin, localpressedKeysMin, __ATOMIC_RELAXED);
                __atomic_store_n(&pressedKeysMaj, 0x0000, __ATOMIC_RELAXED);
            }
            auto_detect(localwest_detect, localeast_detect);
            __atomic_store_n(&west_detect, localwest_detect, __ATOMIC_RELAXED);
        }
        if (localeast_detect != east_detect){
          if(receiver){
            localpressedKeysMin= 0;
            __atomic_store_n(&pressedKeysMin, localpressedKeysMin, __ATOMIC_RELAXED);
            __atomic_store_n(&pressedKeysMaj, 0x0000, __ATOMIC_RELAXED);
          }
          auto_detect(localwest_detect, localeast_detect);
          if(sender){
            uint8_t TX_Message[8] = {'H',pos, octave_s, volume_s, 0, 0, 0, 0};
            xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
          }
          __atomic_store_n(&east_detect, localeast_detect, __ATOMIC_RELAXED);
        }
        if (prevMaxOct != maxOct){
              // Serial.println ("Setting max"+String(maxOct));
              Knob3.SetLimits(0,8);
              Knob2.SetLimits(0,maxOct);
              Knob1.SetLimits(0,3);
        }

        if(receiver){
          uint8_t currentBA_3 = localkeyArray[3] & 0x03; //00000011 select last 2 bits
          uint8_t currentBA_2 = (localkeyArray[3] & 0x0C)>>2; //00001100 select 2 bits before last 2 bits and shift
          uint8_t currentBA_1 = localkeyArray[4] & 0x03; //00000011 select last 2 bits
          Knob3.UpdateRotateVal(currentBA_3);
          Knob2.UpdateRotateVal(currentBA_2);
          Knob1.UpdateRotateVal(currentBA_1);
          localvolume_r = Knob3.CurRotVal();
          localoctave_r = Knob2.CurRotVal();
          localwave_r = Knob1.CurRotVal();

          //Send Knob info to other modules if something changed
          if (!singleton && (localoctave_r != prevOctave || localvolume_r != prevVolume || localwave_r != prevWave)){
            Serial.println ("cur octave: "+String(localoctave_r)+" cur volume: "+String(localvolume_r));
            TX_Message[0] = 'K';
            TX_Message[2] = localoctave_r;
            TX_Message[3] = localvolume_r;
            TX_Message[4] = localwave_r;
            xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
          }
        }
        prevWave = localwave_r;
        prevOctave = localoctave_r;
        prevVolume = localvolume_r;
        //Code for getting cords 
        //Variables needed for getting cords
        uint16_t onehot = pressedKeys^0xFFF;
        uint16_t prevPressedkeysCopy = prevPressedKeys;
        uint16_t onehotCopy = onehot;
        uint8_t p_idx_array[12] = {12,12,12,12,12,12,12,12,12,12,12,12};
        uint8_t r_idx_array[12] = {12,12,12,12,12,12,12,12,12,12,12,12};
        uint8_t cur_idx;
        uint8_t prev_idx;
        uint8_t p_count = 0;
        uint8_t r_count = 0;
        bool pressed =  false;
        bool released = false;


        while (onehotCopy | prevPressedkeysCopy){
          //Checking if there are keys pressed or released
          if  (onehotCopy == 0){
            cur_idx = 12;
            prev_idx = __builtin_ctz(prevPressedkeysCopy);
          }
          else if (prevPressedkeysCopy == 0){
            prev_idx = 12;
            cur_idx = __builtin_ctz(onehotCopy);
          }
          else{
            cur_idx = __builtin_ctz(onehotCopy);
            prev_idx = __builtin_ctz(prevPressedkeysCopy);
          }
        
          //Checking if the keys pressed or deleted have previously been detected
          if (prev_idx==cur_idx){
            onehotCopy &= ~(1<<cur_idx);
            prevPressedkeysCopy &= ~(1<<cur_idx);
          }
          else if (prev_idx>cur_idx){
            pressed = true;
            p_idx_array[p_count] = cur_idx;
            onehotCopy &= ~(1<<cur_idx);
            p_count++;
          }
          else{
            released = true;
            r_idx_array[r_count] = prev_idx;
            prevPressedkeysCopy &= ~(1<<prev_idx);
            r_count++;
          }

        }
        if (pressed){
          if(receiver){
              //Used for printing purposes
              localnote = notes[p_idx_array[0]];
              localsharp = sharps[p_idx_array[0]];

              
              //int8_t shift = localoctave_r-4;
              
              for (uint8_t i = 0; i < 12; i++){
                if (p_idx_array[i] != 12) {
                  //localstepsize = shift>0 ? stepSizes[p_idx_array[i]]<<shift : stepSizes[p_idx_array[i]]>>-shift;
                  localpressedKeysMin |= (1<<p_idx_array[i]);
                }
                else{
                  break;
                }
              }
          }
        else if(sender){
          for (uint8_t i = 0; i < 12; i++){
            //Store the pressed keys in the TX_Message to be received by the receiver
            if (p_idx_array[i] != 12) {
              TX_Message[0] = 'P';
              TX_Message[1] = octave_s;
              TX_Message[2] = p_idx_array[i];
              TX_Message[3] = pos;   
              xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
            }
            else{
              break;
            }
          }
        }
      }
      if (released){
        if(receiver){
            if(!onehot){ //if no keys are pressed
                localnote = ' ';
                localsharp = ' ';
            }
            else if (!pressed){
                uint8_t curr_idx = __builtin_ctz(onehot);
                localnote = notes[curr_idx];
                localsharp = sharps[curr_idx];
            }
          for (uint8_t i = 0; i < 12; i++){
            if (r_idx_array[i] != 12) {
              localpressedKeysMin &= ~(1<<r_idx_array[i]);
            }
            else{
              break;
            }
          }
        }
        else if(sender){
            for (uint8_t i = 0; i < 12; i++){
              //Store the released keys in the TX_Message to be received by the receiver
              if (r_idx_array[i] != 12) {
                TX_Message[0] = 'R';
                TX_Message[1] = octave_s;
                TX_Message[2] = r_idx_array[i];
                TX_Message[3] = pos;        
                xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
              }
              else{
                break;
              }
            }
        }
      }
      prevPressedKeys = onehot;
      prevMaxOct = maxOct;
      // Serial.printf("PressedKeys %hu\n",pressedKeysArray);
      // Serial.printf("Keys %hu\n",localpressedKeysArrayMaj);
      if (receiver){
        __atomic_store_n(&pressedKeysMin, localpressedKeysMin, __ATOMIC_RELAXED);
        __atomic_store_n(&currentnote, localnote, __ATOMIC_RELAXED);
        __atomic_store_n(&currentsharp, localsharp, __ATOMIC_RELAXED);
        __atomic_store_n(&volume_r, localvolume_r, __ATOMIC_RELAXED);
        __atomic_store_n(&octave_r, localoctave_r, __ATOMIC_RELAXED);
        __atomic_store_n(&wave_r, localwave_r, __ATOMIC_RELAXED);
      }
  }
  #else
    uint8_t localprevkey = -1;
    uint8_t TX_Message[8] = {0};
    uint32_t localstepsize = 0;
    char localnote = 0;
    char localsharp = 0;
    uint8_t localvolume_knob3 = volume_r;
    uint8_t localoctave_knob2 = octave_r;
    Knob Knob3(0);
    Knob Knob2(0);
    for (uint8_t idx = 0; idx < 12; idx++){
      for (uint8_t i = 0; i < 4; i++){
          setRow(i);
          delayMicroseconds(3);
          uint8_t val = readCols();
          xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
          keyArray[i] = val;
          xSemaphoreGive(keyArrayMutex);
          uint8_t onehot = val^0x0F; //00001111 invert last 4 bits
          if (i < 3){
            for(int j = 0; j<4;j++){
              if (onehot & (1<<j)){
                uint8_t idx = 4*i + j;
                //u8g2.print(idx,DEC);
                int8_t shift = localoctave_knob2 - 4;
                if(shift > 0){
                  localstepsize = stepSizes[idx]<<shift;
                }
                else{
                  localstepsize = stepSizes[idx]>>-shift;
                }
                localnote = notes[idx];
                localsharp = sharps[idx];
                localprevkey = idx;
              }
            }
          }
          else{
            uint8_t currentBA_3 = val & 0x03; //00000011 select last 2 bits
            uint8_t currentBA_2 = (val & 0x0C)>>2; //000011 select last 2 bits
            Knob3.UpdateRotateVal(currentBA_3);
            Knob2.UpdateRotateVal(currentBA_2);
            localvolume_r = Knob3.CurRotVal();
            localoctave_knob2 = Knob2.CurRotVal();  
          }
        }
      localstepsize = stepSizes[idx];
      localnote = notes[idx];
      localsharp = sharps[idx];
      localprevkey = idx;
      localvolume_r = 0;
      localoctave_r = 0;

      TX_Message[0] = 'P';
      TX_Message[1] = 4;
      TX_Message[2] = localprevkey;
      
      xQueueSend( msgOutQ, TX_Message, portMAX_DELAY);
    __atomic_store_n(&mastercurrentStepSize, localstepsize, __ATOMIC_RELAXED);
    __atomic_store_n(&currentnote, localnote, __ATOMIC_RELAXED);
    __atomic_store_n(&currentsharp, localsharp, __ATOMIC_RELAXED);
    __atomic_store_n(&volume_knob3, localvolume_knob3, __ATOMIC_RELAXED);
    __atomic_store_n(&octave_knob2, localoctave_knob2, __ATOMIC_RELAXED);
  }
  #endif
}

void displayUpdateTask(void * pvParameters){
  #ifndef TEST_DISPLAY_UPDATE
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  while(1){
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
    u8g2.clearBuffer();         // clear the internal memory
    u8g2.setFont(u8g2_font_courB08_tr); // choose a suitable font
    // u8g2.setCursor(100,20);
    // u8g2.print(pos,DEC);
    if (receiver){
      uint8_t x, y;
      u8g2.drawStr(80,8,"Wave(K2):");
      u8g2.drawStr(2, 15,"Vol(K4):");
      u8g2.drawStr(2, 23,"Oct(K3):");
      u8g2.drawStr(2, 6,"Note:");
      u8g2.drawStr(2, 32, "K1");  
      u8g2.drawStr(39, 32, "K2");
      u8g2.drawStr(80, 32, "K3");
      u8g2.drawStr(116, 32, "K4");
      u8g2.setCursor(2,2);
      switch (wave_r){
        case 0:
              u8g2.drawLine(82,20,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,118,10);
              u8g2.drawLine(118,10,118,20);
              break;
        case 1:
              u8g2.drawLine(82,20,90,10);
              u8g2.drawLine(90,10,98,20);
              u8g2.drawLine(98,20,106,10);
              u8g2.drawLine(106,10,114,20);
              break;
        case 2:
              u8g2.drawLine(82,20,90,20);
              u8g2.drawLine(90,20,90,10);
              u8g2.drawLine(90,10,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,110,20);
              u8g2.drawLine(110,20,110,10);
              u8g2.drawLine(110,10,120,10);
              u8g2.drawLine(120,10,120,20);
              break;
        case 3: 
              for (x = 0; x < 40; x++) {
                y = 32 + 6 * sin(2 * PI * x / 40);
                u8g2.drawPixel(x+80, y-15);
              }
              break;
      }
      u8g2.setCursor(32,6);
      u8g2.print(currentnote);
      u8g2.print(currentsharp);
      u8g2.setCursor(50,16);
      if (volume_r==8){
        u8g2.drawStr(58, 15,"max");
      }
      else if (volume_r==0){
          u8g2.drawStr(58, 15,"min");
      }
      u8g2.print(volume_r,DEC);
      u8g2.setCursor(50,24);
      if (octave_r==8){
        u8g2.drawStr(58, 23,"max");
      }
      else if (octave_r==0){
          u8g2.drawStr(58, 23,"min");
      }
      u8g2.print(octave_r,DEC);
    }

    if (sender){
      u8g2.drawStr(2, 15,"Vol:");
      u8g2.drawStr(2, 23,"Oct:");
      // u8g2.drawStr(2, 6,"Note:");
      u8g2.setCursor(35,10);
      // u8g2.print(currentnote);
      // u8g2.print(currentsharp);
      u8g2.setCursor(25,16);
      if (volume_s==8){
        u8g2.drawStr(33, 15,"max");
      }
      else if (volume_s==0){
          u8g2.drawStr(33, 15,"min");
      }
      u8g2.print(volume_s,DEC);
      u8g2.setCursor(25,24);
      if (octave_s==8){
        u8g2.drawStr(33, 23,"max");
      }
      else if (octave_s==0){
          u8g2.drawStr(33, 23,"min");
      }
      u8g2.print(octave_s,DEC);

    }

    u8g2.sendBuffer();          
    //Toggle LED
    digitalToggle(LED_BUILTIN);
  }
  #else
    u8g2.clearBuffer();         // clear the internal memory
    u8g2.setFont(u8g2_font_courB08_tr); // choose a suitable font
    // u8g2.setCursor(100,20);
    // u8g2.print(pos,DEC);
    if (receiver){
      uint8_t x, y;
      u8g2.drawStr(80,8,"Wave(K2):");
      u8g2.drawStr(2, 15,"Vol(K4):");
      u8g2.drawStr(2, 23,"Oct(K3):");
      u8g2.drawStr(2, 6,"Note:");
      u8g2.drawStr(2, 32, "K1");  
      u8g2.drawStr(39, 32, "K2");
      u8g2.drawStr(80, 32, "K3");
      u8g2.drawStr(116, 32, "K4");
      u8g2.setCursor(2,2);
      switch (wave_r){
        case 0:
              u8g2.drawLine(82,20,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,118,10);
              u8g2.drawLine(118,10,118,20);
              break;
        case 1:
              u8g2.drawLine(82,20,90,10);
              u8g2.drawLine(90,10,98,20);
              u8g2.drawLine(98,20,106,10);
              u8g2.drawLine(106,10,114,20);
              break;
        case 2:
              u8g2.drawLine(82,20,90,20);
              u8g2.drawLine(90,20,90,10);
              u8g2.drawLine(90,10,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,110,20);
              u8g2.drawLine(110,20,110,10);
              u8g2.drawLine(110,10,120,10);
              u8g2.drawLine(120,10,120,20);
              break;
        case 3: 
              for (x = 0; x < 40; x++) {
                y = 32 + 6 * sin(2 * PI * x / 40);
                u8g2.drawPixel(x+80, y-15);
              }
              break;
      }
      u8g2.setCursor(32,6);
      u8g2.print(currentnote);
      u8g2.print(currentsharp);
      u8g2.setCursor(50,16);
      if (volume_r==8){
        u8g2.drawStr(58, 15,"max");
      }
      else if (volume_r==0){
          u8g2.drawStr(58, 15,"min");
      }
      u8g2.print(volume_r,DEC);
      u8g2.setCursor(50,24);
      if (octave_r==8){
        u8g2.drawStr(58, 23,"max");
      }
      else if (octave_r==0){
          u8g2.drawStr(58, 23,"min");
      }
      u8g2.print(octave_r,DEC);
    }

    if (sender){
      u8g2.drawStr(2, 15,"Vol:");
      u8g2.drawStr(2, 23,"Oct:");
      // u8g2.drawStr(2, 6,"Note:");
      u8g2.setCursor(35,10);
      // u8g2.print(currentnote);
      // u8g2.print(currentsharp);
      u8g2.setCursor(25,16);
      if (volume_s==8){
        u8g2.drawStr(33, 15,"max");
      }
      else if (volume_s==0){
          u8g2.drawStr(33, 15,"min");
      }
      u8g2.print(volume_s,DEC);
      u8g2.setCursor(25,24);
      if (octave_s==8){
        u8g2.drawStr(33, 23,"max");
      }
      else if (octave_s==0){
          u8g2.drawStr(33, 23,"min");
      }
      u8g2.print(octave_s,DEC);

    }

    u8g2.sendBuffer();          
    //Toggle LED
    digitalToggle(LED_BUILTIN);

  #endif
}

void setup() {
  // put your setup code here, to run once:
    msgInQ = xQueueCreate(36,8);
 
  #ifndef TEST_SCAN_KEYS
    msgOutQ = xQueueCreate(36,8);
  #else
    msgOutQ = xQueueCreate(384,8);
  #endif


  #ifndef DISABLE_THREADS
    TaskHandle_t scanKeysHandle = NULL;
    xTaskCreate(
    scanKeysTask,		/* Function that implements the task */
    "scanKeys",		/* Text name for the task */
    64,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */
    &scanKeysHandle );  /* Pointer to store the task handle */

    TaskHandle_t displayUpdateTaskHandle = NULL;
    xTaskCreate(
    displayUpdateTask,		/* Function that implements the task */
    "displayUpdate",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    1,			/* Task priority */
    &displayUpdateTaskHandle );

    TaskHandle_t ISRTaskHandle = NULL;
    xTaskCreate(
    ISRTask,		/* Function that implements the task */
    "ISRTaskUpdate",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    3,			/* Task priority */
    &ISRTaskHandle );
    
    TaskHandle_t decodeTaskHandle = NULL;
    xTaskCreate(
    decodeTask,		/* Function that implements the task */
    "decode",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */
    &decodeTaskHandle);

    TaskHandle_t CAN_TX_TaskHandle = NULL;
    xTaskCreate(
    CAN_TX_Task,		/* Function that implements the task */
    "CanTX",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */
    &CAN_TX_TaskHandle);

    TaskHandle_t sendSoundTaskHandle = NULL;
    xTaskCreate(
    sendSoundTask,		/* Function that implements the task */
    "sendSound",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */ 
    &sendSoundTaskHandle);
  #endif

  #ifdef TEST_SCAN_KEYS
  TaskHandle_t scanKeysHandle = NULL;
    xTaskCreate(
    scanKeysTask,		/* Function that implements the task */
    "scanKeys",		/* Text name for the task */
    64,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */
    &scanKeysHandle );  /* Pointer to store the task handle */
  #endif

  #ifdef TEST_DISPLAY_UPDATE
  TaskHandle_t displayUpdateTaskHandle = NULL;
    xTaskCreate(
    displayUpdateTask,		/* Function that implements the task */
    "displayUpdate",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    1,			/* Task priority */
    &displayUpdateTaskHandle );
  #endif

  #ifdef TEST_DECODE
  TaskHandle_t decodeTaskHandle = NULL;
    xTaskCreate(
    decodeTask,		/* Function that implements the task */
    "decode",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    3,			/* Task priority */
    &decodeTaskHandle);
  #endif

  #ifdef TEST_CAN_TX
  TaskHandle_t CAN_TX_TaskHandle = NULL;
    xTaskCreate(
    CAN_TX_Task,		/* Function that implements the task */
    "CanTX",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    3,			/* Task priority */
    &CAN_TX_TaskHandle);
  #endif

  pressedKeysArrayMutex = xSemaphoreCreateMutex();
  sampleBufferMutex = xSemaphoreCreateBinary();
  xSemaphoreGive(sampleBufferMutex);
  keyArrayMutex = xSemaphoreCreateMutex();
  CAN_TX_Semaphore = xSemaphoreCreateCounting(3,3);




  CAN_Init(false);
  #ifndef DISABLE_THREADS
    CAN_RegisterRX_ISR(CAN_RX_ISR);
    CAN_RegisterTX_ISR(CAN_TX_ISR);
  #endif
  setCANFilter(0x123,0x7ff);
  CAN_Start();



  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply

  uint32_t id_0 = HAL_GetUIDw0();
  uint32_t id_1 = HAL_GetUIDw1();
  uint32_t id_2 = HAL_GetUIDw2();

  uint16_t id_0_half = (id_0 >> 16) ^ (id_0 & 0x00FF);
  uint16_t id_1_half = (id_1 >> 16) ^ (id_1 & 0x00FF);
  uint16_t id_2_half = (id_2 >> 16) ^ (id_2 & 0x00FF);

  uint8_t id_0_byte = (id_0_half >> 8) ^ (id_0_half & 0x00FF);
  uint8_t id_1_byte = (id_1_half >> 8) ^ (id_1_half & 0x00FF);
  uint8_t id_2_byte = (id_2_half >> 8) ^ (id_2_half & 0x00FF);

  uint8_t id = id_0_byte ^ id_1_byte ^ id_2_byte;

  Serial.print("ID: ");
  Serial.print(id_0, HEX);
  Serial.print(id_1, HEX);
  Serial.println(id_2, HEX);

  bool outBits[7] = {0,0,0,1,1,1,1};

  for (uint8_t i=0; i<7; i++) {
    setRow(i);                     //Set row address
    digitalWrite(OUT_PIN,outBits[i]); //Set value to latch in DFF
  }
  
  delayMicroseconds(1000);

  for (uint8_t i=5; i<7; i++) {
    setRow(i);
    digitalWrite(REN_PIN,1);          //Enable selected row
    delayMicroseconds(3);             //Wait for column inputs to stabilise
    keyArray[i] = readCols();         //Read column inputs
    digitalWrite(REN_PIN,0);          //Disable selected row
  }

  west_detect = ((keyArray[5]&0x08)>>3)^0x01;
  east_detect = ((keyArray[6]&0x08)>>3)^0x01;
  auto_detect(west_detect,east_detect);

  if(receiver){
    Serial.println("Reciever");
  }
  else if(sender){
    Serial.println("Sender");
  }
  else{
    Serial.println("Error");
  }
  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");
  Serial.print("init west_detect: ");
  Serial.println(west_detect);
  Serial.print("init east_detect: ");
  Serial.println(east_detect);

  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);
  sampleTimer->setOverflow(22000, HERTZ_FORMAT);
  #ifndef DISABLE_THREADS
  sampleTimer->attachInterrupt(sampleISR);
  #endif
  sampleTimer->resume();

  #ifdef DISABLE_THREADS
    uint32_t startTime = micros();
    #ifdef TEST_SCAN_KEYS
      for (int iter = 0; iter < 32; iter++) {
        scanKeysTask(NULL);
      }
    #endif
    #ifdef TEST_DISPLAY_UPDATE
      for (int iter = 0; iter < 32; iter++) {
        displayUpdateTask(NULL);
      }
    #endif
    Serial.println(micros()-startTime);
    while(1);
  #else
    vTaskStartScheduler();
  #endif
}

void loop() {
  // put your main code here, to run repeatedly:
}