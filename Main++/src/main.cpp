#include <Arduino.h>
#include <U8g2lib.h>
#include <iostream>
#include <STM32FreeRTOS.h>
#include <ES_CAN.h>
#include "knobs.h"

// #define sender 0
// #define receiver 0

//Needed for time testing
//#define DISABLE_THREADS
//#define TEST_SCAN_KEYS
//#define TEST_DISPLAY_UPDATE
//#define TEST_DECODE
//#define TEST_CAN_TX
//#define TEST_CAN_RX_ISR
//#define TEST_CAN_TX_ISR
//#define TEST_ISRTASK
//#define TEST_SAMPLEISR
//#define TEST_SEND_SOUND

//Variable neede for Double Buffer 
uint8_t sampleBuffer0[128];
uint8_t sampleBuffer1[128];
volatile bool writeBuffer1 = false;
SemaphoreHandle_t sampleBufferMutex;



//Constants and tables
  const uint32_t interval = 100; //Display update interval
  const uint32_t stepSizes[12] = {50953930, 54077542, 57396381, 60715219, 64229283, 68133799, 72233540, 76528508, 81018701, 85899345, 90975216, 96441538};
  const char notes[12] = {'C','C','D','D','E','F','F','G','G','A','A','B'};
  const char sharps[12] = {' ','#',' ','#',' ',' ','#',' ','#',' ','#',' '};
  const uint32_t sineTable [1024] = {2147483647, 2160660358, 2173836574, 2187011798, 2200185533, 2213357285, 2226526556, 2239692851, 2252855675, 2266014531, 2279168925, 2292318361, 2305462344, 2318600379, 2331731972, 2344856628, 2357973852, 2371083153, 2384184034, 2397276004, 2410358570, 2423431238, 2436493517, 2449544915, 2462584941, 2475613103, 2488628912, 2501631876, 2514621507, 2527597315, 2540558813, 2553505511, 2566436923, 2579352561, 2592251940, 2605134574, 2617999977, 2630847665, 2643677156, 2656487964, 2669279609, 2682051609, 2694803483, 2707534750, 2720244932, 2732933549, 2745600125, 2758244182, 2770865244, 2783462836, 2796036484, 2808585714, 2821110054, 2833609033, 2846082179, 2858529024, 2870949098, 2883341933, 2895707065, 2908044026, 2920352352, 2932631580, 2944881248, 2957100895, 2969290059, 2981448284, 2993575110, 3005670081, 3017732741, 3029762638, 3041759317, 3053722327, 3065651218, 3077545540, 3089404846, 3101228689, 3113016624, 3124768208, 3136482997, 3148160551, 3159800430, 3171402196, 3182965412, 3194489643, 3205974454, 3217419414, 3228824091, 3240188057, 3251510883, 3262792142, 3274031411, 3285228267, 3296382286, 3307493051, 3318560141, 3329583142, 3340561637, 3351495213, 3362383459, 3373225964, 3384022321, 3394772123, 3405474966, 3416130446, 3426738161, 3437297714, 3447808706, 3458270741, 3468683426, 3479046369, 3489359179, 3499621468, 3509832850, 3519992940, 3530101356, 3540157718, 3550161645, 3560112763, 3570010696, 3579855072, 3589645520, 3599381671, 3609063159, 3618689620, 3628260690, 3637776010, 3647235222, 3656637968, 3665983896, 3675272653, 3684503889, 3693677258, 3702792414, 3711849012, 3720846714, 3729785179, 3738664071, 3747483057, 3756241803, 3764939981, 3773577262, 3782153321, 3790667837, 3799120487, 3807510954, 3815838922, 3824104077, 3832306109, 3840444708, 3848519568, 3856530385, 3864476857, 3872358686, 3880175573, 3887927226, 3895613353, 3903233663, 3910787870, 3918275690, 3925696840, 3933051042, 3940338018, 3947557494, 3954709199, 3961792862, 3968808218, 3975755001, 3982632952, 3989441810, 3996181319, 4002851226, 4009451280, 4015981231, 4022440835, 4028829847, 4035148028, 4041395140, 4047570946, 4053675216, 4059707718, 4065668226, 4071556516, 4077372366, 4083115556, 4088785871, 4094383096, 4099907023, 4105357441, 4110734147, 4116036937, 4121265613, 4126419976, 4131499834, 4136504995, 4141435270, 4146290475, 4151070425, 4155774941, 4160403846, 4164956966, 4169434129, 4173835167, 4178159914, 4182408207, 4186579887, 4190674795, 4194692779, 4198633686, 4202497369, 4206283681, 4209992481, 4213623629, 4217176987, 4220652423, 4224049805, 4227369006, 4230609900, 4233772365, 4236856283, 4239861538, 4242788015, 4245635606, 4248404202, 4251093699, 4253703997, 4256234997, 4258686604, 4261058725, 4263351271, 4265564156, 4267697297, 4269750612, 4271724026, 4273617463, 4275430852, 4277164125, 4278817217, 4280390065, 4281882611, 4283294798, 4284626573, 4285877885, 4287048688, 4288138938, 4289148594, 4290077616, 4290925972, 4291693628, 4292380555, 4292986729, 4293512125, 4293956725, 4294320512, 4294603471, 4294805592, 4294926868, 4294967294, 4294926868, 4294805592, 4294603471, 4294320512, 4293956725, 4293512125, 4292986729, 4292380555, 4291693628, 4290925972, 4290077616, 4289148594, 4288138938, 4287048688, 4285877885, 4284626573, 4283294798, 4281882611, 4280390065, 4278817217, 4277164125, 4275430852, 4273617463, 4271724026, 4269750612, 4267697297, 4265564156, 4263351271, 4261058725, 4258686604, 4256234997, 4253703997, 4251093699, 4248404202, 4245635606, 4242788015, 4239861538, 4236856283, 4233772365, 4230609900, 4227369006, 4224049805, 4220652423, 4217176987, 4213623629, 4209992481, 4206283681, 4202497369, 4198633686, 4194692779, 4190674795, 4186579887, 4182408207, 4178159914, 4173835167, 4169434129, 4164956966, 4160403846, 4155774941, 4151070425, 4146290475, 4141435270, 4136504995, 4131499834, 4126419976, 4121265613, 4116036937, 4110734147, 4105357441, 4099907023, 4094383096, 4088785871, 4083115556, 4077372366, 4071556516, 4065668226, 4059707718, 4053675216, 4047570946, 4041395140, 4035148028, 4028829847, 4022440835, 4015981231, 4009451280, 4002851226, 3996181319, 3989441810, 3982632952, 3975755001, 3968808218, 3961792862, 3954709199, 3947557494, 3940338018, 3933051042, 3925696840, 3918275690, 3910787870, 3903233663, 3895613353, 3887927226, 3880175573, 3872358686, 3864476857, 3856530385, 3848519568, 3840444708, 3832306109, 3824104077, 3815838922, 3807510954, 3799120487, 3790667837, 3782153321, 3773577262, 3764939981, 3756241803, 3747483057, 3738664071, 3729785179, 3720846714, 3711849012, 3702792414, 3693677258, 3684503889, 3675272653, 3665983896, 3656637968, 3647235222, 3637776010, 3628260690, 3618689620, 3609063159, 3599381671, 3589645520, 3579855072, 3570010696, 3560112763, 3550161645, 3540157718, 3530101356, 3519992940, 3509832850, 3499621468, 3489359179, 3479046369, 3468683426, 3458270741, 3447808706, 3437297714, 3426738161, 3416130446, 3405474966, 3394772123, 3384022321, 3373225964, 3362383459, 3351495213, 3340561637, 3329583142, 3318560141, 3307493051, 3296382286, 3285228267, 3274031411, 3262792142, 3251510883, 3240188057, 3228824091, 3217419414, 3205974454, 3194489643, 3182965412, 3171402196, 3159800430, 3148160551, 3136482997, 3124768208, 3113016624, 3101228689, 3089404846, 3077545540, 3065651218, 3053722327, 3041759317, 3029762638, 3017732741, 3005670081, 2993575110, 2981448284, 2969290059, 2957100895, 2944881248, 2932631580, 2920352352, 2908044026, 2895707065, 2883341933, 2870949098, 2858529024, 2846082179, 2833609033, 2821110054, 2808585714, 2796036484, 2783462836, 2770865244, 2758244182, 2745600125, 2732933549, 2720244932, 2707534750, 2694803483, 2682051609, 2669279609, 2656487964, 2643677156, 2630847665, 2617999977, 2605134574, 2592251940, 2579352561, 2566436923, 2553505511, 2540558813, 2527597315, 2514621507, 2501631876, 2488628912, 2475613103, 2462584941, 2449544915, 2436493517, 2423431238, 2410358570, 2397276004, 2384184034, 2371083153, 2357973852, 2344856628, 2331731972, 2318600379, 2305462344, 2292318361, 2279168925, 2266014531, 2252855675, 2239692851, 2226526556, 2213357285, 2200185533, 2187011798, 2173836574, 2160660358, 2147483647, 2134306936, 2121130720, 2107955496, 2094781761, 2081610009, 2068440738, 2055274443, 2042111619, 2028952763, 2015798369, 2002648933, 1989504950, 1976366915, 1963235322, 1950110666, 1936993442, 1923884141, 1910783260, 1897691290, 1884608724, 1871536056, 1858473777, 1845422379, 1832382353, 1819354191, 1806338382, 1793335418, 1780345787, 1767369979, 1754408481, 1741461783, 1728530371, 1715614733, 1702715354, 1689832720, 1676967317, 1664119629, 1651290138, 1638479330, 1625687685, 1612915685, 1600163811, 1587432544, 1574722362, 1562033745, 1549367169, 1536723112, 1524102050, 1511504458, 1498930810, 1486381580, 1473857240, 1461358261, 1448885115, 1436438270, 1424018196, 1411625361, 1399260229, 1386923268, 1374614942, 1362335714, 1350086046, 1337866399, 1325677235, 1313519010, 1301392184, 1289297213, 1277234553, 1265204656, 1253207977, 1241244967, 1229316076, 1217421754, 1205562448, 1193738605, 1181950670, 1170199086, 1158484297, 1146806743, 1135166864, 1123565098, 1112001882, 1100477651, 1088992840, 1077547880, 1066143203, 1054779237, 1043456411, 1032175152, 1020935883, 1009739027, 998585008, 987474243, 976407153, 965384152, 954405657, 943472081, 932583835, 921741330, 910944973, 900195171, 889492328, 878836848, 868229133, 857669580, 847158588, 836696553, 826283868, 815920925, 805608115, 795345826, 785134444, 774974354, 764865938, 754809576, 744805649, 734854531, 724956598, 715112222, 705321774, 695585623, 685904135, 676277674, 666706604, 657191284, 647732072, 638329326, 628983398, 619694641, 610463405, 601290036, 592174880, 583118282, 574120580, 565182115, 556303223, 547484237, 538725491, 530027313, 521390032, 512813973, 504299457, 495846807, 487456340, 479128372, 470863217, 462661185, 454522586, 446447726, 438436909, 430490437, 422608608, 414791721, 407040068, 399353941, 391733631, 384179424, 376691604, 369270454, 361916252, 354629276, 347409800, 340258095, 333174432, 326159076, 319212293, 312334342, 305525484, 298785975, 292116068, 285516014, 278986063, 272526459, 266137447, 259819266, 253572154, 247396348, 241292078, 235259576, 229299068, 223410778, 217594928, 211851738, 206181423, 200584198, 195060271, 189609853, 184233147, 178930357, 173701681, 168547318, 163467460, 158462299, 153532024, 148676819, 143896869, 139192353, 134563448, 130010328, 125533165, 121132127, 116807380, 112559087, 108387407, 104292499, 100274515, 96333608, 92469925, 88683613, 84974813, 81343665, 77790307, 74314871, 70917489, 67598288, 64357394, 61194929, 58111011, 55105756, 52179279, 49331688, 46563092, 43873595, 41263297, 38732297, 36280690, 33908569, 31616023, 29403138, 27269997, 25216682, 23243268, 21349831, 19536442, 17803169, 16150077, 14577229, 13084683, 11672496, 10340721, 9089409, 7918606, 6828356, 5818700, 4889678, 4041322, 3273666, 2586739, 1980565, 1455169, 1010569, 646782, 363823, 161702, 40426, 0, 40426, 161702, 363823, 646782, 1010569, 1455169, 1980565, 2586739, 3273666, 4041322, 4889678, 5818700, 6828356, 7918606, 9089409, 10340721, 11672496, 13084683, 14577229, 16150077, 17803169, 19536442, 21349831, 23243268, 25216682, 27269997, 29403138, 31616023, 33908569, 36280690, 38732297, 41263297, 43873595, 46563092, 49331688, 52179279, 55105756, 58111011, 61194929, 64357394, 67598288, 70917489, 74314871, 77790307, 81343665, 84974813, 88683613, 92469925, 96333608, 100274515, 104292499, 108387407, 112559087, 116807380, 121132127, 125533165, 130010328, 134563448, 139192353, 143896869, 148676819, 153532024, 158462299, 163467460, 168547318, 173701681, 178930357, 184233147, 189609853, 195060271, 200584198, 206181423, 211851738, 217594928, 223410778, 229299068, 235259576, 241292078, 247396348, 253572154, 259819266, 266137447, 272526459, 278986063, 285516014, 292116068, 298785975, 305525484, 312334342, 319212293, 326159076, 333174432, 340258095, 347409800, 354629276, 361916252, 369270454, 376691604, 384179424, 391733631, 399353941, 407040068, 414791721, 422608608, 430490437, 438436909, 446447726, 454522586, 462661185, 470863217, 479128372, 487456340, 495846807, 504299457, 512813973, 521390032, 530027313, 538725491, 547484237, 556303223, 565182115, 574120580, 583118282, 592174880, 601290036, 610463405, 619694641, 628983398, 638329326, 647732072, 657191284, 666706604, 676277674, 685904135, 695585623, 705321774, 715112222, 724956598, 734854531, 744805649, 754809576, 764865938, 774974354, 785134444, 795345826, 805608115, 815920925, 826283868, 836696553, 847158588, 857669580, 868229133, 878836848, 889492328, 900195171, 910944973, 921741330, 932583835, 943472081, 954405657, 965384152, 976407153, 987474243, 998585008, 1009739027, 1020935883, 1032175152, 1043456411, 1054779237, 1066143203, 1077547880, 1088992840, 1100477651, 1112001882, 1123565098, 1135166864, 1146806743, 1158484297, 1170199086, 1181950670, 1193738605, 1205562448, 1217421754, 1229316076, 1241244967, 1253207977, 1265204656, 1277234553, 1289297213, 1301392184, 1313519010, 1325677235, 1337866399, 1350086046, 1362335714, 1374614942, 1386923268, 1399260229, 1411625361, 1424018196, 1436438270, 1448885115, 1461358261, 1473857240, 1486381580, 1498930810, 1511504458, 1524102050, 1536723112, 1549367169, 1562033745, 1574722362, 1587432544, 1600163811, 1612915685, 1625687685, 1638479330, 1651290138, 1664119629, 1676967317, 1689832720, 1702715354, 1715614733, 1728530371, 1741461783, 1754408481, 1767369979, 1780345787, 1793335418, 1806338382, 1819354191, 1832382353, 1845422379, 1858473777, 1871536056, 1884608724, 1897691290, 1910783260, 1923884141, 1936993442, 1950110666, 1963235322, 1976366915, 1989504950, 2002648933, 2015798369, 2028952763, 2042111619, 2055274443, 2068440738, 2081610009, 2094781761, 2107955496, 2121130720, 2134306936};
  const int32_t LFOTable[4096] = {16777214, 16777205, 16777176, 16777130, 16777064, 16776980, 16776876, 16776755, 16776614, 16776455, 16776276, 16776080, 16775864, 16775629, 16775376, 16775104, 16774814, 16774504, 16774176, 16773829, 16773464, 16773079, 16772676, 16772255, 16771814, 16771355, 16770877, 16770380, 16769864, 16769330, 16768777, 16768205, 16767615, 16767006, 16766378, 16765731, 16765066, 16764382, 16763679, 16762957, 16762217, 16761458, 16760680, 16759884, 16759069, 16758235, 16757382, 16756511, 16755621, 16754713, 16753785, 16752839, 16751874, 16750891, 16749889, 16748868, 16747829, 16746770, 16745694, 16744598, 16743484, 16742351, 16741199, 16740029, 16738840, 16737633, 16736406, 16735162, 16733898, 16732616, 16731315, 16729996, 16728658, 16727301, 16725925, 16724531, 16723119, 16721688, 16720238, 16718769, 16717282, 16715776, 16714252, 16712709, 16711148, 16709567, 16707969, 16706351, 16704715, 16703061, 16701388, 16699696, 16697986, 16696257, 16694510, 16692744, 16690960, 16689157, 16687335, 16685495, 16683636, 16681759, 16679864, 16677949, 16676017, 16674066, 16672096, 16670108, 16668101, 16666076, 16664032, 16661970, 16659889, 16657790, 16655672, 16653536, 16651381, 16649208, 16647017, 16644807, 16642579, 16640332, 16638067, 16635783, 16633481, 16631160, 16628822, 16626464, 16624089, 16621694, 16619282, 16616851, 16614402, 16611934, 16609448, 16606944, 16604421, 16601880, 16599321, 16596743, 16594147, 16591533, 16588900, 16586249, 16583580, 16580892, 16578187, 16575462, 16572720, 16569959, 16567180, 16564383, 16561568, 16558734, 16555882, 16553012, 16550123, 16547217, 16544292, 16541349, 16538388, 16535408, 16532411, 16529395, 16526361, 16523309, 16520239, 16517150, 16514044, 16510919, 16507776, 16504615, 16501436, 16498239, 16495024, 16491790, 16488539, 16485270, 16481982, 16478676, 16475353, 16472011, 16468651, 16465274, 16461878, 16458464, 16455032, 16451582, 16448115, 16444629, 16441125, 16437604, 16434064, 16430506, 16426931, 16423337, 16419726, 16416097, 16412450, 16408785, 16405102, 16401401, 16397682, 16393946, 16390191, 16386419, 16382629, 16378821, 16374995, 16371152, 16367290, 16363411, 16359514, 16355600, 16351667, 16347717, 16343749, 16339764, 16335760, 16331739, 16327700, 16323644, 16319570, 16315478, 16311368, 16307241, 16303096, 16298934, 16294754, 16290556, 16286341, 16282108, 16277858, 16273589, 16269304, 16265001, 16260680, 16256342, 16251986, 16247613, 16243222, 16238813, 16234388, 16229944, 16225484, 16221005, 16216510, 16211997, 16207466, 16202918, 16198353, 16193770, 16189170, 16184553, 16179918, 16175266, 16170597, 16165910, 16161206, 16156484, 16151746, 16146990, 16142216, 16137426, 16132618, 16127793, 16122951, 16118091, 16113215, 16108321, 16103410, 16098482, 16093536, 16088574, 16083594, 16078598, 16073584, 16068553, 16063505, 16058440, 16053358, 16048258, 16043142, 16038009, 16032859, 16027691, 16022507, 16017306, 16012088, 16006853, 16001600, 15996331, 15991046, 15985743, 15980423, 15975086, 15969733, 15964363, 15958975, 15953571, 15948151, 15942713, 15937259, 15931788, 15926300, 15920795, 15915274, 15909735, 15904181, 15898609, 15893021, 15887416, 15881794, 15876156, 15870501, 15864830, 15859142, 15853437, 15847716, 15841978, 15836224, 15830453, 15824665, 15818861, 15813041, 15807204, 15801351, 15795481, 15789595, 15783692, 15777773, 15771837, 15765885, 15759917, 15753933, 15747932, 15741914, 15735881, 15729831, 15723765, 15717682, 15711583, 15705468, 15699337, 15693190, 15687026, 15680846, 15674650, 15668438, 15662210, 15655965, 15649705, 15643428, 15637135, 15630827, 15624502, 15618161, 15611804, 15605431, 15599042, 15592637, 15586216, 15579780, 15573327, 15566858, 15560374, 15553873, 15547357, 15540825, 15534277, 15527713, 15521133, 15514538, 15507926, 15501299, 15494657, 15487998, 15481324, 15474634, 15467928, 15461207, 15454470, 15447718, 15440949, 15434166, 15427366, 15420551, 15413721, 15406875, 15400013, 15393136, 15386243, 15379335, 15372412, 15365473, 15358518, 15351548, 15344563, 15337562, 15330546, 15323515, 15316468, 15309407, 15302329, 15295237, 15288129, 15281006, 15273867, 15266714, 15259545, 15252361, 15245162, 15237948, 15230719, 15223474, 15216215, 15208940, 15201650, 15194346, 15187026, 15179691, 15172341, 15164977, 15157597, 15150202, 15142793, 15135368, 15127929, 15120475, 15113006, 15105522, 15098023, 15090509, 15082981, 15075438, 15067880, 15060307, 15052720, 15045118, 15037502, 15029870, 15022224, 15014564, 15006889, 14999199, 14991494, 14983776, 14976042, 14968294, 14960532, 14952755, 14944964, 14937158, 14929337, 14921503, 14913654, 14905790, 14897913, 14890021, 14882114, 14874194, 14866259, 14858309, 14850346, 14842368, 14834377, 14826371, 14818350, 14810316, 14802268, 14794205, 14786128, 14778038, 14769933, 14761814, 14753681, 14745534, 14737374, 14729199, 14721010, 14712808, 14704591, 14696361, 14688117, 14679859, 14671587, 14663301, 14655002, 14646689, 14638362, 14630021, 14621667, 14613299, 14604917, 14596522, 14588113, 14579690, 14571254, 14562804, 14554341, 14545865, 14537374, 14528871, 14520353, 14511823, 14503279, 14494721, 14486150, 14477566, 14468969, 14460358, 14451734, 14443096, 14434446, 14425782, 14417104, 14408414, 14399711, 14390994, 14382264, 14373521, 14364765, 14355996, 14347214, 14338419, 14329610, 14320789, 14311955, 14303108, 14294248, 14285375, 14276489, 14267590, 14258679, 14249754, 14240817, 14231867, 14222904, 14213929, 14204940, 14195940, 14186926, 14177900, 14168861, 14159809, 14150745, 14141669, 14132579, 14123478, 14114363, 14105237, 14096097, 14086946, 14077782, 14068605, 14059416, 14050215, 14041002, 14031776, 14022538, 14013287, 14004024, 13994750, 13985462, 13976163, 13966852, 13957528, 13948192, 13938845, 13929485, 13920113, 13910729, 13901333, 13891925, 13882505, 13873073, 13863629, 13854174, 13844706, 13835227, 13825736, 13816233, 13806718, 13797191, 13787653, 13778103, 13768541, 13758968, 13749383, 13739786, 13730178, 13720558, 13710927, 13701284, 13691629, 13681963, 13672286, 13662597, 13652897, 13643185, 13633462, 13623727, 13613982, 13604225, 13594456, 13584677, 13574886, 13565084, 13555270, 13545446, 13535610, 13525764, 13515906, 13506037, 13496157, 13486266, 13476364, 13466451, 13456527, 13446592, 13436646, 13426690, 13416722, 13406744, 13396755, 13386755, 13376744, 13366722, 13356690, 13346647, 13336593, 13326529, 13316454, 13306369, 13296272, 13286166, 13276048, 13265921, 13255783, 13245634, 13235475, 13225305, 13215125, 13204935, 13194734, 13184523, 13174302, 13164070, 13153829, 13143576, 13133314, 13123042, 13112759, 13102467, 13092164, 13081851, 13071528, 13061195, 13050852, 13040499, 13030136, 13019763, 13009380, 12998988, 12988585, 12978173, 12967751, 12957319, 12946877, 12936426, 12925964, 12915493, 12905013, 12894523, 12884023, 12873514, 12862995, 12852466, 12841928, 12831381, 12820824, 12810257, 12799681, 12789096, 12778502, 12767898, 12757284, 12746662, 12736030, 12725389, 12714739, 12704079, 12693411, 12682733, 12672046, 12661350, 12650645, 12639931, 12629208, 12618476, 12607735, 12596985, 12586226, 12575458, 12564681, 12553896, 12543101, 12532298, 12521486, 12510666, 12499836, 12488998, 12478152, 12467296, 12456432, 12445560, 12434679, 12423789, 12412891, 12401985, 12391069, 12380146, 12369214, 12358274, 12347325, 12336368, 12325403, 12314429, 12303448, 12292458, 12281459, 12270453, 12259438, 12248416, 12237385, 12226346, 12215299, 12204245, 12193182, 12182111, 12171032, 12159945, 12148851, 12137748, 12126638, 12115520, 12104394, 12093261, 12082119, 12070970, 12059813, 12048649, 12037477, 12026297, 12015110, 12003915, 11992713, 11981503, 11970286, 11959062, 11947830, 11936590, 11925343, 11914089, 11902828, 11891559, 11880283, 11869000, 11857709, 11846412, 11835107, 11823795, 11812476, 11801150, 11789817, 11778477, 11767130, 11755776, 11744415, 11733047, 11721672, 11710290, 11698902, 11687507, 11676104, 11664696, 11653280, 11641858, 11630429, 11618994, 11607551, 11596103, 11584647, 11573186, 11561717, 11550242, 11538761, 11527273, 11515779, 11504279, 11492772, 11481259, 11469740, 11458214, 11446682, 11435144, 11423600, 11412049, 11400493, 11388930, 11377361, 11365786, 11354205, 11342619, 11331026, 11319427, 11307823, 11296212, 11284596, 11272974, 11261346, 11249712, 11238072, 11226427, 11214776, 11203120, 11191457, 11179789, 11168116, 11156437, 11144753, 11133063, 11121367, 11109666, 11097960, 11086248, 11074531, 11062809, 11051081, 11039348, 11027610, 11015867, 11004118, 10992364, 10980605, 10968841, 10957072, 10945298, 10933518, 10921734, 10909945, 10898151, 10886352, 10874548, 10862739, 10850925, 10839107, 10827284, 10815456, 10803623, 10791785, 10779943, 10768097, 10756245, 10744389, 10732529, 10720664, 10708794, 10696920, 10685042, 10673159, 10661272, 10649380, 10637484, 10625584, 10613680, 10601771, 10589858, 10577941, 10566019, 10554094, 10542164, 10530231, 10518293, 10506351, 10494405, 10482456, 10470502, 10458544, 10446583, 10434618, 10422649, 10410676, 10398699, 10386719, 10374734, 10362747, 10350755, 10338760, 10326761, 10314759, 10302753, 10290744, 10278731, 10266715, 10254695, 10242672, 10230645, 10218615, 10206582, 10194546, 10182506, 10170463, 10158417, 10146367, 10134315, 10122259, 10110200, 10098139, 10086074, 10074006, 10061935, 10049861, 10037785, 10025705, 10013623, 10001537, 9989449, 9977358, 9965265, 9953168, 9941069, 9928968, 9916863, 9904756, 9892647, 9880535, 9868420, 9856303, 9844184, 9832061, 9819937, 9807810, 9795681, 9783550, 9771416, 9759280, 9747142, 9735001, 9722858, 9710714, 9698567, 9686418, 9674266, 9662113, 9649958, 9637801, 9625642, 9613481, 9601318, 9589153, 9576987, 9564818, 9552648, 9540476, 9528302, 9516127, 9503950, 9491771, 9479591, 9467409, 9455226, 9443041, 9430854, 9418666, 9406477, 9394286, 9382094, 9369901, 9357706, 9345510, 9333313, 9321114, 9308914, 9296713, 9284511, 9272308, 9260103, 9247898, 9235692, 9223484, 9211276, 9199066, 9186856, 9174645, 9162433, 9150220, 9138006, 9125792, 9113577, 9101361, 9089144, 9076927, 9064709, 9052490, 9040271, 9028052, 9015831, 9003611, 8991390, 8979168, 8966946, 8954724, 8942501, 8930278, 8918055, 8905831, 8893608, 8881384, 8869160, 8856935, 8844711, 8832486, 8820262, 8808037, 8795813, 8783588, 8771364, 8759139, 8746915, 8734691, 8722467, 8710243, 8698020, 8685797, 8673574, 8661351, 8649129, 8636907, 8624685, 8612464, 8600243, 8588023, 8575804, 8563584, 8551366, 8539148, 8526931, 8514714, 8502498, 8490283, 8478068, 8465855, 8453642, 8441430, 8429219, 8417008, 8404799, 8392591, 8380383, 8368177, 8355971, 8343767, 8331564, 8319362, 8307161, 8294961, 8282762, 8270565, 8258369, 8246174, 8233980, 8221788, 8209598, 8197408, 8185220, 8173034, 8160849, 8148666, 8136484, 8124303, 8112125, 8099948, 8087772, 8075599, 8063427, 8051256, 8039088, 8026921, 8014757, 8002594, 7990433, 7978274, 7966117, 7953961, 7941808, 7929657, 7917508, 7905361, 7893216, 7881074, 7868933, 7856795, 7844659, 7832525, 7820394, 7808264, 7796138, 7784013, 7771891, 7759772, 7747655, 7735540, 7723428, 7711318, 7699211, 7687107, 7675005, 7662906, 7650810, 7638716, 7626625, 7614537, 7602452, 7590370, 7578290, 7566213, 7554140, 7542069, 7530001, 7517936, 7505874, 7493816, 7481760, 7469707, 7457658, 7445612, 7433569, 7421529, 7409493, 7397459, 7385430, 7373403, 7361380, 7349360, 7337344, 7325331, 7313322, 7301316, 7289313, 7277315, 7265320, 7253328, 7241340, 7229356, 7217376, 7205399, 7193426, 7181457, 7169492, 7157530, 7145573, 7133619, 7121669, 7109724, 7097782, 7085844, 7073910, 7061981, 7050055, 7038134, 7026217, 7014304, 7002395, 6990491, 6978590, 6966694, 6954803, 6942916, 6931033, 6919154, 6907280, 6895411, 6883546, 6871685, 6859829, 6847978, 6836131, 6824289, 6812452, 6800619, 6788791, 6776968, 6765149, 6753336, 6741527, 6729723, 6717924, 6706130, 6694341, 6682556, 6670777, 6659003, 6647234, 6635470, 6623711, 6611957, 6600208, 6588465, 6576727, 6564994, 6553266, 6541543, 6529826, 6518115, 6506408, 6494707, 6483012, 6471322, 6459638, 6447959, 6436285, 6424617, 6412955, 6401299, 6389648, 6378002, 6366363, 6354729, 6343101, 6331479, 6319863, 6308252, 6296648, 6285049, 6273456, 6261869, 6250288, 6238714, 6227145, 6215582, 6204026, 6192475, 6180931, 6169393, 6157861, 6146335, 6134816, 6123303, 6111796, 6100295, 6088801, 6077314, 6065832, 6054357, 6042889, 6031427, 6019972, 6008523, 5997081, 5985646, 5974217, 5962795, 5951379, 5939970, 5928568, 5917173, 5905784, 5894403, 5883028, 5871660, 5860299, 5848945, 5837598, 5826258, 5814925, 5803599, 5792280, 5780968, 5769663, 5758365, 5747075, 5735792, 5724516, 5713247, 5701986, 5690731, 5679485, 5668245, 5657013, 5645788, 5634571, 5623362, 5612159, 5600965, 5589777, 5578598, 5567426, 5556261, 5545105, 5533956, 5522814, 5511681, 5500555, 5489437, 5478326, 5467224, 5456129, 5445043, 5433964, 5422893, 5411830, 5400775, 5389728, 5378690, 5367659, 5356636, 5345622, 5334615, 5323617, 5312627, 5301645, 5290672, 5279706, 5268750, 5257801, 5246861, 5235929, 5225005, 5214090, 5203184, 5192285, 5181396, 5170515, 5159642, 5148778, 5137923, 5127076, 5116238, 5105409, 5094588, 5083776, 5072973, 5062179, 5051393, 5040617, 5029849, 5019090, 5008340, 4997599, 4986867, 4976144, 4965430, 4954725, 4944029, 4933342, 4922664, 4911995, 4901336, 4890686, 4880045, 4869413, 4858790, 4848177, 4837573, 4826978, 4816393, 4805817, 4795251, 4784694, 4774147, 4763609, 4753080, 4742561, 4732052, 4721552, 4711062, 4700581, 4690110, 4679649, 4669198, 4658756, 4648324, 4637902, 4627489, 4617087, 4606694, 4596312, 4585939, 4575576, 4565223, 4554880, 4544547, 4534224, 4523911, 4513608, 4503315, 4493033, 4482760, 4472498, 4462246, 4452004, 4441773, 4431552, 4421341, 4411140, 4400950, 4390770, 4380600, 4370441, 4360292, 4350154, 4340026, 4329909, 4319802, 4309706, 4299621, 4289546, 4279481, 4269428, 4259385, 4249352, 4239331, 4229320, 4219320, 4209331, 4199353, 4189385, 4179428, 4169483, 4159548, 4149624, 4139711, 4129809, 4119918, 4110038, 4100169, 4090311, 4080464, 4070629, 4060804, 4050991, 4041189, 4031398, 4021619, 4011850, 4002093, 3992347, 3982613, 3972890, 3963178, 3953478, 3943789, 3934112, 3924446, 3914791, 3905148, 3895517, 3885897, 3876289, 3866692, 3857107, 3847533, 3837972, 3828422, 3818883, 3809357, 3799842, 3790339, 3780848, 3771368, 3761901, 3752445, 3743001, 3733570, 3724150, 3714742, 3705346, 3695962, 3686590, 3677230, 3667882, 3658547, 3649223, 3639912, 3630612, 3621325, 3612050, 3602788, 3593537, 3584299, 3575073, 3565860, 3556658, 3547470, 3538293, 3529129, 3519977, 3510838, 3501711, 3492597, 3483495, 3474406, 3465330, 3456265, 3447214, 3438175, 3429149, 3420135, 3411134, 3402146, 3393171, 3384208, 3375258, 3366321, 3357396, 3348485, 3339586, 3330700, 3321827, 3312967, 3304120, 3295286, 3286464, 3277656, 3268861, 3260079, 3251310, 3242554, 3233811, 3225081, 3216364, 3207661, 3198970, 3190293, 3181629, 3172979, 3164341, 3155717, 3147106, 3138509, 3129924, 3121353, 3112796, 3104252, 3095721, 3087204, 3078700, 3070210, 3061733, 3053270, 3044821, 3036384, 3027962, 3019553, 3011158, 3002776, 2994408, 2986054, 2977713, 2969386, 2961073, 2952773, 2944488, 2936216, 2927958, 2919714, 2911483, 2903267, 2895064, 2886876, 2878701, 2870540, 2862393, 2854261, 2846142, 2838037, 2829946, 2821870, 2813807, 2805759, 2797724, 2789704, 2781698, 2773706, 2765729, 2757765, 2749816, 2741881, 2733960, 2726054, 2718162, 2710284, 2702421, 2694572, 2686737, 2678917, 2671111, 2663320, 2655543, 2647780, 2640033, 2632299, 2624580, 2616876, 2609186, 2601511, 2593850, 2586204, 2578573, 2570956, 2563355, 2555767, 2548195, 2540637, 2533094, 2525565, 2518052, 2510553, 2503069, 2495600, 2488146, 2480707, 2473282, 2465872, 2458478, 2451098, 2443733, 2436384, 2429049, 2421729, 2414424, 2407135, 2399860, 2392600, 2385356, 2378127, 2370912, 2363713, 2356529, 2349361, 2342207, 2335069, 2327946, 2320838, 2313745, 2306668, 2299606, 2292560, 2285528, 2278512, 2271512, 2264526, 2257557, 2250602, 2243663, 2236740, 2229831, 2222939, 2216062, 2209200, 2202354, 2195524, 2188709, 2181909, 2175125, 2168357, 2161605, 2154868, 2148146, 2141441, 2134751, 2128077, 2121418, 2114775, 2108148, 2101537, 2094942, 2088362, 2081798, 2075250, 2068718, 2062202, 2055701, 2049217, 2042748, 2036295, 2029858, 2023437, 2017033, 2010644, 2004271, 1997914, 1991573, 1985248, 1978939, 1972647, 1966370, 1960109, 1953865, 1947637, 1941424, 1935228, 1929049, 1922885, 1916738, 1910606, 1904491, 1898393, 1892310, 1886244, 1880194, 1874160, 1868143, 1862142, 1856158, 1850189, 1844237, 1838302, 1832383, 1826480, 1820594, 1814724, 1808871, 1803034, 1797213, 1791409, 1785622, 1779851, 1774097, 1768359, 1762638, 1756933, 1751245, 1745573, 1739919, 1734280, 1728659, 1723054, 1717466, 1711894, 1706339, 1700801, 1695280, 1689775, 1684287, 1678816, 1673362, 1667924, 1662503, 1657099, 1651712, 1646342, 1640988, 1635652, 1630332, 1625029, 1619743, 1614474, 1609222, 1603987, 1598769, 1593568, 1588383, 1583216, 1578066, 1572933, 1567816, 1562717, 1557635, 1552570, 1547522, 1542491, 1537477, 1532480, 1527501, 1522538, 1517593, 1512665, 1507754, 1502860, 1497983, 1493124, 1488282, 1483457, 1478649, 1473858, 1469085, 1464329, 1459590, 1454869, 1450165, 1445478, 1440809, 1436157, 1431522, 1426904, 1422304, 1417722, 1413156, 1408608, 1404078, 1399565, 1395069, 1390591, 1386130, 1381687, 1377261, 1372853, 1368462, 1364089, 1359733, 1355395, 1351074, 1346771, 1342485, 1338217, 1333967, 1329734, 1325519, 1321321, 1317141, 1312978, 1308834, 1304706, 1300597, 1296505, 1292431, 1288374, 1284336, 1280315, 1276311, 1272326, 1268358, 1264407, 1260475, 1256560, 1252663, 1248784, 1244923, 1241080, 1237254, 1233446, 1229656, 1225884, 1222129, 1218393, 1214674, 1210973, 1207290, 1203625, 1199978, 1196349, 1192737, 1189144, 1185568, 1182011, 1178471, 1174949, 1171446, 1167960, 1164492, 1161042, 1157611, 1154197, 1150801, 1147423, 1144064, 1140722, 1137398, 1134093, 1130805, 1127536, 1124284, 1121051, 1117836, 1114639, 1111459, 1108299, 1105156, 1102031, 1098924, 1095836, 1092766, 1089714, 1086680, 1083664, 1080666, 1077687, 1074726, 1071783, 1068858, 1065951, 1063063, 1060193, 1057341, 1054507, 1051692, 1048894, 1046115, 1043355, 1040612, 1037888, 1035182, 1032495, 1029825, 1027174, 1024542, 1021927, 1019331, 1016754, 1014194, 1011653, 1009131, 1006626, 1004140, 1001673, 999224, 996793, 994380, 991986, 989610, 987253, 984914, 982594, 980292, 978008, 975743, 973496, 971268, 969058, 966866, 964693, 962539, 960403, 958285, 956186, 954105, 952043, 949999, 947974, 945967, 943979, 942009, 940058, 938125, 936211, 934315, 932438, 930580, 928740, 926918, 925115, 923331, 921565, 919817, 918089, 916378, 914687, 913014, 911359, 909723, 908106, 906507, 904927, 903366, 901823, 900298, 898793, 897306, 895837, 894387, 892956, 891543, 890149, 888774, 887417, 886079, 884760, 883459, 882177, 880913, 879668, 878442, 877234, 876046, 874875, 873724, 872591, 871477, 870381, 869304, 868246, 867207, 866186, 865184, 864200, 863236, 862290, 861362, 860454, 859564, 858692, 857840, 857006, 856191, 855394, 854617, 853858, 853118, 852396, 851693, 851009, 850344, 849697, 849069, 848460, 847869, 847298, 846745, 846210, 845695, 845198, 844720, 844261, 843820, 843398, 842995, 842611, 842245, 841898, 841570, 841261, 840970, 840698, 840445, 840211, 839995, 839798, 839620, 839461, 839320, 839198, 839095, 839011, 838945, 838898, 838870, 838861, 838870, 838898, 838945, 839011, 839095, 839198, 839320, 839461, 839620, 839798, 839995, 840211, 840445, 840698, 840970, 841261, 841570, 841898, 842245, 842611, 842995, 843398, 843820, 844261, 844720, 845198, 845695, 846210, 846745, 847298, 847869, 848460, 849069, 849697, 850344, 851009, 851693, 852396, 853118, 853858, 854617, 855394, 856191, 857006, 857840, 858692, 859564, 860454, 861362, 862290, 863236, 864200, 865184, 866186, 867207, 868246, 869304, 870381, 871477, 872591, 873724, 874875, 876046, 877234, 878442, 879668, 880913, 882177, 883459, 884760, 886079, 887417, 888774, 890149, 891543, 892956, 894387, 895837, 897306, 898793, 900298, 901823, 903366, 904927, 906507, 908106, 909723, 911359, 913014, 914687, 916378, 918089, 919817, 921565, 923331, 925115, 926918, 928740, 930580, 932438, 934315, 936211, 938125, 940058, 942009, 943979, 945967, 947974, 949999, 952043, 954105, 956186, 958285, 960403, 962539, 964693, 966866, 969058, 971268, 973496, 975743, 978008, 980292, 982594, 984914, 987253, 989610, 991986, 994380, 996793, 999224, 1001673, 1004140, 1006626, 1009131, 1011653, 1014194, 1016754, 1019331, 1021927, 1024542, 1027174, 1029825, 1032495, 1035182, 1037888, 1040612, 1043355, 1046115, 1048894, 1051692, 1054507, 1057341, 1060193, 1063063, 1065951, 1068858, 1071783, 1074726, 1077687, 1080666, 1083664, 1086680, 1089714, 1092766, 1095836, 1098924, 1102031, 1105156, 1108299, 1111459, 1114639, 1117836, 1121051, 1124284, 1127536, 1130805, 1134093, 1137398, 1140722, 1144064, 1147423, 1150801, 1154197, 1157611, 1161042, 1164492, 1167960, 1171446, 1174949, 1178471, 1182011, 1185568, 1189144, 1192737, 1196349, 1199978, 1203625, 1207290, 1210973, 1214674, 1218393, 1222129, 1225884, 1229656, 1233446, 1237254, 1241080, 1244923, 1248784, 1252663, 1256560, 1260475, 1264407, 1268358, 1272326, 1276311, 1280315, 1284336, 1288374, 1292431, 1296505, 1300597, 1304706, 1308834, 1312978, 1317141, 1321321, 1325519, 1329734, 1333967, 1338217, 1342485, 1346771, 1351074, 1355395, 1359733, 1364089, 1368462, 1372853, 1377261, 1381687, 1386130, 1390591, 1395069, 1399565, 1404078, 1408608, 1413156, 1417722, 1422304, 1426904, 1431522, 1436157, 1440809, 1445478, 1450165, 1454869, 1459590, 1464329, 1469085, 1473858, 1478649, 1483457, 1488282, 1493124, 1497983, 1502860, 1507754, 1512665, 1517593, 1522538, 1527501, 1532480, 1537477, 1542491, 1547522, 1552570, 1557635, 1562717, 1567816, 1572933, 1578066, 1583216, 1588383, 1593568, 1598769, 1603987, 1609222, 1614474, 1619743, 1625029, 1630332, 1635652, 1640988, 1646342, 1651712, 1657099, 1662503, 1667924, 1673362, 1678816, 1684287, 1689775, 1695280, 1700801, 1706339, 1711894, 1717466, 1723054, 1728659, 1734280, 1739919, 1745573, 1751245, 1756933, 1762638, 1768359, 1774097, 1779851, 1785622, 1791409, 1797213, 1803034, 1808871, 1814724, 1820594, 1826480, 1832383, 1838302, 1844237, 1850189, 1856158, 1862142, 1868143, 1874160, 1880194, 1886244, 1892310, 1898393, 1904491, 1910606, 1916738, 1922885, 1929049, 1935228, 1941424, 1947637, 1953865, 1960109, 1966370, 1972647, 1978939, 1985248, 1991573, 1997914, 2004271, 2010644, 2017033, 2023437, 2029858, 2036295, 2042748, 2049217, 2055701, 2062202, 2068718, 2075250, 2081798, 2088362, 2094942, 2101537, 2108148, 2114775, 2121418, 2128077, 2134751, 2141441, 2148146, 2154868, 2161605, 2168357, 2175125, 2181909, 2188709, 2195524, 2202354, 2209200, 2216062, 2222939, 2229831, 2236740, 2243663, 2250602, 2257557, 2264526, 2271512, 2278512, 2285528, 2292560, 2299606, 2306668, 2313745, 2320838, 2327946, 2335069, 2342207, 2349361, 2356529, 2363713, 2370912, 2378127, 2385356, 2392600, 2399860, 2407135, 2414424, 2421729, 2429049, 2436384, 2443733, 2451098, 2458478, 2465872, 2473282, 2480707, 2488146, 2495600, 2503069, 2510553, 2518052, 2525565, 2533094, 2540637, 2548195, 2555767, 2563355, 2570956, 2578573, 2586204, 2593850, 2601511, 2609186, 2616876, 2624580, 2632299, 2640033, 2647780, 2655543, 2663320, 2671111, 2678917, 2686737, 2694572, 2702421, 2710284, 2718162, 2726054, 2733960, 2741881, 2749816, 2757765, 2765729, 2773706, 2781698, 2789704, 2797724, 2805759, 2813807, 2821870, 2829946, 2838037, 2846142, 2854261, 2862393, 2870540, 2878701, 2886876, 2895064, 2903267, 2911483, 2919714, 2927958, 2936216, 2944488, 2952773, 2961073, 2969386, 2977713, 2986054, 2994408, 3002776, 3011158, 3019553, 3027962, 3036384, 3044821, 3053270, 3061733, 3070210, 3078700, 3087204, 3095721, 3104252, 3112796, 3121353, 3129924, 3138509, 3147106, 3155717, 3164341, 3172979, 3181629, 3190293, 3198970, 3207661, 3216364, 3225081, 3233811, 3242554, 3251310, 3260079, 3268861, 3277656, 3286464, 3295286, 3304120, 3312967, 3321827, 3330700, 3339586, 3348485, 3357396, 3366321, 3375258, 3384208, 3393171, 3402146, 3411134, 3420135, 3429149, 3438175, 3447214, 3456265, 3465330, 3474406, 3483495, 3492597, 3501711, 3510838, 3519977, 3529129, 3538293, 3547470, 3556658, 3565860, 3575073, 3584299, 3593537, 3602788, 3612050, 3621325, 3630612, 3639912, 3649223, 3658547, 3667882, 3677230, 3686590, 3695962, 3705346, 3714742, 3724150, 3733570, 3743001, 3752445, 3761901, 3771368, 3780848, 3790339, 3799842, 3809357, 3818883, 3828422, 3837972, 3847533, 3857107, 3866692, 3876289, 3885897, 3895517, 3905148, 3914791, 3924446, 3934112, 3943789, 3953478, 3963178, 3972890, 3982613, 3992347, 4002093, 4011850, 4021619, 4031398, 4041189, 4050991, 4060804, 4070629, 4080464, 4090311, 4100169, 4110038, 4119918, 4129809, 4139711, 4149624, 4159548, 4169483, 4179428, 4189385, 4199353, 4209331, 4219320, 4229320, 4239331, 4249352, 4259385, 4269428, 4279481, 4289546, 4299621, 4309706, 4319802, 4329909, 4340026, 4350154, 4360292, 4370441, 4380600, 4390770, 4400950, 4411140, 4421341, 4431552, 4441773, 4452004, 4462246, 4472498, 4482760, 4493033, 4503315, 4513608, 4523911, 4534224, 4544547, 4554880, 4565223, 4575576, 4585939, 4596312, 4606694, 4617087, 4627489, 4637902, 4648324, 4658756, 4669198, 4679649, 4690110, 4700581, 4711062, 4721552, 4732052, 4742561, 4753080, 4763609, 4774147, 4784694, 4795251, 4805817, 4816393, 4826978, 4837573, 4848177, 4858790, 4869413, 4880045, 4890686, 4901336, 4911995, 4922664, 4933342, 4944029, 4954725, 4965430, 4976144, 4986867, 4997599, 5008340, 5019090, 5029849, 5040617, 5051393, 5062179, 5072973, 5083776, 5094588, 5105409, 5116238, 5127076, 5137923, 5148778, 5159642, 5170515, 5181396, 5192285, 5203184, 5214090, 5225005, 5235929, 5246861, 5257801, 5268750, 5279706, 5290672, 5301645, 5312627, 5323617, 5334615, 5345622, 5356636, 5367659, 5378690, 5389728, 5400775, 5411830, 5422893, 5433964, 5445043, 5456129, 5467224, 5478326, 5489437, 5500555, 5511681, 5522814, 5533956, 5545105, 5556261, 5567426, 5578598, 5589777, 5600965, 5612159, 5623362, 5634571, 5645788, 5657013, 5668245, 5679485, 5690731, 5701986, 5713247, 5724516, 5735792, 5747075, 5758365, 5769663, 5780968, 5792280, 5803599, 5814925, 5826258, 5837598, 5848945, 5860299, 5871660, 5883028, 5894403, 5905784, 5917173, 5928568, 5939970, 5951379, 5962795, 5974217, 5985646, 5997081, 6008523, 6019972, 6031427, 6042889, 6054357, 6065832, 6077314, 6088801, 6100295, 6111796, 6123303, 6134816, 6146335, 6157861, 6169393, 6180931, 6192475, 6204026, 6215582, 6227145, 6238714, 6250288, 6261869, 6273456, 6285049, 6296648, 6308252, 6319863, 6331479, 6343101, 6354729, 6366363, 6378002, 6389648, 6401299, 6412955, 6424617, 6436285, 6447959, 6459638, 6471322, 6483012, 6494707, 6506408, 6518115, 6529826, 6541543, 6553266, 6564994, 6576727, 6588465, 6600208, 6611957, 6623711, 6635470, 6647234, 6659003, 6670777, 6682556, 6694341, 6706130, 6717924, 6729723, 6741527, 6753336, 6765149, 6776968, 6788791, 6800619, 6812452, 6824289, 6836131, 6847978, 6859829, 6871685, 6883546, 6895411, 6907280, 6919154, 6931033, 6942916, 6954803, 6966694, 6978590, 6990491, 7002395, 7014304, 7026217, 7038134, 7050055, 7061981, 7073910, 7085844, 7097782, 7109724, 7121669, 7133619, 7145573, 7157530, 7169492, 7181457, 7193426, 7205399, 7217376, 7229356, 7241340, 7253328, 7265320, 7277315, 7289313, 7301316, 7313322, 7325331, 7337344, 7349360, 7361380, 7373403, 7385430, 7397459, 7409493, 7421529, 7433569, 7445612, 7457658, 7469707, 7481760, 7493816, 7505874, 7517936, 7530001, 7542069, 7554140, 7566213, 7578290, 7590370, 7602452, 7614537, 7626625, 7638716, 7650810, 7662906, 7675005, 7687107, 7699211, 7711318, 7723428, 7735540, 7747655, 7759772, 7771891, 7784013, 7796138, 7808264, 7820394, 7832525, 7844659, 7856795, 7868933, 7881074, 7893216, 7905361, 7917508, 7929657, 7941808, 7953961, 7966117, 7978274, 7990433, 8002594, 8014757, 8026921, 8039088, 8051256, 8063427, 8075599, 8087772, 8099948, 8112125, 8124303, 8136484, 8148666, 8160849, 8173034, 8185220, 8197408, 8209598, 8221788, 8233980, 8246174, 8258369, 8270565, 8282762, 8294961, 8307161, 8319362, 8331564, 8343767, 8355971, 8368177, 8380383, 8392591, 8404799, 8417008, 8429219, 8441430, 8453642, 8465855, 8478068, 8490283, 8502498, 8514714, 8526931, 8539148, 8551366, 8563584, 8575804, 8588023, 8600243, 8612464, 8624685, 8636907, 8649129, 8661351, 8673574, 8685797, 8698020, 8710243, 8722467, 8734691, 8746915, 8759139, 8771364, 8783588, 8795813, 8808037, 8820262, 8832486, 8844711, 8856935, 8869160, 8881384, 8893608, 8905831, 8918055, 8930278, 8942501, 8954724, 8966946, 8979168, 8991390, 9003611, 9015831, 9028052, 9040271, 9052490, 9064709, 9076927, 9089144, 9101361, 9113577, 9125792, 9138006, 9150220, 9162433, 9174645, 9186856, 9199066, 9211276, 9223484, 9235692, 9247898, 9260103, 9272308, 9284511, 9296713, 9308914, 9321114, 9333313, 9345510, 9357706, 9369901, 9382094, 9394286, 9406477, 9418666, 9430854, 9443041, 9455226, 9467409, 9479591, 9491771, 9503950, 9516127, 9528302, 9540476, 9552648, 9564818, 9576987, 9589153, 9601318, 9613481, 9625642, 9637801, 9649958, 9662113, 9674266, 9686418, 9698567, 9710714, 9722858, 9735001, 9747142, 9759280, 9771416, 9783550, 9795681, 9807810, 9819937, 9832061, 9844184, 9856303, 9868420, 9880535, 9892647, 9904756, 9916863, 9928968, 9941069, 9953168, 9965265, 9977358, 9989449, 10001537, 10013623, 10025705, 10037785, 10049861, 10061935, 10074006, 10086074, 10098139, 10110200, 10122259, 10134315, 10146367, 10158417, 10170463, 10182506, 10194546, 10206582, 10218615, 10230645, 10242672, 10254695, 10266715, 10278731, 10290744, 10302753, 10314759, 10326761, 10338760, 10350755, 10362747, 10374734, 10386719, 10398699, 10410676, 10422649, 10434618, 10446583, 10458544, 10470502, 10482456, 10494405, 10506351, 10518293, 10530231, 10542164, 10554094, 10566019, 10577941, 10589858, 10601771, 10613680, 10625584, 10637484, 10649380, 10661272, 10673159, 10685042, 10696920, 10708794, 10720664, 10732529, 10744389, 10756245, 10768097, 10779943, 10791785, 10803623, 10815456, 10827284, 10839107, 10850925, 10862739, 10874548, 10886352, 10898151, 10909945, 10921734, 10933518, 10945298, 10957072, 10968841, 10980605, 10992364, 11004118, 11015867, 11027610, 11039348, 11051081, 11062809, 11074531, 11086248, 11097960, 11109666, 11121367, 11133063, 11144753, 11156437, 11168116, 11179789, 11191457, 11203120, 11214776, 11226427, 11238072, 11249712, 11261346, 11272974, 11284596, 11296212, 11307823, 11319427, 11331026, 11342619, 11354205, 11365786, 11377361, 11388930, 11400493, 11412049, 11423600, 11435144, 11446682, 11458214, 11469740, 11481259, 11492772, 11504279, 11515779, 11527273, 11538761, 11550242, 11561717, 11573186, 11584647, 11596103, 11607551, 11618994, 11630429, 11641858, 11653280, 11664696, 11676104, 11687507, 11698902, 11710290, 11721672, 11733047, 11744415, 11755776, 11767130, 11778477, 11789817, 11801150, 11812476, 11823795, 11835107, 11846412, 11857709, 11869000, 11880283, 11891559, 11902828, 11914089, 11925343, 11936590, 11947830, 11959062, 11970286, 11981503, 11992713, 12003915, 12015110, 12026297, 12037477, 12048649, 12059813, 12070970, 12082119, 12093261, 12104394, 12115520, 12126638, 12137748, 12148851, 12159945, 12171032, 12182111, 12193182, 12204245, 12215299, 12226346, 12237385, 12248416, 12259438, 12270453, 12281459, 12292458, 12303448, 12314429, 12325403, 12336368, 12347325, 12358274, 12369214, 12380146, 12391069, 12401985, 12412891, 12423789, 12434679, 12445560, 12456432, 12467296, 12478152, 12488998, 12499836, 12510666, 12521486, 12532298, 12543101, 12553896, 12564681, 12575458, 12586226, 12596985, 12607735, 12618476, 12629208, 12639931, 12650645, 12661350, 12672046, 12682733, 12693411, 12704079, 12714739, 12725389, 12736030, 12746662, 12757284, 12767898, 12778502, 12789096, 12799681, 12810257, 12820824, 12831381, 12841928, 12852466, 12862995, 12873514, 12884023, 12894523, 12905013, 12915493, 12925964, 12936426, 12946877, 12957319, 12967751, 12978173, 12988585, 12998988, 13009380, 13019763, 13030136, 13040499, 13050852, 13061195, 13071528, 13081851, 13092164, 13102467, 13112759, 13123042, 13133314, 13143576, 13153829, 13164070, 13174302, 13184523, 13194734, 13204935, 13215125, 13225305, 13235475, 13245634, 13255783, 13265921, 13276048, 13286166, 13296272, 13306369, 13316454, 13326529, 13336593, 13346647, 13356690, 13366722, 13376744, 13386755, 13396755, 13406744, 13416722, 13426690, 13436646, 13446592, 13456527, 13466451, 13476364, 13486266, 13496157, 13506037, 13515906, 13525764, 13535610, 13545446, 13555270, 13565084, 13574886, 13584677, 13594456, 13604225, 13613982, 13623727, 13633462, 13643185, 13652897, 13662597, 13672286, 13681963, 13691629, 13701284, 13710927, 13720558, 13730178, 13739786, 13749383, 13758968, 13768541, 13778103, 13787653, 13797191, 13806718, 13816233, 13825736, 13835227, 13844706, 13854174, 13863629, 13873073, 13882505, 13891925, 13901333, 13910729, 13920113, 13929485, 13938845, 13948192, 13957528, 13966852, 13976163, 13985462, 13994750, 14004024, 14013287, 14022538, 14031776, 14041002, 14050215, 14059416, 14068605, 14077782, 14086946, 14096097, 14105237, 14114363, 14123478, 14132579, 14141669, 14150745, 14159809, 14168861, 14177900, 14186926, 14195940, 14204940, 14213929, 14222904, 14231867, 14240817, 14249754, 14258679, 14267590, 14276489, 14285375, 14294248, 14303108, 14311955, 14320789, 14329610, 14338419, 14347214, 14355996, 14364765, 14373521, 14382264, 14390994, 14399711, 14408414, 14417104, 14425782, 14434446, 14443096, 14451734, 14460358, 14468969, 14477566, 14486150, 14494721, 14503279, 14511823, 14520353, 14528871, 14537374, 14545865, 14554341, 14562804, 14571254, 14579690, 14588113, 14596522, 14604917, 14613299, 14621667, 14630021, 14638362, 14646689, 14655002, 14663301, 14671587, 14679859, 14688117, 14696361, 14704591, 14712808, 14721010, 14729199, 14737374, 14745534, 14753681, 14761814, 14769933, 14778038, 14786128, 14794205, 14802268, 14810316, 14818350, 14826371, 14834377, 14842368, 14850346, 14858309, 14866259, 14874194, 14882114, 14890021, 14897913, 14905790, 14913654, 14921503, 14929337, 14937158, 14944964, 14952755, 14960532, 14968294, 14976042, 14983776, 14991494, 14999199, 15006889, 15014564, 15022224, 15029870, 15037502, 15045118, 15052720, 15060307, 15067880, 15075438, 15082981, 15090509, 15098023, 15105522, 15113006, 15120475, 15127929, 15135368, 15142793, 15150202, 15157597, 15164977, 15172341, 15179691, 15187026, 15194346, 15201650, 15208940, 15216215, 15223474, 15230719, 15237948, 15245162, 15252361, 15259545, 15266714, 15273867, 15281006, 15288129, 15295237, 15302329, 15309407, 15316468, 15323515, 15330546, 15337562, 15344563, 15351548, 15358518, 15365473, 15372412, 15379335, 15386243, 15393136, 15400013, 15406875, 15413721, 15420551, 15427366, 15434166, 15440949, 15447718, 15454470, 15461207, 15467928, 15474634, 15481324, 15487998, 15494657, 15501299, 15507926, 15514538, 15521133, 15527713, 15534277, 15540825, 15547357, 15553873, 15560374, 15566858, 15573327, 15579780, 15586216, 15592637, 15599042, 15605431, 15611804, 15618161, 15624502, 15630827, 15637135, 15643428, 15649705, 15655965, 15662210, 15668438, 15674650, 15680846, 15687026, 15693190, 15699337, 15705468, 15711583, 15717682, 15723765, 15729831, 15735881, 15741914, 15747932, 15753933, 15759917, 15765885, 15771837, 15777773, 15783692, 15789595, 15795481, 15801351, 15807204, 15813041, 15818861, 15824665, 15830453, 15836224, 15841978, 15847716, 15853437, 15859142, 15864830, 15870501, 15876156, 15881794, 15887416, 15893021, 15898609, 15904181, 15909735, 15915274, 15920795, 15926300, 15931788, 15937259, 15942713, 15948151, 15953571, 15958975, 15964363, 15969733, 15975086, 15980423, 15985743, 15991046, 15996331, 16001600, 16006853, 16012088, 16017306, 16022507, 16027691, 16032859, 16038009, 16043142, 16048258, 16053358, 16058440, 16063505, 16068553, 16073584, 16078598, 16083594, 16088574, 16093536, 16098482, 16103410, 16108321, 16113215, 16118091, 16122951, 16127793, 16132618, 16137426, 16142216, 16146990, 16151746, 16156484, 16161206, 16165910, 16170597, 16175266, 16179918, 16184553, 16189170, 16193770, 16198353, 16202918, 16207466, 16211997, 16216510, 16221005, 16225484, 16229944, 16234388, 16238813, 16243222, 16247613, 16251986, 16256342, 16260680, 16265001, 16269304, 16273589, 16277858, 16282108, 16286341, 16290556, 16294754, 16298934, 16303096, 16307241, 16311368, 16315478, 16319570, 16323644, 16327700, 16331739, 16335760, 16339764, 16343749, 16347717, 16351667, 16355600, 16359514, 16363411, 16367290, 16371152, 16374995, 16378821, 16382629, 16386419, 16390191, 16393946, 16397682, 16401401, 16405102, 16408785, 16412450, 16416097, 16419726, 16423337, 16426931, 16430506, 16434064, 16437604, 16441125, 16444629, 16448115, 16451582, 16455032, 16458464, 16461878, 16465274, 16468651, 16472011, 16475353, 16478676, 16481982, 16485270, 16488539, 16491790, 16495024, 16498239, 16501436, 16504615, 16507776, 16510919, 16514044, 16517150, 16520239, 16523309, 16526361, 16529395, 16532411, 16535408, 16538388, 16541349, 16544292, 16547217, 16550123, 16553012, 16555882, 16558734, 16561568, 16564383, 16567180, 16569959, 16572720, 16575462, 16578187, 16580892, 16583580, 16586249, 16588900, 16591533, 16594147, 16596743, 16599321, 16601880, 16604421, 16606944, 16609448, 16611934, 16614402, 16616851, 16619282, 16621694, 16624089, 16626464, 16628822, 16631160, 16633481, 16635783, 16638067, 16640332, 16642579, 16644807, 16647017, 16649208, 16651381, 16653536, 16655672, 16657790, 16659889, 16661970, 16664032, 16666076, 16668101, 16670108, 16672096, 16674066, 16676017, 16677949, 16679864, 16681759, 16683636, 16685495, 16687335, 16689157, 16690960, 16692744, 16694510, 16696257, 16697986, 16699696, 16701388, 16703061, 16704715, 16706351, 16707969, 16709567, 16711148, 16712709, 16714252, 16715776, 16717282, 16718769, 16720238, 16721688, 16723119, 16724531, 16725925, 16727301, 16728658, 16729996, 16731315, 16732616, 16733898, 16735162, 16736406, 16737633, 16738840, 16740029, 16741199, 16742351, 16743484, 16744598, 16745694, 16746770, 16747829, 16748868, 16749889, 16750891, 16751874, 16752839, 16753785, 16754713, 16755621, 16756511, 16757382, 16758235, 16759069, 16759884, 16760680, 16761458, 16762217, 16762957, 16763679, 16764382, 16765066, 16765731, 16766378, 16767006, 16767615, 16768205, 16768777, 16769330, 16769864, 16770380, 16770877, 16771355, 16771814, 16772255, 16772676, 16773079, 16773464, 16773829, 16774176, 16774504, 16774814, 16775104, 16775376, 16775629, 16775864, 16776080, 16776276, 16776455, 16776614, 16776755, 16776876, 16776980, 16777064, 16777130, 16777176, 16777205};
//global variables  


  //Needed for octave limitinf depinding on number of keyboards
  volatile uint8_t maxOct = 8;


  //Needed to send pressedAKeys to other keyboards
  volatile uint32_t pressedKeysMin = 0; // 12 bits for first pos 12 bits for second pos, 00000000
  volatile uint32_t pressedKeysMaj = 0; // 12 bits for third pos, 0000
  SemaphoreHandle_t pressedKeysArrayMutex;

  //Keyboard connection values
  volatile uint8_t west_detect;
  volatile uint8_t east_detect;
  
  //Needed to know the position of the keyboard in the chain
  volatile uint8_t pos = 0;

  // Role of keyboard  in chain
  #ifndef DISABLE_THREADS
    volatile bool receiver = false;
    volatile bool sender = false;
  #else
    #ifdef RECEIVER
      volatile bool receiver = true;
      volatile bool sender = false;
    #endif
    #ifdef SENDER
      volatile bool receiver = false;
      volatile bool sender = true;
    #endif
  #endif
  volatile bool singleton = true;

  //Needed for communication between keyboards
  uint8_t RX_Message[8]={0};
  SemaphoreHandle_t CAN_TX_Semaphore;
  QueueHandle_t msgInQ;
  QueueHandle_t msgOutQ;
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;

  //Receiver and sender variables
  volatile uint8_t octave = 4;
  volatile uint8_t volume = 4;
  volatile uint8_t wave = 0;
  volatile int32_t vout = 0;
  volatile uint32_t maj_s = 0;
  volatile uint32_t min_s = 0;
  volatile uint8_t vibrato = 0; // Ints from [0, 20]
  volatile uint8_t tremolo = 0; // Ints from [0, 20]
  volatile char currentnote;
  volatile char currentsharp;

  //ADSR values 
  volatile uint8_t A=1;
  volatile uint8_t D=1;
  volatile uint8_t S=1;
  volatile uint8_t R=1;

  //LFO Variables
  volatile uint32_t t_vib = 0;
  volatile uint32_t t_trem[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  //Pressed Keys
  volatile uint8_t keyArray[7];
  SemaphoreHandle_t keyArrayMutex;

//Pin definitions
  //Row select and enable
  const int RA0_PIN = D3;
  const int RA1_PIN = D6;
  const int RA2_PIN = D12;
  const int REN_PIN = A5;

  //Matrix input and output
  const int C0_PIN = A2;
  const int C1_PIN = D9;
  const int C2_PIN = A6;
  const int C3_PIN = D1;
  const int OUT_PIN = D11;

  //Audio analogue out
  const int OUTL_PIN = A4;
  const int OUTR_PIN = A3;

  //Joystick analogue in
  const int JOYY_PIN = A0;
  const int JOYX_PIN = A1;

  //Output multiplexer bits
  const int DEN_BIT = 3;
  const int DRST_BIT = 4;
  const int HKOW_BIT = 5;
  const int HKOE_BIT = 6;


//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

uint8_t readCols(){
  uint8_t c0 = digitalRead(C0_PIN);
  uint8_t c1 = digitalRead(C1_PIN);
  uint8_t c2 = digitalRead(C2_PIN);
  uint8_t c3 = digitalRead(C3_PIN);
  uint8_t result = c0 | (c1 << 1) | (c2 << 2) | (c3 << 3);
  return result;
}

void setRow(uint8_t rowIdx){
  digitalWrite(REN_PIN,LOW);
  digitalWrite(RA0_PIN, rowIdx & 0x01);
  digitalWrite(RA1_PIN, rowIdx & 0x02);
  digitalWrite(RA2_PIN, rowIdx & 0x04);
  digitalWrite(REN_PIN,HIGH);
}

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}


uint32_t LFOVibrato() {
  uint32_t time = t_vib++;
  uint32_t index = ((time * 4096 * vibrato) / 22000 * 128) % 4096;
  return LFOTable[index] + 8388608;
}
            
uint32_t LFOTremolo(uint8_t i) {
    uint32_t time = t_trem[i]++;
    uint32_t index = ((time * 4096 * tremolo) / 22000 * 128) % 4096;
    return LFOTable[index];
}

//Sets main keyboard position to 0 and send handshake if others are connected
void auto_detect(bool west, bool east){
  if(!west){ //most west module
    uint8_t locpos = 0;
    bool locreceiver = true;
    bool locsender = false;
    if(east){ // >=2 modules
      bool locSingleton = false;
      uint8_t TX_Message[8] = {'H',locpos,octave,volume,wave,0,0,0}; //Handshake, position, 0, 0, 0, 0, 0, 0
      xQueueSend(msgOutQ, TX_Message, 0);
      __atomic_store_n(&singleton, locSingleton,__ATOMIC_RELAXED);
    }
    else{
      uint8_t locMaxOct=8;
      uint8_t locSingleton = true;
      __atomic_store_n(&maxOct, locMaxOct,__ATOMIC_RELAXED);
      __atomic_store_n(&singleton, locSingleton,__ATOMIC_RELAXED);
    }
    __atomic_store_n(&pos, locpos,__ATOMIC_RELAXED);
    __atomic_store_n(&receiver, locreceiver,__ATOMIC_RELAXED);
    __atomic_store_n(&sender, locsender,__ATOMIC_RELAXED);
  }
  else{
    bool locsender = true; //either east or middle 2/3 modules
    bool locreceiver = false;
    bool locsingleton = false;
    __atomic_store_n(&receiver, locreceiver,__ATOMIC_RELAXED);
    __atomic_store_n(&singleton, locsingleton,__ATOMIC_RELAXED);
    __atomic_store_n(&sender, locsender,__ATOMIC_RELAXED);
  }
}


void sampleISR() {
  #ifdef TEST_SAMPLEISR
  static uint32_t readCtr = 0;
    if (readCtr == SAMPLE_BUFFER_SIZE) {
      readCtr = 0;
      writeBuffer1 = !writeBuffer1;
      xSemaphoreGiveFromISR(sampleBufferMutex, NULL);
      }
	
    if (writeBuffer1)
      analogWrite(OUTR_PIN, sampleBuffer0[readCtr++]);
    else
      analogWrite(OUTR_PIN, sampleBuffer1[readCtr++]);
  #else
    static uint32_t readCtr = 0;
    if (readCtr == 128) {
      readCtr = 0;
      writeBuffer1 = !writeBuffer1;
      xSemaphoreGiveFromISR(sampleBufferMutex, NULL);
      }
	
    if (writeBuffer1)
      analogWrite(OUTR_PIN, sampleBuffer0[readCtr++]);
    else
      analogWrite(OUTR_PIN, sampleBuffer1[readCtr++]);
  #endif

}

void ISRTask(void *pvParameters) {
  #ifndef TEST_ISRTASK
  uint32_t scale_vibrato = 0;
  uint32_t scale_tremolo[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  uint64_t real_step[36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  uint64_t pressedKeysArray = 0;
  uint8_t baseoct;
  uint8_t localvol;
  uint8_t localwave;
  uint8_t localtremolo;
  uint8_t localvibrato;
  while (1) {
    bool  vibrato_enable = false;
    uint8_t localvolume = volume;
    uint8_t localwave = wave;
    uint8_t localtremolo = tremolo;
    uint8_t localvibrato = vibrato;
    if(receiver){
      pressedKeysArray = ((((uint64_t)pressedKeysMaj) << 24) | pressedKeysMin);
      baseoct = octave - 4;
    }
    else if(sender){
      pressedKeysArray = ((uint64_t)maj_s) << 24 | min_s;
      baseoct = octave - pos - 4;
    }  
    for (uint8_t i=0; i<36; i++){
        if ((pressedKeysArray >> i) & 0x1){
          int8_t shift = baseoct + (uint8_t)(i/12);
          uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
          if (!vibrato_enable){
            scale_vibrato = LFOVibrato();
            vibrato_enable = true;
          }
          if (localvibrato){
            real_step[i] = (uint64_t((uint64_t)step * (uint64_t)scale_vibrato) >> 24);
          }
          else {
            real_step[i] = step;
          }
          if (localtremolo){
            scale_tremolo[i] = LFOTremolo(i);
          }
        }
        else{
          if (!vibrato_enable){
            scale_vibrato = 0;
          }
          scale_tremolo[i] = 0;
        }
    }
    xSemaphoreTake(sampleBufferMutex, portMAX_DELAY);
      for (uint32_t writeCtr = 0; writeCtr < 128; writeCtr++) {
          static uint32_t phaseAcc[36] = {0};
          static int increase[36] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
          int32_t polyphony_vout = 0;
          switch (wave){
              case 0 :  //Sawtooth
                for (uint8_t i=0; i<36;i++){
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step[i];
                    int32_t tmp_Vout = ((phaseAcc[i] >> 24)  - 128);
                    if (tremolo){
                      int32_t Vout = (int64_t(scale_tremolo[i] * tmp_Vout) >> 24);
                      polyphony_vout += Vout;
                    }
                    else polyphony_vout += tmp_Vout;
                  }
                }
                break;
              case 1 : //Triangle
                for (uint8_t i=0; i<36;i++){
                  if((pressedKeysArray >> i) & 0x1){
                        phaseAcc[i] += real_step[i];
                        if (phaseAcc[i] < 2147483648) {
                              int32_t tmp_Vout = ((phaseAcc[i] << 1) >> 24) - 128;
                              if (tremolo){
                                  int32_t Vout = (int64_t(scale_tremolo[i] * tmp_Vout) >> 24);
                                  polyphony_vout += Vout;
                              }
                              else polyphony_vout += tmp_Vout;
                        } 
                        else {
                              uint64_t tmp = (-(phaseAcc[i] << 1)) + (8589934591);
                              int32_t tmp_Vout = (((tmp >> 24)) << 32)- 128;
                              int32_t Vout = ((scale_tremolo[i] * tmp_Vout) >> 24);
                              if (tremolo){
                                  int32_t Vout = (int64_t(scale_tremolo[i] * tmp_Vout) >> 24);
                                  polyphony_vout += Vout;
                              }
                              else polyphony_vout += tmp_Vout;
                        }
                    }
                }
                break;
              case 2 : //Square
                for (uint8_t i=0; i<36;i++){
                  if((pressedKeysArray >> i) & 0x1){
                        phaseAcc[i] += real_step[i];
                        if (phaseAcc[i] < 2147483648) {
                            int32_t tmp_Vout = 127;
                            if (tremolo){
                              int32_t Vout = (int64_t(scale_tremolo[i] * tmp_Vout) >> 24);
                              polyphony_vout += Vout;
                            }
                            else polyphony_vout += tmp_Vout;
                        } 
                        else {
                            int32_t tmp_Vout = -128;
                            if (tremolo){
                              int32_t Vout = (int64_t(scale_tremolo[i] * tmp_Vout) >> 24);
                              polyphony_vout += Vout;
                            }
                            else polyphony_vout += tmp_Vout;
                        }
                  } 
                }
                break;
              case 3 : //Sine
                for (uint8_t i=0; i<36;i++){  
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step[i];
                    int32_t tmp_Vout = ((sineTable[phaseAcc[i] >> 22] >> 24) - 128);
                    if (tremolo){
                      int32_t Vout = (int64_t(scale_tremolo[i] * tmp_Vout) >> 24);
                      polyphony_vout += Vout;
                    }
                    else {
                      polyphony_vout += tmp_Vout;;
                    }
                  }
                }
                break;
          }
          polyphony_vout = polyphony_vout >> (8 - localvolume);
          polyphony_vout = max(-128, min(127, (int)polyphony_vout));
          if (writeBuffer1)
            sampleBuffer1[writeCtr] = polyphony_vout + 128;
          else
            sampleBuffer0[writeCtr] = polyphony_vout + 128;
    }
  }
  #else
      uint64_t pressedKeysArray = 0;
      uint8_t baseoct;
      uint8_t vol;
      uint8_t wave;
      xSemaphoreTake(sampleBufferMutex, portMAX_DELAY);
      for (uint32_t writeCtr = 0; writeCtr < SAMPLE_BUFFER_SIZE; writeCtr++) {
        if(receiver){
          pressedKeysArray = ((((uint64_t)pressedKeysMaj) << 24) | pressedKeysMin);
          baseoct = octave_r - 4;
          vol = volume_r;
          wave = wave_r;
        }
        else if(sender){
          pressedKeysArray = ((uint64_t)min_s) << 24 | maj_s;
          baseoct = octave_s - pos - 4;
          vol = volume_s;
          wave = wave_s;
        }
          static uint32_t phaseAcc[36] = {0};
          static int increase[36] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
          int32_t polyphony_vout = 0;
          switch (wave){
              case 0 :  //Sawtooth
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += step;
                    int32_t Vout = ((phaseAcc[i] >> 24) - 128);
                    polyphony_vout += Vout;
                      }
                      }
                break;
              case 1 : //Triangle
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    if (phaseAcc[i] < 2147483648) {
                        int32_t Vout = ((2147483648 << 1) >> 24) - 128;
                        polyphony_vout += Vout;
                    } else {
                        uint64_t tmp = (-(2147483648 << 1)) + (8589934591);
                        int32_t Vout = ((tmp >> 24) - 128) << 32;
                        polyphony_vout += Vout;
                    }
                      }
                      }
                break;
              case 2 : //Square
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    if (phaseAcc[i] < 2147483648) {
                        int32_t Vout = 127;
                        polyphony_vout += Vout;
                    } else {
                        int32_t Vout = -128;
                        polyphony_vout += Vout;
                    }
                  }
                }
                break;
              case 3 : //Sine
                for (uint8_t i=0; i<36;i++){
                  int8_t shift = baseoct + (uint8_t)(i/12);
                  uint32_t step = shift>0 ? stepSizes[i%12]<<shift : stepSizes[i%12]>>-shift;
                  if((pressedKeysArray >> i) & 0x1){
                    phaseAcc[i] += real_step;
                    int32_t Vout = (sineTable[phaseAcc[i] >> 22] >> 24) - 128;
                    polyphony_vout += Vout;
                  }
                }
                break;
          }
          polyphony_vout = polyphony_vout >> (8 - vol);
          polyphony_vout = max(-128, min(127, (int)polyphony_vout));
            uint32_t lol = polyphony_vout;//Calculate one sample
            if (writeBuffer1)
              sampleBuffer1[writeCtr] = lol + 128;
            else
              sampleBuffer0[writeCtr] = lol + 128;
            
            vout_r = polyphony_vout;
      }
    #endif
}

void receiverTask(){
  uint32_t localpressedKeysMin = pressedKeysMin;
  uint16_t localpressedKeysMaj = pressedKeysMaj;

  //Received a release message
  if (RX_Message[0] == 'R'){
      if(RX_Message[3] == 1){
        localpressedKeysMin &= ~(1 << (12+RX_Message[2]));
        __atomic_store_n(&pressedKeysMin, localpressedKeysMin,__ATOMIC_RELAXED);

      }
      else if(RX_Message[3] == 2){
        localpressedKeysMaj &= ~(1 << RX_Message[2]);
        __atomic_store_n(&pressedKeysMaj, localpressedKeysMaj,__ATOMIC_RELAXED);

      }
  }
  //Received a press message
  else if (RX_Message[0] == 'P'){
      if(RX_Message[3] == 1){
        localpressedKeysMin |= (1 << (12+RX_Message[2]));
        __atomic_store_n(&pressedKeysMin, localpressedKeysMin,__ATOMIC_RELAXED);
      }
      else if(RX_Message[3] == 2){
        localpressedKeysMaj |= (1 << RX_Message[2]);
        __atomic_store_n(&pressedKeysMaj, localpressedKeysMaj,__ATOMIC_RELAXED);
      }
  }
  //Message to set max octave
  else if (RX_Message[0] == 'M'){
      uint8_t localmaxOct = 8-RX_Message[1];
      __atomic_store_n(&maxOct, localmaxOct,__ATOMIC_RELAXED);
  }

  //Received LFO variables
  else if (RX_Message[0] == 'L'){
    uint8_t localtremolo = RX_Message[1];
    uint8_t localvibrato = RX_Message[2];
    __atomic_store_n(&tremolo, localtremolo,__ATOMIC_RELAXED);
    __atomic_store_n(&vibrato, localvibrato,__ATOMIC_RELAXED);
  }
}

void senderTask(){
  //Message received is handshake 
  if (RX_Message[0] == 'H'){
    uint8_t locpos = RX_Message[1] + 1;
    uint8_t lococtave = RX_Message[2] + 1;
    uint8_t locvolume = RX_Message[3];
    xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
      for (uint8_t i=5; i<7; i++) {
        setRow(i);
        digitalWrite(OUTR_PIN,1);         //Enable selected row
        digitalWrite(REN_PIN,1);          //Enable selected row
        delayMicroseconds(3);             //Wait for column inputs to stabilise
        keyArray[i] = readCols();         //Read column inputs
        digitalWrite(REN_PIN,0);          //Disable selected row
      }
      uint8_t west_detect = ((keyArray[5]&0x08)>>3)^0x01;
      uint8_t east_detect = ((keyArray[6]&0x08)>>3)^0x01;
    xSemaphoreGive(keyArrayMutex);

    //Send to other keyboards connected to get their position
    if(east_detect){
      uint8_t TX_Message[8] = {'H',locpos, lococtave, locvolume, 0, 0, 0, 0};
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
    else{
      uint8_t TX_Message[8] = {'M',locpos, 0, 0, 0, 0, 0, 0};
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
    __atomic_store_n(&pos, locpos, __ATOMIC_RELAXED);
    __atomic_store_n(&octave, lococtave, __ATOMIC_RELAXED);
    __atomic_store_n(&volume, locvolume, __ATOMIC_RELAXED);
  }
  //Info from the knobs received
  else if (RX_Message[0] == 'K'){
    uint8_t lococtave_s = RX_Message[2] + pos;
    uint8_t locvolume_s = RX_Message[3];
    uint8_t locwave_s = RX_Message[4];
    uint8_t loctremolo_s = RX_Message[5];
    uint8_t locvibrato_s = RX_Message[6];
    __atomic_store_n(&octave, lococtave_s, __ATOMIC_RELAXED);
    __atomic_store_n(&volume, locvolume_s, __ATOMIC_RELAXED);
    __atomic_store_n(&wave, locwave_s, __ATOMIC_RELAXED);
    __atomic_store_n(&tremolo, loctremolo_s, __ATOMIC_RELAXED);
    __atomic_store_n(&vibrato, locvibrato_s, __ATOMIC_RELAXED);
  }
  //Voltage message to know what notes to play
  else if (RX_Message[0] == 'V'){
    uint32_t localmin = RX_Message[3]<<16 | RX_Message[2]<<8 | RX_Message[1];
    uint16_t localmaj = RX_Message[5]<<8 | RX_Message[4];
    __atomic_store_n(&maj_s, localmaj, __ATOMIC_RELAXED);
    __atomic_store_n(&min_s, localmin, __ATOMIC_RELAXED);
  }
}


void decodeTask(void * pvParameters){
  #ifndef TEST_DECODE
  while(1){
  xQueueReceive(msgInQ, RX_Message, portMAX_DELAY);
    if(receiver){
      receiverTask();
    }
    else if(sender){
      senderTask();
    }
  }
  #else
  for(int i = 0; i<36; i++){
    xQueueReceive(msgInQ, RX_Message, portMAX_DELAY);
    if(receiver){
      receiverTask();
    }
    else if(sender){
      senderTask();
    }
  }
  #endif
  } 



void CAN_RX_ISR (void) {
  #ifndef TEST_CAN_RX_ISR
    uint8_t RX_Message_ISR[8];
    uint32_t ID;
    CAN_RX(ID, RX_Message_ISR);
    xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
  #else
    uint8_t RX_Message_ISR[8];
	  uint32_t ID;
    CAN_RX(ID, RX_Message_ISR);
    xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
  #endif
}

void CAN_TX_ISR (void) {
  xSemaphoreGiveFromISR(CAN_TX_Semaphore, NULL);
}


void CAN_TX_Task (void * pvParameters) {
    #ifndef TEST_CAN_TX
      uint8_t msgOut[8];
      while (1) {
        xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
        xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
        CAN_TX(0x123, msgOut);
      }
    #else
      uint8_t msgOut[8];
      for(int i = 0; i<3; i++){
        xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
        xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
        CAN_TX(0x123, msgOut);
      }
    #endif 
  }


void sendSoundTask (void * pvParameters) {
  #ifndef TEST_SEND_SOUND
  const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
  uint64_t localPressedKeys;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  uint64_t prevPressed = 0;

  while(1){
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
    localPressedKeys = ((uint64_t)pressedKeysMaj) << 24 | pressedKeysMin;
    if(receiver && !singleton && localPressedKeys != prevPressed){
        uint8_t TX_Message[8] = {'V', (pressedKeysMin & 0xFF), (pressedKeysMin>>8 & 0xFF), (pressedKeysMin>>16 & 0xFF), (pressedKeysMaj & 0xFF), (pressedKeysMaj>>8 & 0xFF), 0, 0};
        xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
    prevPressed = localPressedKeys;
  }
  #else
    uint64_t localPressedKeys;
    localPressedKeys = ((uint64_t)pressedKeysMaj) << 24 | pressedKeysMin;
    if(receiver && !singleton && localPressedKeys != prevPressed){
      uint8_t TX_Message[8] = {'V', (pressedKeysMin & 0xFF), (pressedKeysMin>>8 & 0xFF), (pressedKeysMin>>16 & 0xFF), (pressedKeysMaj & 0xFF), (pressedKeysMaj>>8 & 0xFF), 0, 0};
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
    else {
    }
    prevPressed = localPressedKeys;
  #endif
}

void scanKeysTask(void * pvParameters) {
   #ifndef TEST_SCAN_KEYS
    const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
    TickType_t xLastWakeTime = xTaskGetTickCount();
    // Classes initialisations and variables needed for task
    Knob Knob3(0,4);
    Knob Knob2(0,4);
    Knob Knob1 (0,0);
    Knob KnobT (0,0);
    Knob KnobV (0,0);
    Knob KnobA (0,1);
    Knob KnobD (0,1);
    Knob KnobS (0,1);
    Knob KnobR (0,1);
    uint16_t prevPressedKeys = 0;
    uint16_t pressedKeys = 0;
    uint8_t TX_Message[8] = {0};
    uint32_t reset[36] = {0};
    //Needed so that we only send message if something changes
    uint8_t prevOctave=4 ;
    uint8_t prevVolume=4;
    uint8_t prevWave = 0;
    uint8_t prevMaxOct = 0;
    uint8_t prevVibrato = 0;
    uint8_t prevTremolo = 0;
    uint32_t localstepsize = 0;
    bool start = true;

    while(1){
         vTaskDelayUntil(&xLastWakeTime, xFrequency);
          char localnote = currentnote;
          char localsharp = currentsharp;
          uint8_t localvolume = volume;
          uint8_t localoctave = octave;
          uint8_t localwave = wave;
          uint8_t localTremolo = tremolo;
          uint8_t localVibrato = vibrato;
          uint8_t localpos = pos;
          uint32_t localpressedKeysMin = pressedKeysMin;
          uint32_t localpressedKeysMaj = pressedKeysMaj;
          uint8_t localkeyArray[7] = {0};
          uint32_t localA = A;
          uint32_t localD = D;
          uint32_t localS = S;
          uint32_t localR = R;
        //Get keys info
        for (uint8_t i = 0; i < 7; i++){
          setRow(i);
          delayMicroseconds(3);
          uint8_t val = readCols();
          localkeyArray[i] = val;
        }

        xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
          memcpy((void*)keyArray, localkeyArray, sizeof(localkeyArray));
        xSemaphoreGive(keyArrayMutex);

       //Initializing our local variables
        pressedKeys = localkeyArray[0] | (localkeyArray[1]<<4) | (localkeyArray[2]<<8);
        uint8_t localwest_detect = ((localkeyArray[5]&0x08)>>3)^0x01;
        uint8_t localeast_detect = ((localkeyArray[6]&0x08)>>3)^0x01;

        //If the keyboards didn't get power at the same time run autodetect again to make sure we get a correct outcome
        if (start){
          auto_detect(localwest_detect, localeast_detect);
          start = false;
        }

        //If a keyboard is connected or disconnected run autodetect again
        if (localwest_detect != west_detect){ //west detect has changed
              if(receiver){
                  localpressedKeysMin = 0;
                  __atomic_store_n(&pressedKeysMin, localpressedKeysMin, __ATOMIC_RELAXED);
                  __atomic_store_n(&pressedKeysMaj, 0x0000, __ATOMIC_RELAXED);
              }
              auto_detect(localwest_detect, localeast_detect);
              __atomic_store_n(&west_detect, localwest_detect, __ATOMIC_RELAXED);
        }
        if (localeast_detect != east_detect){
              if(receiver){
                localpressedKeysMin= 0;
                __atomic_store_n(&pressedKeysMin, localpressedKeysMin, __ATOMIC_RELAXED);
                __atomic_store_n(&pressedKeysMaj, 0x0000, __ATOMIC_RELAXED);
              }
              auto_detect(localwest_detect, localeast_detect);
              if(sender){
                uint8_t TX_Message[8] = {'H',localpos, localoctave, localvolume, 0, 0, 0, 0};
                xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
              }
              __atomic_store_n(&east_detect, localeast_detect, __ATOMIC_RELAXED);
        }

        //Set limits for knobs 
        if (prevMaxOct != maxOct){
              Knob3.SetLimits(0,8);
              Knob2.SetLimits(0,maxOct);
              Knob1.SetLimits(0,3);
              KnobT.SetLimits(0,20);
              KnobV.SetLimits(0,20);
              KnobA.SetLimits(0,255);
              KnobD.SetLimits(0,255);
              KnobS.SetLimits(0,255);
              KnobR.SetLimits(0,255);
        }

        if(receiver){
          uint8_t currentBA_3 = localkeyArray[3] & 0x03; //00000011 select last 2 bits
          uint8_t currentBA_2 = (localkeyArray[3] & 0x0C)>>2; //00001100 select 2 bits before last 2 bits and shift
          uint8_t currentBA_1 = localkeyArray[4] & 0x03; //00000011 select last 2 bits
          Knob3.UpdateRotateVal(currentBA_3);
          Knob2.UpdateRotateVal(currentBA_2);
          Knob1.UpdateRotateVal(currentBA_1);
          localvolume = Knob3.CurRotVal();
          localoctave = Knob2.CurRotVal();
          localwave = Knob1.CurRotVal();

          //Send Knob info to other modules if something changed
          if (!singleton && (localoctave != prevOctave || localvolume != prevVolume || localwave != prevWave)){
            TX_Message[0] = 'K';
            TX_Message[2] = localoctave;
            TX_Message[3] = localvolume;
            TX_Message[4] = localwave;
            TX_Message[5] = tremolo;
            TX_Message[6] = vibrato;
            __atomic_store_n(&volume, localvolume, __ATOMIC_RELAXED);
            __atomic_store_n(&octave, localoctave, __ATOMIC_RELAXED);
            __atomic_store_n(&wave, localwave, __ATOMIC_RELAXED);
            xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);

          }
        }
        if (sender){
          if (pos == 1){
            uint8_t currentBA_3 = localkeyArray[3] & 0x03; //00000011 select last 2 bits
            uint8_t currentBA_2 = (localkeyArray[3] & 0x0C)>>2; //00001100 select 2 bits before last 2 bits and shift
            KnobT.UpdateRotateVal(currentBA_3);
            KnobV.UpdateRotateVal(currentBA_2);
            localVibrato = KnobV.CurRotVal();
            localTremolo = KnobT.CurRotVal();
            //Send Knob info to other modules if something changed
            if (localVibrato != prevVibrato || localTremolo != prevTremolo){
              TX_Message[0] = 'L';
              TX_Message[1] = localTremolo;
              TX_Message[2] = localVibrato;
              xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
            }
          }
          if (pos == 2){
              uint8_t currBA_3 = localkeyArray[3] & 0x03; //00000011 select last 2 bits
              uint8_t currBA_2 = (localkeyArray[3] & 0x0C)>>2; //00001100 select 2 bits before last 2 bits and shift
              uint8_t currBA_1 = localkeyArray[4] & 0x03; //00000011 select last 2 bits
              uint8_t currBA_0 = (localkeyArray[4] & 0x0C)>>2; //00001100 select 2 bits before last 2 bits and shift
              KnobR.UpdateRotateVal(currBA_3);
              KnobS.UpdateRotateVal(currBA_2);
              KnobD.UpdateRotateVal(currBA_1);
              KnobA.UpdateRotateVal(currBA_0);
              localR = KnobR.CurRotVal();
              localS = KnobS.CurRotVal();
              localD = KnobD.CurRotVal();
              localA = KnobA.CurRotVal();
            }
        }
        prevWave = localwave;
        prevOctave = localoctave;
        prevVolume = localvolume;
        prevVibrato = localVibrato;
        prevTremolo = localTremolo;

        //Code for getting cords 
        //Variables needed for getting cords
        uint16_t onehot = pressedKeys^0xFFF;
        uint16_t prevPressedkeysCopy = prevPressedKeys;
        uint16_t onehotCopy = onehot;
        uint8_t p_idx_array[12] = {12,12,12,12,12,12,12,12,12,12,12,12};
        uint8_t r_idx_array[12] = {12,12,12,12,12,12,12,12,12,12,12,12};
        uint8_t cur_idx;
        uint8_t prev_idx;
        uint8_t p_count = 0;
        uint8_t r_count = 0;
        bool pressed =  false;
        bool released = false;


        while (onehotCopy | prevPressedkeysCopy){
          //Checking if there are keys pressed or released
          if  (onehotCopy == 0){
              cur_idx = 12;
              prev_idx = __builtin_ctz(prevPressedkeysCopy);
          }
          else if (prevPressedkeysCopy == 0){
              prev_idx = 12;
              cur_idx = __builtin_ctz(onehotCopy);
          }
          else{
              cur_idx = __builtin_ctz(onehotCopy);
              prev_idx = __builtin_ctz(prevPressedkeysCopy);
          }
        
          //Checking if the keys pressed or deleted have previously been detected
          if (prev_idx==cur_idx){
              onehotCopy &= ~(1<<cur_idx);
              prevPressedkeysCopy &= ~(1<<cur_idx);
          }
          else if (prev_idx>cur_idx){
              pressed = true;
              p_idx_array[p_count] = cur_idx;
              onehotCopy &= ~(1<<cur_idx);
              p_count++;
          }
          else{
              released = true;
              r_idx_array[r_count] = prev_idx;
              prevPressedkeysCopy &= ~(1<<prev_idx);
              r_count++;
          }

        }
        if (pressed){
                //Used for printing purposes
              localnote = notes[p_idx_array[0]];
              localsharp = sharps[p_idx_array[0]];
              if(receiver){
                  for (uint8_t i = 0; i < 12; i++){
                    if (p_idx_array[i] != 12) {
                      localpressedKeysMin |= (1<<p_idx_array[i]);
                    }
                    else{
                      break;
                    }
                  }
              }
            else if(sender){
              for (uint8_t i = 0; i < 12; i++){
                //Send to receiver if key pressed
                if (p_idx_array[i] != 12) {
                  TX_Message[0] = 'P';
                  TX_Message[1] = localoctave;
                  TX_Message[2] = p_idx_array[i];
                  TX_Message[3] = pos;   
                  xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
                }
                else{
                  break;
                }
              }
            }
      }
      if (released){
            if(!onehot){ //if no keys are pressed
                localnote = ' ';
                localsharp = ' ';
            }
            else if (!pressed){
                uint8_t curr_idx = __builtin_ctz(onehot);
                localnote = notes[curr_idx];
                localsharp = sharps[curr_idx];
            }
            if(receiver){
              for (uint8_t i = 0; i < 12; i++){
                if (r_idx_array[i] != 12) {
                  localpressedKeysMin &= ~(1<<r_idx_array[i]);
                }
                else{
                  break;
                }
              }
            }
            else if(sender){
                for (uint8_t i = 0; i < 12; i++){
                  //Send released keys to receiver
                  if (r_idx_array[i] != 12) {
                    TX_Message[0] = 'R';
                    TX_Message[1] = localoctave;
                    TX_Message[2] = r_idx_array[i];
                    TX_Message[3] = pos;        
                    xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
                  }
                  else{
                    break;
                  }
                }
            }
      }
      prevPressedKeys = onehot;
      prevMaxOct = maxOct;
      // Serial.printf("PressedKeys %hu\n",pressedKeysArray);
      // Serial.printf("Keys %hu\n",localpressedKeysArrayMaj);
      if (sender){
        if (pos == 1){
          __atomic_store_n(&tremolo, localTremolo, __ATOMIC_RELAXED);
          __atomic_store_n(&vibrato, localVibrato, __ATOMIC_RELAXED);

        }
        if (pos == 2){
          __atomic_store_n(&A, localA, __ATOMIC_RELAXED);
          __atomic_store_n(&D, localD, __ATOMIC_RELAXED);
          __atomic_store_n(&S, localS, __ATOMIC_RELAXED);
          __atomic_store_n(&R, localR, __ATOMIC_RELAXED);
        }
      }
      if (receiver){
        __atomic_store_n(&pressedKeysMin, localpressedKeysMin, __ATOMIC_RELAXED);
      }
      __atomic_store_n(&currentnote, localnote, __ATOMIC_RELAXED);
      __atomic_store_n(&currentsharp, localsharp, __ATOMIC_RELAXED);
  }
  #else
    uint8_t localprevkey = -1;
    uint8_t TX_Message[8] = {0};
    uint32_t localstepsize = 0;
    char localnote = 0;
    char localsharp = 0;
    uint8_t localvolume_knob3 = volume_r;
    uint8_t localoctave_knob2 = octave_r;
    Knob Knob3(0);
    Knob Knob2(0);
    for (uint8_t idx = 0; idx < 12; idx++){
      for (uint8_t i = 0; i < 4; i++){
          setRow(i);
          delayMicroseconds(3);
          uint8_t val = readCols();
          xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
          keyArray[i] = val;
          xSemaphoreGive(keyArrayMutex);
          uint8_t onehot = val^0x0F; //00001111 invert last 4 bits
          if (i < 3){
            for(int j = 0; j<4;j++){
              if (onehot & (1<<j)){
                uint8_t idx = 4*i + j;
                //u8g2.print(idx,DEC);
                int8_t shift = localoctave_knob2 - 4;
                if(shift > 0){
                  localstepsize = stepSizes[idx]<<shift;
                }
                else{
                  localstepsize = stepSizes[idx]>>-shift;
                }
                localnote = notes[idx];
                localsharp = sharps[idx];
                localprevkey = idx;
              }
            }
          }
          else{
            uint8_t currentBA_3 = val & 0x03; //00000011 select last 2 bits
            uint8_t currentBA_2 = (val & 0x0C)>>2; //000011 select last 2 bits
            Knob3.UpdateRotateVal(currentBA_3);
            Knob2.UpdateRotateVal(currentBA_2);
            localvolume_r = Knob3.CurRotVal();
            localoctave_knob2 = Knob2.CurRotVal();  
          }
        }
      localstepsize = stepSizes[idx];
      localnote = notes[idx];
      localsharp = sharps[idx];
      localprevkey = idx;
      localvolume_r = 0;
      localoctave_r = 0;

      TX_Message[0] = 'P';
      TX_Message[1] = 4;
      TX_Message[2] = localprevkey;
      
      xQueueSend( msgOutQ, TX_Message, portMAX_DELAY);
    __atomic_store_n(&mastercurrentStepSize, localstepsize, __ATOMIC_RELAXED);
    __atomic_store_n(&currentnote, localnote, __ATOMIC_RELAXED);
    __atomic_store_n(&currentsharp, localsharp, __ATOMIC_RELAXED);
    __atomic_store_n(&volume_knob3, localvolume_knob3, __ATOMIC_RELAXED);
    __atomic_store_n(&octave_knob2, localoctave_knob2, __ATOMIC_RELAXED);
  }
  #endif
}

void displayUpdateTask(void * pvParameters){
  #ifndef TEST_DISPLAY_UPDATE
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  while(1){
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
    u8g2.clearBuffer();         // clear the internal memory
    u8g2.setFont(u8g2_font_courB08_tr); // choose a suitable font
    if (receiver){
      uint8_t x, y;
      u8g2.drawStr(80,8,"Wave(K2):");
      u8g2.drawStr(2, 15,"Vol(K4):");
      u8g2.drawStr(2, 23,"Oct(K3):");
      u8g2.drawStr(2, 6,"Note:");
      u8g2.drawStr(2, 32, "K1");  
      u8g2.drawStr(39, 32, "K2");
      u8g2.drawStr(80, 32, "K3");
      u8g2.drawStr(116, 32, "K4");
      u8g2.setCursor(2,2);
      switch (wave){
        case 0:
              u8g2.drawLine(82,20,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,118,10);
              u8g2.drawLine(118,10,118,20);
              break;
        case 1:
              u8g2.drawLine(82,20,90,10);
              u8g2.drawLine(90,10,98,20);
              u8g2.drawLine(98,20,106,10);
              u8g2.drawLine(106,10,114,20);
              break;
        case 2:
              u8g2.drawLine(82,20,90,20);
              u8g2.drawLine(90,20,90,10);
              u8g2.drawLine(90,10,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,110,20);
              u8g2.drawLine(110,20,110,10);
              u8g2.drawLine(110,10,120,10);
              u8g2.drawLine(120,10,120,20);
              break;
        case 3: 
              for (x = 0; x < 40; x++) {
                y = 32 + 6 * sin(2 * PI * x / 40);
                u8g2.drawPixel(x+80, y-15);
              }
              break;
      }
      u8g2.setCursor(32,6);
      u8g2.print(currentnote);
      u8g2.print(currentsharp);
      u8g2.setCursor(50,16);
      if (volume==8){
        u8g2.drawStr(58, 15,"max");
      }
      else if (volume==0){
          u8g2.drawStr(58, 15,"min");
      }
      u8g2.print(volume,DEC);
      u8g2.setCursor(50,24);
      if (octave==8){
        u8g2.drawStr(58, 23,"max");
      }
      else if (octave==0){
          u8g2.drawStr(58, 23,"min");
      }
      u8g2.print(octave,DEC);
    }

    if (sender){
          u8g2.drawStr(2, 15,"Oct:");
          u8g2.drawStr(2, 6,"Note:");
          u8g2.setCursor(32,6);
          u8g2.print(currentnote);
          u8g2.print(currentsharp);
          u8g2.setCursor(25,15);
          u8g2.print(octave,DEC);
          if (octave==8){
              u8g2.drawStr(33, 15,"max");
          }
          else if (octave==0){
              u8g2.drawStr(33, 15,"min");
          }
      if (pos == 1){
          u8g2.drawStr(2, 32, "K1");  
          u8g2.drawStr(39, 32, "K2");
          u8g2.drawStr(80, 32, "K3");
          u8g2.drawStr(116, 32, "K4");
          u8g2.drawStr(61, 10,"Vib(K3):");
          u8g2.drawStr(61, 19,"Trem(K4):");
          u8g2.setCursor(115,10);
          u8g2.print(vibrato,DEC);
          u8g2.setCursor(115,19);
          u8g2.print(tremolo,DEC);
      }
      if (pos == 2){
          u8g2.drawStr(2, 32,"A");
          u8g2.drawStr(44, 32, "D");
          u8g2.drawStr(85, 32, "S");
          u8g2.drawStr(122, 32, "R");


          u8g2.setCursor(2,24);
          u8g2.print(A,DEC);

          u8g2.setCursor(44,24);
          u8g2.print(D,DEC);

          u8g2.setCursor(85,24);
          u8g2.print(S,DEC);

          if (R<10){
            u8g2.setCursor(122,24);
          }
          else if (R<100){
            u8g2.setCursor(117,24);
          }
          else{
            u8g2.setCursor(110,24);

          }
          u8g2.print(R,DEC);


          int attackEnd = map(A, 0, 255, 0, 40);
          int decayEnd = map(D, 0, 255, 0, 15);
          int sustainEnd = map(S, 0, 255, 0, 14);
          int releaseEnd = map(R, 0, 255, 0, 40);
      
          // Draw the ADSR envelope
          u8g2.drawLine(70, 15, attackEnd+70, 2);  // Attack segment
          u8g2.drawLine(attackEnd+70, 2,(attackEnd+70)+ decayEnd, 15 - sustainEnd);  // Decay segment
          u8g2.drawLine((attackEnd+70)+ decayEnd, 13 - sustainEnd, 105, 13 - sustainEnd);  // Sustain segment
          u8g2.drawLine(105, 13-sustainEnd, 105+releaseEnd, 15);  // Release segment
      }

    }
    u8g2.sendBuffer();          
    //Toggle LED
    digitalToggle(LED_BUILTIN);
  }
  #else
    u8g2.clearBuffer();         // clear the internal memory
    u8g2.setFont(u8g2_font_courB08_tr); // choose a suitable font
    // u8g2.setCursor(100,20);
    // u8g2.print(pos,DEC);
    if (receiver){
      uint8_t x, y;
      u8g2.drawStr(80,8,"Wave(K2):");
      u8g2.drawStr(2, 15,"Vol(K4):");
      u8g2.drawStr(2, 23,"Oct(K3):");
      u8g2.drawStr(2, 6,"Note:");
      u8g2.drawStr(2, 32, "K1");  
      u8g2.drawStr(39, 32, "K2");
      u8g2.drawStr(80, 32, "K3");
      u8g2.drawStr(116, 32, "K4");
      u8g2.setCursor(2,2);
      switch (wave_r){
        case 0:
              u8g2.drawLine(82,20,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,118,10);
              u8g2.drawLine(118,10,118,20);
              break;
        case 1:
              u8g2.drawLine(82,20,90,10);
              u8g2.drawLine(90,10,98,20);
              u8g2.drawLine(98,20,106,10);
              u8g2.drawLine(106,10,114,20);
              break;
        case 2:
              u8g2.drawLine(82,20,90,20);
              u8g2.drawLine(90,20,90,10);
              u8g2.drawLine(90,10,100,10);
              u8g2.drawLine(100,10,100,20);
              u8g2.drawLine(100,20,110,20);
              u8g2.drawLine(110,20,110,10);
              u8g2.drawLine(110,10,120,10);
              u8g2.drawLine(120,10,120,20);
              break;
        case 3: 
              for (x = 0; x < 40; x++) {
                y = 32 + 6 * sin(2 * PI * x / 40);
                u8g2.drawPixel(x+80, y-15);
              }
              break;
      }
      u8g2.setCursor(32,6);
      u8g2.print(currentnote);
      u8g2.print(currentsharp);
      u8g2.setCursor(50,16);
      if (volume_r==8){
        u8g2.drawStr(58, 15,"max");
      }
      else if (volume_r==0){
          u8g2.drawStr(58, 15,"min");
      }
      u8g2.print(volume_r,DEC);
      u8g2.setCursor(50,24);
      if (octave_r==8){
        u8g2.drawStr(58, 23,"max");
      }
      else if (octave_r==0){
          u8g2.drawStr(58, 23,"min");
      }
      u8g2.print(octave_r,DEC);
    }

    if (sender){
      u8g2.drawStr(2, 15,"Vol:");
      u8g2.drawStr(2, 23,"Oct:");
      // u8g2.drawStr(2, 6,"Note:");
      u8g2.setCursor(35,10);
      // u8g2.print(currentnote);
      // u8g2.print(currentsharp);
      u8g2.setCursor(25,16);
      if (volume_s==8){
        u8g2.drawStr(33, 15,"max");
      }
      else if (volume_s==0){
          u8g2.drawStr(33, 15,"min");
      }
      u8g2.print(volume_s,DEC);
      u8g2.setCursor(25,24);
      if (octave_s==8){
        u8g2.drawStr(33, 23,"max");
      }
      else if (octave_s==0){
          u8g2.drawStr(33, 23,"min");
      }
      u8g2.print(octave_s,DEC);

    }

    u8g2.sendBuffer();          
    //Toggle LED
    digitalToggle(LED_BUILTIN);

  #endif
}

void setup() {
  // put your setup code here, to run once:
    msgInQ = xQueueCreate(36,8);
 
  #ifndef TEST_SCAN_KEYS
    msgOutQ = xQueueCreate(36,8);
  #else
    msgOutQ = xQueueCreate(384,8);
  #endif


  #ifndef DISABLE_THREADS
    TaskHandle_t scanKeysHandle = NULL;
    xTaskCreate(
    scanKeysTask,		/* Function that implements the task */
    "scanKeys",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    5,			/* Task priority */
    &scanKeysHandle );  /* Pointer to store the task handle */

    TaskHandle_t displayUpdateTaskHandle = NULL;
    xTaskCreate(
    displayUpdateTask,		/* Function that implements the task */
    "displayUpdate",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    1,			/* Task priority */
    &displayUpdateTaskHandle );

    TaskHandle_t ISRTaskHandle = NULL;
    xTaskCreate(
    ISRTask,		/* Function that implements the task */
    "ISRTaskUpdate",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    6,			/* Task priority */
    &ISRTaskHandle );
    
    TaskHandle_t decodeTaskHandle = NULL;
    xTaskCreate(
    decodeTask,		/* Function that implements the task */
    "decode",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    4,			/* Task priority */
    &decodeTaskHandle);

    TaskHandle_t CAN_TX_TaskHandle = NULL;
    xTaskCreate(
    CAN_TX_Task,		/* Function that implements the task */
    "CanTX",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */
    &CAN_TX_TaskHandle);

    TaskHandle_t sendSoundTaskHandle = NULL;
    xTaskCreate(
    sendSoundTask,		/* Function that implements the task */
    "sendSound",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    3,			/* Task priority */ 
    &sendSoundTaskHandle);
  #endif

  #ifdef TEST_SCAN_KEYS
  TaskHandle_t scanKeysHandle = NULL;
    xTaskCreate(
    scanKeysTask,		/* Function that implements the task */
    "scanKeys",		/* Text name for the task */
    64,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    2,			/* Task priority */
    &scanKeysHandle );  /* Pointer to store the task handle */
  #endif

  #ifdef TEST_DISPLAY_UPDATE
  TaskHandle_t displayUpdateTaskHandle = NULL;
    xTaskCreate(
    displayUpdateTask,		/* Function that implements the task */
    "displayUpdate",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    1,			/* Task priority */
    &displayUpdateTaskHandle );
  #endif

  #ifdef TEST_DECODE
  TaskHandle_t decodeTaskHandle = NULL;
    xTaskCreate(
    decodeTask,		/* Function that implements the task */
    "decode",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    3,			/* Task priority */
    &decodeTaskHandle);
  #endif

  #ifdef TEST_CAN_TX
  TaskHandle_t CAN_TX_TaskHandle = NULL;
    xTaskCreate(
    CAN_TX_Task,		/* Function that implements the task */
    "CanTX",		/* Text name for the task */
    256,      		/* Stack size in words, not bytes */
    NULL,			/* Parameter passed into the task */
    3,			/* Task priority */
    &CAN_TX_TaskHandle);
  #endif

  #ifdef TEST_SEND_SOUND
    TaskHandle_t sendSoundTaskHandle = NULL;
      xTaskCreate(
      sendSoundTask,		/* Function that implements the task */
      "sendSound",		/* Text name for the task */
      256,      		/* Stack size in words, not bytes */
      NULL,			/* Parameter passed into the task */
      4,			/* Task priority */ 
      &sendSoundTaskHandle);
  #endif

  #ifdef TEST_ISR
    TaskHandle_t ISRTaskHandle = NULL;
      xTaskCreate(
      ISRTask,		/* Function that implements the task */
      "ISRTaskUpdate",		/* Text name for the task */
      256,      		/* Stack size in words, not bytes */
      NULL,			/* Parameter passed into the task */
      5,			/* Task priority */
      &ISRTaskHandle );
  #endif
  pressedKeysArrayMutex = xSemaphoreCreateMutex();
  sampleBufferMutex = xSemaphoreCreateBinary();
  for(uint8_t i =0; i<128; i++){
    sampleBuffer0[i] = 0;
    sampleBuffer1[i] = 0;
  }
  xSemaphoreGive(sampleBufferMutex);
  keyArrayMutex = xSemaphoreCreateMutex();
  CAN_TX_Semaphore = xSemaphoreCreateCounting(3,3);


  CAN_Init(false);
  #ifndef DISABLE_THREADS
    CAN_RegisterRX_ISR(CAN_RX_ISR);
    CAN_RegisterTX_ISR(CAN_TX_ISR);
  #endif
  setCANFilter(0x123,0x7ff);
  CAN_Start();


  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply

  #ifndef DISABLE_THREADS
      bool outBits[7] = {0,0,0,1,1,1,1};

      for (uint8_t i=0; i<7; i++) {
        setRow(i);                     //Set row address
        digitalWrite(+OUT_PIN,outBits[i]); //Set value to latch in DFF
      }
      
      delayMicroseconds(1000);

      for (uint8_t i=5; i<7; i++) {
        setRow(i);
        digitalWrite(REN_PIN,1);          //Enable selected row
        delayMicroseconds(3);             //Wait for column inputs to stabilise
        keyArray[i] = readCols();         //Read column inputs
        digitalWrite(REN_PIN,0);          //Disable selected row
      }

      west_detect = ((keyArray[5]&0x08)>>3)^0x01;
      east_detect = ((keyArray[6]&0x08)>>3)^0x01;
      auto_detect(west_detect,east_detect);

  #endif

  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");

  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);
  sampleTimer->setOverflow(22000, HERTZ_FORMAT);
#ifdef DISABLE_THREADS
    #ifdef TEST_CAN_TX_ISR
      for(int i=0; i<3; i++){
        xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
      }
    #endif
    #ifdef TEST_CAN_TX
      for(int i=0; i<3; i++){
        uint8_t TX_Message[8] = {0};
        xQueueSend( msgOutQ, TX_Message, portMAX_DELAY);
      }
    #endif
    #ifdef TEST_DECODE
      for(int i=0; i<36; i++){
        uint8_t RX_Message[8] = {0};
        xQueueSend(msgInQ, RX_Message,portMAX_DELAY);
      }
    #endif
    uint32_t startTime = micros();
    #ifdef TEST_SCAN_KEYS
      for (int iter = 0; iter < 32; iter++) {
        scanKeysTask(NULL);
      }
    #endif
    #ifdef TEST_DISPLAY_UPDATE
      for (int iter = 0; iter < 32; iter++) {
        displayUpdateTask(NULL);
      }
    #endif
    #ifdef TEST_CAN_TX_ISR
      CAN_TX_ISR();
    #endif
    #ifdef TEST_CAN_RX_ISR
      for (int iter = 0; iter < 36; iter++) {
        CAN_RX_ISR();
      }
    #endif
    #ifdef TEST_CAN_TX
      CAN_TX_Task(NULL);
    #endif
    #ifdef TEST_DECODE
     decodeTask(NULL);
    #endif
    #ifdef TEST_SEND_SOUND
     for(int i =0; i<32; i++){
      sendSoundTask(NULL);
     }
    #endif
    #ifdef TEST_SAMPLE_ISR
      sampleISR();
    #endif
    Serial.println(micros()-startTime);
    while(1);
  #else
    vTaskStartScheduler();
  #endif
}

void loop() {
  // put your main code here, to run repeatedly:
}